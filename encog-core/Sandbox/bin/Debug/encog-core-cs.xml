<?xml version="1.0"?>
<doc>
    <assembly>
        <name>encog-core-cs</name>
    </assembly>
    <members>
        <member name="T:Encog.Util.SerializeObject">
            <summary>
            SerializeObject: Load or save an object using DotNet serialization.
            </summary>
        </member>
        <member name="M:Encog.Util.SerializeObject.#ctor">
            <summary>
            Private constructor, call everything statically.
            </summary>
        </member>
        <member name="M:Encog.Util.SerializeObject.Load(System.String)">
            <summary>
            Load the specified filename.
            </summary>
            <param name="filename">The filename to load from.</param>
            <returns>The object loaded from that file.</returns>
        </member>
        <member name="M:Encog.Util.SerializeObject.Save(System.String,System.Object)">
            <summary>
            Save the specified object.
            </summary>
            <param name="filename">The filename to save to.</param>
            <param name="obj">The object to save.</param>
        </member>
        <member name="T:Encog.Util.Randomize.BasicRandomizer">
            <summary>
            Provides basic functionality that most randomizers will need.
            </summary>
        </member>
        <member name="T:Encog.Util.Randomize.IRandomizer">
            <summary>
            Defines the interface for a class that is capable of randomizing the weights
            and thresholds of a neural network.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.IRandomizer.Randomize(System.Double)">
            <summary>
            Starting with the specified number, randomize it to the degree specified
            by this randomizer. This could be a totally new random number, or it
            could be based on the specified number.
            </summary>
            <param name="d">The number to randomize.</param>
            <returns>A randomized number.</returns>
        </member>
        <member name="M:Encog.Util.Randomize.IRandomizer.Randomize(System.Double[])">
            <summary>
            Randomize the array based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.IRandomizer.Randomize(System.Double[][])">
            <summary>
            Randomize the 2d array based on an array, modify the array. Previous
            values may be used, or they may be discarded, depending on the
            randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.IRandomizer.Randomize(Encog.Matrix.Matrix)">
            <summary>
            Randomize the matrix based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="m">A matrix to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.IRandomizer.Randomize(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Randomize the synapses and thresholds in the basic network based on an
            array, modify the array. Previous values may be used, or they may be
            discarded, depending on the randomizer.
            </summary>
            <param name="network">A network to randomize.</param>
        </member>
        <member name="F:Encog.Util.Randomize.BasicRandomizer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.BasicRandomizer.Randomize(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Randomize the synapses and thresholds in the basic network based on an
            array, modify the array. Previous values may be used, or they may be
            discarded, depending on the randomizer.
            </summary>
            <param name="network">A network to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.BasicRandomizer.Randomize(System.Double[])">
            <summary>
            Randomize the array based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.BasicRandomizer.Randomize(System.Double[][])">
            <summary>
            Randomize the 2d array based on an array, modify the array. Previous 
            values may be used, or they may be discarded, depending on the 
            randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.BasicRandomizer.Randomize(Encog.Matrix.Matrix)">
            <summary>
            Randomize the matrix based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="m">A matrix to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.BasicRandomizer.Randomize(System.Double)">
            <summary>
            Starting with the specified number, randomize it to the degree specified
            by this randomizer. This could be a totally new random number, or it
            could be based on the specified number.
            </summary>
            <param name="d">The number to randomize.</param>
            <returns>A randomized number.</returns>
        </member>
        <member name="T:Encog.Util.Logging.Logging">
            <summary>
            A simple class used to quickly configure the log4j package that Encog uses.
            </summary>
        </member>
        <member name="M:Encog.Util.Logging.Logging.GetRootRepository">
            <summary>
            Get the assembly's repository.  From here we will perform much of the configuration.
            </summary>
            <returns>The assembly repository.</returns>
        </member>
        <member name="M:Encog.Util.Logging.Logging.StartConsoleLogging">
            <summary>
            Start logging to the console.
            </summary>
        </member>
        <member name="M:Encog.Util.Logging.Logging.StopConsoleLogging">
            <summary>
            Stop logging to the console.
            </summary>
        </member>
        <member name="T:Encog.Util.Banchmark.RandomTrainingFactory">
            <summary>
            Class used to generate random training sets.
            </summary>
        </member>
        <member name="M:Encog.Util.Banchmark.RandomTrainingFactory.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.Banchmark.RandomTrainingFactory.Generate(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Generate a random training set.
            </summary>
            <param name="count">How many training items to generate.</param>
            <param name="inputCount">How many input numbers.</param>
            <param name="idealCount">How many ideal numbers.</param>
            <param name="min">The minimum random number.</param>
            <param name="max">The maximum random number.</param>
            <returns>The random training set.</returns>
        </member>
        <member name="T:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor">
            <summary>
            The Encog persistor used to persist the RadialBasisFunctionLayer class.
            </summary>
        </member>
        <member name="T:Encog.Persist.IPersistor">
            <summary>
            This interface defines a class that can load and save an
            EncogPersistedObject.
            </summary>
        </member>
        <member name="M:Encog.Persist.IPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load from the specified node.
            </summary>
            <param name="xmlin">The node to load from.</param>
            <returns>The EncogPersistedObject that was loaded.</returns>
        </member>
        <member name="M:Encog.Persist.IPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified object.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlout">The XML object.</param>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.PROPERTY_RADIAL_FUNCTIONS">
            <summary>
            XML tag for the radial functions collection.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.PROPERTY_RADIAL_FUNCTION">
            <summary>
            XML tag for the radial functions collection.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.PROPERTY_CENTER">
            <summary>
            The center of the RBF. XML property.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.PROPERTY_PEAK">
            <summary>
            The peak of the RBF. XML property.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.PROPERTY_WIDTH">
            <summary>
            The width of the RBF. XML property.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load a RBF layer.
            </summary>
            <param name="xmlIn">The XML to read from.</param>
            <returns>The object that was loaded.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.LoadRadialFunction(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load a RBF function.
            </summary>
            <param name="xmlIn">The XML reader.</param>
            <returns>the RBF loaded.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.LoadRadialFunctions(Encog.Parse.Tags.Read.ReadXML,System.Collections.Generic.IList{Encog.Util.MathUtil.RBF.IRadialBasisFunction})">
            <summary>
            Load a list of radial functions.
            </summary>
            <param name="xmlIn">THe XML reader.</param>
            <param name="radialFunctions">The radial functions.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.RadialBasisFunctionLayerPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save a RBF layer.
            </summary>
            <param name="obj">Save a RBF layer.</param>
            <param name="xmlOut">XML stream to write to.</param>
        </member>
        <member name="T:Encog.Normalize.Target.NormalizationStorageArray2D">
            <summary>
            Output the normalized data to a 2D array.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Target.INormalizationStorage">
            <summary>
            Defines a means by which normalized data can be stored.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.INormalizationStorage.Close">
            <summary>
            Open the storage.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.INormalizationStorage.Open">
            <summary>
            Close the storage.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.INormalizationStorage.Write(System.Double[],System.Int32)">
            <summary>
            Write an array.
            </summary>
            <param name="data">The data to write.</param>
            <param name="inputCount">How much of the data is input.</param>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageArray2D.array">
            <summary>
            The array to output to.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageArray2D.currentIndex">
            <summary>
            The current data.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray2D.#ctor(System.Double[][])">
            <summary>
            Construct an object to store to a 2D array.
            </summary>
            <param name="array">The array to store to.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray2D.Close">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray2D.Open">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray2D.Write(System.Double[],System.Int32)">
            <summary>
            Write an array.
            </summary>
            <param name="data">The data to write.</param>
            <param name="inputCount">How much of the data is input.</param>
        </member>
        <member name="T:Encog.Normalize.Output.OutputFieldRangeMapped">
            <summary>
            A ranged mapped output field.  This will scale the input so that it
            is between the high and low value.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.BasicOutputField">
            <summary>
            Provides very basic functionality for output fields.  Primarily provides
            the ideal instance variable.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.IOutputField">
             <summary>
             An output field, this represents the actual output from the 
             normalization.  Output from the normalization class is usually
             input to a neural network.
            
             An output field may contain several subfields that will be
             generated.  Call getSubfieldCount to determine how many fields
             will be generated.  A simple field will return 1, indicating that 
             this is a single field.
             </summary>
        </member>
        <member name="M:Encog.Normalize.Output.IOutputField.Calculate(System.Int32)">
            <summary>
            Calculate the value for this field.  Specify subfield of zero
            if this is a simple field.
            </summary>
            <param name="subfield"> The subfield index.</param>
            <returns>The calculated value for this field.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.IOutputField.RowInit">
            <summary>
            Init this field for a new row.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.IOutputField.SubfieldCount">
            <summary>
            The numebr of fields that will actually be generated by 
            this field. For a simple field, this value is 1.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.IOutputField.Ideal">
            <summary>
            Is this field part of the ideal data uses to train the
            neural network.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.BasicOutputField.ideal">
            <summary>
            Is this field part of the ideal data uses to train the
            neural network.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.BasicOutputField.RowInit">
            <summary>
            Init this field for a new row.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.BasicOutputField.Calculate(System.Int32)">
            <summary>
            Calculate the value for this field.  Specify subfield of zero
            if this is a simple field.
            </summary>
            <param name="subfield"> The subfield index.</param>
            <returns>The calculated value for this field.</returns>
        </member>
        <member name="P:Encog.Normalize.Output.BasicOutputField.SubfieldCount">
            <summary>
            The numebr of fields that will actually be generated by 
            this field. For a simple field, this value is 1.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.BasicOutputField.Ideal">
            <summary>
            Is this field part of the ideal data uses to train the
            neural network.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldRangeMapped.field">
            <summary>
            The input field to scale.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldRangeMapped.low">
            <summary>
            The low value of the field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldRangeMapped.high">
            <summary>
            The high value of the field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldRangeMapped.#ctor">
            <summary>
            Default constructor, used mainly for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldRangeMapped.#ctor(Encog.Normalize.Input.IInputField,System.Double,System.Double)">
            <summary>
            Construct a range mapped output field.
            </summary>
            <param name="field">The input field to base this on.</param>
            <param name="low">The low value.</param>
            <param name="high">The high value.</param>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldRangeMapped.Calculate(System.Int32)">
            <summary>
            Calculate this output field.
            </summary>
            <param name="subfield">Not used.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldRangeMapped.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldRangeMapped.Field">
            <summary>
            The field that this output is based on.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldRangeMapped.High">
            <summary>
            The high value of the range to map into.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldRangeMapped.Low">
            <summary>
            The low value of the range to map into.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldRangeMapped.SubfieldCount">
            <summary>
            This field only produces one value, so this will return 1.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.TrainingError">
            <summary>
            A training error has occured.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralNetworkError">
            <summary>
            Indicates an error has occurred in the Neural Network classes..
            </summary>
        </member>
        <member name="T:Encog.EncogError">
            <summary>
            The base Encog error from which all other errors are build.
            </summary>
        </member>
        <member name="M:Encog.EncogError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.EncogError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="M:Encog.Neural.NeuralNetworkError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.NeuralNetworkError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.TrainingError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.TrainingError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.Networks.Training.CPN.FindCPN">
            <summary>
            Find the parts of a CPN network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.inputLayer">
            <summary>
            The input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.instarLayer">
            <summary>
            The instar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.outstarLayer">
            <summary>
            The outstar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.instarSynapse">
            <summary>
            The synapse from the input to instar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.outstarSynapse">
            <summary>
            The synapse from the instar to the outstar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.FindCPN.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.FindCPN.#ctor(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Construct the object and find the parts of the network.
            </summary>
            <param name="network">The network to train.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.FindCPN.Winner(Encog.Neural.Data.INeuralData)">
            <summary>
            Calculate the winning neuron from the data, this is the neuron
            that has the highest output.
            </summary>
            <param name="data">The data to use to determine the winning neuron.</param>
            <returns>The winning neuron index, or -1 if no winner.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.FindCPN.InputLayer">
            <summary>
            The input layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.FindCPN.InstarLayer">
            <summary>
            The instar layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.FindCPN.OutstarLayer">
            <summary>
            The outstar layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.FindCPN.InstarSynapse">
            <summary>
            The instar synapse.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.FindCPN.OutstarSynapse">
            <summary>
            The outstar synapse.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit">
            <summary>
            The "Best Matching Unit" or BMU is a very important concept in the training
            for a SOM. The BMU is the output neuron that has weight connections to the
            input neurons that most closely match the current input vector. This neuron
            (and its "neighborhood") are the neurons that will receive training.
            
            This class also tracks the worst distance (of all BMU's). This gives some
            indication of how well the network is trained, and thus becomes the "error"
            of the entire network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.training">
            <summary>
            The owner of this class.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.worstDistance">
            <summary>
            What is the worst BMU distance so far, this becomes the error for the
            entire SOM.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.#ctor(Encog.Neural.Networks.Training.Competitive.CompetitiveTraining)">
            <summary>
            Construct a BestMatchingUnit class.  The training class must be provided.
            </summary>
            <param name="training">The parent class.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.CalculateBMU(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData)">
            <summary>
            Calculate the best matching unit (BMU). This is the output neuron that
            has the lowest Euclidean distance to the input vector.
            </summary>
            <param name="synapse">The synapse to calculate for.</param>
            <param name="input">The input vector.</param>
            <returns>The output neuron number that is the BMU.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.CalculateEuclideanDistance(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData,System.Int32)">
            <summary>
            Calculate the Euclidean distance for the specified output neuron and the
            input vector.  This is the square root of the squares of the differences
            between the weight and input vectors.
            </summary>
            <param name="synapse">The synapse to get the weights from.</param>
            <param name="input">The input vector.</param>
            <param name="outputNeuron">The neuron we are calculating the distance for.</param>
            <returns>The Euclidean distance.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.Reset">
            <summary>
            Reset the "worst distance" back to a minimum value.  This should be
            called for each training iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.BestMatchingUnit.WorstDistance">
            <summary>
            What is the worst BMU distance so far, this becomes the error 
            for the entire SOM.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.SynapseType">
            <summary>
            Specifies the type of synapse to be created.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.SynapseType.OneToOne">
            <summary>
            OneToOne - Each neuron is connected to the same neuron number
            in the next layer.  The two layers must have the same number
            of neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.SynapseType.Weighted">
            <summary>
            Weighted - The neurons are connected between the two levels
            with weights.  These weights change during training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.SynapseType.Weightless">
            <summary>
            Weightless - Every neuron is connected to every other neuron
            in the next layer, but there are no weights.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.SynapseType.Direct">
            <summary>
            Direct - Input is simply passed directly to the next layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.SynapseType.Normalize">
            <summary>
            Normalize - A synapse that normalizes the data.  Used to implement
            a SOM.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.INeuralNetworkPattern">
            <summary>
            Patterns are used to create common sorts of neural networks.
            Information about the structure of the neural network is 
            communicated to the pattern, and then generate is called to
            produce a neural network of this type.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add the specified hidden layer.
            </summary>
            <param name="count">The number of neurons in the hidden layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.Generate">
            <summary>
            Generate the specified neural network.
            </summary>
            <returns>The resulting neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.Clear">
            <summary>
            Clear the hidden layers so that they can be redefined.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.ActivationFunction">
            <summary>
            Set the activation function to be used for all created layers
            that allow an activation function to be specified.  Not all
            patterns allow the activation function to be specified.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.InputNeurons">
            <summary>
            Set the number of input neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.INeuralNetworkPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.ThermalLogic">
            <summary>
            Provides the neural logic for thermal networks.  Functions as a base 
            class for BoltzmannLogic and HopfieldLogic.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.SimpleRecurrentLogic">
            <summary>
            Provides the neural logic for an Simple Recurrent Network (SRN) type network.  
            This class is used for the Elman and Jordan networks.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.FeedforwardLogic">
            <summary>
            Provides the neural logic for an Feedforward type network.  See FeedforwardPattern
            for more information on this type of network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.INeuralLogic">
            <summary>
            Neural logic classes implement neural network logic for a variety
            of neural network setups.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.INeuralLogic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for the BasicNetwork class.
            </summary>
            <param name="input">The input to the network.</param>
            <param name="useHolder">The NeuralOutputHolder to use.</param>
            <returns>The output from the network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.INeuralLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.FeedforwardLogic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.FeedforwardLogic.network">
            <summary>
            The network to use.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.FeedforwardLogic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for a given input to the neural network. This method
            provides a parameter to specify an output holder to use.  This holder
            allows propagation training to track the output from each layer.
            If you do not need this holder pass null, or use the other 
            compare method.
            </summary>
            <param name="input">The input provide to the neural network.</param>
            <param name="useHolder">Allows a holder to be specified, this allows
            propagation training to check the output of each layer.</param>
            <returns>The results from the output neurons.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.FeedforwardLogic.Compute(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Data.INeuralData,Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Internal computation method for a single layer.  This is called, 
            as the neural network processes.
            </summary>
            <param name="holder">The output holder.</param>
            <param name="layer">The layer to process.</param>
            <param name="input">The input to this layer.</param>
            <param name="source">The source synapse.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.FeedforwardLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.FeedforwardLogic.PreprocessLayer(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Data.INeuralData,Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Can be overridden by subclasses.  Usually used to implement recurrent 
            layers. 
            </summary>
            <param name="layer">The layer to process.</param>
            <param name="input">The input to this layer.</param>
            <param name="source">The source from this layer.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.FeedforwardLogic.Network">
            <summary>
            The network in use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.SimpleRecurrentLogic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.SimpleRecurrentLogic.PreprocessLayer(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Data.INeuralData,Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Handle recurrent layers.  See if there are any recurrent layers before
            the specified layer that must affect the input.
            </summary>
            <param name="layer">The layer being processed, see if there are any recurrent
            connections to this.</param>
            <param name="input">The input to the layer, will be modified with the result
            from any recurrent layers.</param>
            <param name="source">The source synapse.</param>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ThermalLogic.thermalLayer">
            <summary>
            The thermal layer that is to be used.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ThermalLogic.thermalSynapse">
            <summary>
            The thermal layer's single self-connected synapse.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ThermalLogic.currentState">
            <summary>
            The current state of the thermal network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ThermalLogic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ThermalLogic.CalculateEnergy">
            <summary>
            Calculate the current energy for the network.  The 
            network will seek to lower this value.
            </summary>
            <returns>The energy value.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ThermalLogic.Clear">
            <summary>
            Clear any connection weights.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ThermalLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ThermalLogic.NeuronCount">
            <summary>
            Get the neuron count for the network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ThermalLogic.ThermalLayer">
            <summary>
            The main thermal layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ThermalLogic.ThermalSynapse">
            <summary>
            The thermal synapse.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ThermalLogic.CurrentState">
            <summary>
            The current state of the network.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.MarketError">
            <summary>
            The base error for the market data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.Loader.IMarketLoader">
            <summary>
            A market loader for financial information.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.IMarketLoader.Load(Encog.Neural.NeuralData.Market.TickerSymbol,System.Collections.Generic.IList{Encog.Neural.NeuralData.Market.MarketDataType},System.DateTime,System.DateTime)">
            <summary>
            Load the specified ticker symbol for the specified date.
            </summary>
            <param name="ticker">The ticker symbol to load.</param>
            <param name="dataNeeded">Which data is actually needed.</param>
            <param name="from">Beginning date for load.</param>
            <param name="to">Ending date for load.</param>
            <returns>A collection of LoadedMarketData objects that was loaded.</returns>
        </member>
        <member name="T:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet">
            <summary>
            An implementation of the NeuralDataSet interface designed to provide a CSV
            file to the neural network. This implementation uses the BasicNeuralData to
            hold the data being read. This class has no ability to write CSV files.
            The columns of the CSV file will specify both the input and ideal 
            columns.  
            
            This class is not memory based, so very long files can be used, 
            without running out of memory.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.INeuralDataSet">
            <summary>
            An interface designed to abstract classes that store neural data. This
            interface is designed to provide NeuralDataPair objects. This can be used to
            train neural networks using both supervised and unsupervised training.
            
            Some implementations of this interface are memory based. That is they store
            the entire contents of the dataset in memory.
            
            Other implementations of this interface are not memory based. These
            implementations read in data as it is needed. This allows very large datasets
            to be used. Typically the add methods are not supported on non-memory based
            datasets.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.INeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Add a NeuralData object to the dataset. This is used with unsupervised
            training, as no ideal output is provided. Note: not all implemenations
            support the add methods. 
            </summary>
            <param name="data1">The data to add.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.INeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Add a set of input and ideal data to the dataset. This is used with
            supervised training, as ideal output is provided. Note: not all
            implementations support the add methods.
            </summary>
            <param name="inputData">Input data.</param>
            <param name="idealData">Ideal data.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.INeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Add a NeuralData object to the dataset. This is used with unsupervised
            training, as no ideal output is provided. Note: not all implementations
            support the add methods. 
            </summary>
            <param name="inputData">A NeuralDataPair object that contains both input and ideal
            data.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.INeuralDataSet.Close">
            <summary>
            Close this datasource and release any resources obtained by it, including
            any iterators created. 
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.INeuralDataSet.GetEnumerator">
            <summary>
            Get an enumerator to access the data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Neural.NeuralData.INeuralDataSet.IdealSize">
            <summary>
            The size of the ideal data.  Zero if unsupervised.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.INeuralDataSet.InputSize">
            <summary>
            The size of the input data.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.filename">
            <summary>
            The CSV filename to read from.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.inputSize">
            <summary>
            The number of columns of input data.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.idealSize">
            <summary>
            The number of columns of ideal data.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.format">
            <summary>
            The format that separates the columns, defaults to a comma.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.headers">
            <summary>
            Specifies if headers are present on the first row.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct this data set using a comma as a delimiter.
            </summary>
            <param name="filename">The CSV filename to read.</param>
            <param name="inputSize">The number of columns that make up the input set.</param>
            <param name="idealSize">The number of columns that make up the ideal set.</param>
            <param name="headers">True if headers are present on the first line.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.#ctor(System.String,System.Int32,System.Int32,System.Boolean,Encog.Util.CSV.CSVFormat)">
            <summary>
            Construct this data set using a comma as a delimiter.
            </summary>
            <param name="filename">The CSV filename to read.</param>
            <param name="inputSize">The number of columns that make up the input set.</param>
            <param name="idealSize">The number of columns that make up the ideal set.</param>
            <param name="headers">True if headers are present on the first line.</param>
            <param name="format">The format to use.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Not used.
            </summary>
            <param name="data1">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Not used.
            </summary>
            <param name="inputData">Not used.</param>
            <param name="idealData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Not used.
            </summary>
            <param name="inputData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Close">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator to use.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator to use.</returns>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Filename">
            <summary>
            Get the filename for the CSV file.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Format">
            <summary>
            The delimiter.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.Headers">
            <summary>
            True if the first row specifies field names.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.IdealSize">
            <summary>
            The amount of ideal data.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.InputSize">
            <summary>
            The amount of input data.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator">
            <summary>
            The enumerator for the CSVNeuralDataSet.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.reader">
            <summary>
            A ReadCSV object used to parse the CSV file.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.#ctor(Encog.Neural.NeuralData.CSV.CSVNeuralDataSet)">
            <summary>
            The enumerator for the CSV set.
            </summary>
            <param name="owner">The owner of this enumerator.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns>True if there is a next item.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.Reset">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.Current">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.CSV.CSVNeuralDataSet.CSVNeuralEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationTANH">
            <summary>
            The hyperbolic tangent activation function takes the curved shape of the
            hyperbolic tangent. This activation function produces both positive and
            negative output. Use this activation function if both negative and positive
            output is desired.
            
            This implementation does an approximation of the TANH function, using only a
            single base e exponent.  This has a considerable effect on performance, adds
            only minimal change to the output compared to a standard TANH calculation.
            
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.BasicActivationFunction">
            <summary>
            Holds basic functionality that all activation functions will likely have use
            of. Specifically it implements a name and description for the
            EncogPersistedObject class.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.IActivationFunction">
            <summary>
            This interface allows various activation functions to be used with the neural
            network. Activation functions are applied to the output from each layer of a
            neural network. Activation functions scale the output into the desired range.
            
            Methods are provided both to process the activation function, as well as the
            derivative of the function. Some training algorithms, particularly back
            propagation, require that it be possible to take the derivative of the
            activation function.
            
            Not all activation functions support derivatives. If you implement an
            activation function that is not derivable then an exception should be thrown
            inside of the derivativeFunction method implementation.
            
            Non-derivable activation functions are perfectly valid, they simply cannot be
            used with every training algorithm.
            </summary>
        </member>
        <member name="T:Encog.Persist.IEncogPersistedObject">
            <summary>
            An Encog persisted object, that can be written to XML.
            </summary>
        </member>
        <member name="M:Encog.Persist.IEncogPersistedObject.CreatePersistor">
            <summary>
            Create a persistor for this object.
            </summary>
            <returns>A persistor for this object.</returns>
        </member>
        <member name="M:Encog.Persist.IEncogPersistedObject.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>A cloned version of this object.</returns>
        </member>
        <member name="P:Encog.Persist.IEncogPersistedObject.Description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="P:Encog.Persist.IEncogPersistedObject.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.IActivationFunction.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.IActivationFunction.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d"></param>
        </member>
        <member name="P:Encog.Neural.Activation.IActivationFunction.HasDerivative">
            <summary>
            Return true if this function has a derivative.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.BasicActivationFunction.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.BasicActivationFunction.CreatePersistor">
            <summary>
            Create a persistor.  Not implemented at this level.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.BasicActivationFunction.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Encog.Neural.Activation.BasicActivationFunction.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.BasicActivationFunction.Description">
            <summary>
            Always returns null, descriptions and names are not used
            for activation functions.
            </summary>
        </member>
        <member name="P:Encog.Neural.Activation.BasicActivationFunction.Name">
            <summary>
            Always returns null, descriptions and names are not used
            for activation functions.
            </summary>
        </member>
        <member name="P:Encog.Neural.Activation.BasicActivationFunction.HasDerivative">
            <summary>
            Return true if this function has a derivative.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationTANH.ActivationFunction(System.Double)">
            <summary>
            Internal activation function that performs the TANH.
            </summary>
            <param name="d">The input value.</param>
            <returns>The output value.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationTANH.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationTANH.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationTANH.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationTANH.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationTANH.HasDerivative">
            <summary>
            Return true, TANH has a derivative.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationSigmoid">
            <summary>
            The sigmoid activation function takes on a sigmoidal shape. Only positive
            numbers are generated. Do not use this activation function if negative number
            output is desired.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSigmoid.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSigmoid.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSigmoid.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSigmoid.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationSigmoid.HasDerivative">
            <summary>
            Return true, sigmoid has a derivative.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationGaussian">
            <summary>
            An activation function based on the gaussian function.
            </summary>
        </member>
        <member name="F:Encog.Neural.Activation.ActivationGaussian.gausian">
            <summary>
            The gaussian function to be used.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationGaussian.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a gaussian activation function.
            </summary>
            <param name="center">The center of the curve.</param>
            <param name="peak">The peak of the curve.</param>
            <param name="width">The width of the curve.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationGaussian.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationGaussian.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationGaussian.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationGaussian.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationGaussian.Gausian">
            <summary>
            The gaussian funcion used.
            </summary>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationGaussian.HasDerivative">
            <summary>
            Return true, gaussian has a derivative.
            </summary>
        </member>
        <member name="T:Encog.Matrix.MatrixError">
            <summary>
            Indicates an error has occurred in Matrix classes..
            </summary>
        </member>
        <member name="M:Encog.Matrix.MatrixError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Matrix.MatrixError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Bot.RSS.RSSItem">
            <summary>
            RSSItem: This is the class that holds individual RSS items,
            or stories, for the RSS class.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSSItem.title">
            <summary>
            The title of this item.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSSItem.link">
            <summary>
            The hyperlink to this item.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSSItem.description">
            <summary>
            The description of this item.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSSItem.date">
            <summary>
            The date this item was published.
            </summary>
        </member>
        <member name="M:Encog.Bot.RSS.RSSItem.Load(System.Xml.XmlNode)">
            <summary>
            Load an item from the specified node.
            </summary>
            <param name="node">The Node to load the item from.</param>
        </member>
        <member name="M:Encog.Bot.RSS.RSSItem.ToString">
            <summary>
            Convert the object to a String.
            </summary>
            <returns>The object as a String.</returns>
        </member>
        <member name="P:Encog.Bot.RSS.RSSItem.Title">
            <summary>
            The title of this item.
            </summary>
        </member>
        <member name="P:Encog.Bot.RSS.RSSItem.Link">
            <summary>
            The hyperlink to this item.
            </summary>
        </member>
        <member name="P:Encog.Bot.RSS.RSSItem.Description">
            <summary>
            The description of this item.
            </summary>
        </member>
        <member name="P:Encog.Bot.RSS.RSSItem.Date">
            <summary>
            The date this item was published.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Range.DocumentRange">
            <summary>
            Base class that represents a document range. A document range is a collection
            of tags that all apply to one "concept". For example, a Form, or a Link. This
            allows the form to collect the elements inside the form, or a link to collect
            the text along with the link tag.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.begin">
            <summary>
            The beginning index for this range.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.end">
            <summary>
            The ending index for this range.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.source">
            <summary>
            The source page for this range.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.idAttribute">
            <summary>
            The id attribute, on the source tag.  Useful for DIV tags.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.classAttribute">
            <summary>
            The class attribute. on the source tag.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.elements">
            <summary>
            Sub elements of this range.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.DocumentRange.parent">
            <summary>
            The parent to this range, or null if top.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.DocumentRange.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct a document range from the specified WebPage.
            </summary>
            <param name="source">The web page that this range belongs to.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.DocumentRange.AddElement(Encog.Bot.Browse.Range.DocumentRange)">
            <summary>
            Add an element.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.DocumentRange.GetTextOnly">
            <summary>
            Get the text from this range.
            </summary>
            <returns>The text from this range.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.Range.DocumentRange.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.Begin">
            <summary>
            The beginning of this attribute.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.ClassAttribute">
            <summary>
            The HTML class attribiute for this element.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.Elements">
            <summary>
            The elements of this document range. 
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.End">
            <summary>
            The ending index.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.IdAttribute">
            <summary>
            The HTML id for this element.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.Parent">
            <summary>
            The web page that owns this class.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.DocumentRange.Source">
            <summary>
            The web page that this range is owned by.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Browser">
            <summary>
            The main class for web browsing. This class allows you to navigate to a
            specific URL. Once you navigate to one URL, you can naviage to any URL
            contained on the page.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Browser.currentPage">
            <summary>
            The page that is currently being browsed.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Browser.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(Encog.Bot.Browse.Range.Form)">
            <summary>
            Navigate to the specified form by performing a submit of that form.
            </summary>
            <param name="form">The form to be submitted.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(Encog.Bot.Browse.Range.Form,Encog.Bot.Browse.Range.Input)">
            <summary>
            Navigate based on a form. Complete and post the form.
            </summary>
            <param name="form">The form to be posted.</param>
            <param name="submit">The submit button on the form to simulate clicking.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(Encog.Bot.Browse.Range.Link)">
            <summary>
            Navigate to a new page based on a link.
            </summary>
            <param name="link">The link to navigate to.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(System.String)">
            <summary>
            Navigate based on a string URL.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(System.Uri)">
            <summary>
            Navigate to a page based on a URL object. This will be an HTTP GET
            operation.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Browser.Navigate(System.Uri,System.IO.Stream)">
            <summary>
            Navigate to a page and post the specified data.
            </summary>
            <param name="url">The URL to post the data to.</param>
            <param name="istream">The data to post to the page.</param>
        </member>
        <member name="P:Encog.Bot.Browse.Browser.CurrentPage">
            <summary>
            The page currently being browsed.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Address">
            <summary>
            A URL address. Holds both the URL object, as well as original text.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Address.original">
            <summary>
            The original text from the address.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Address.url">
            <summary>
            The address as a URL.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Address.#ctor(System.Uri)">
            <summary>
            Construct the address from a URL.
            </summary>
            <param name="u">The URL to use.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Address.#ctor(System.Uri,System.String)">
            <summary>
            Construct a URL using a perhaps relative URL and a base URL.
            </summary>
            <param name="b">The base URL.</param>
            <param name="original">A full URL or a URL relative to the base.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Address.ToString">
            <summary>
            The object as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Bot.Browse.Address.Original">
            <summary>
            The original text from this URL.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Address.Url">
            <summary>
            The URL.
            </summary>
        </member>
        <member name="T:Encog.Bot.BotError">
            <summary>
            Indicates an error has occurred in the bot classes.
            </summary>
        </member>
        <member name="M:Encog.Bot.BotError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Bot.BotError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Util.Randomize.FanInRandomizer">
             <summary>
             A randomizer that attempts to create starting weight values that are
             conducive to back propagation training.
            
             From:
              
             Neural Networks - A Comprehensive Foundation, Haykin, chapter 6.7
             </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.ERROR">
            <summary>
            Error message. Can't use fan-in on a single number.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.lowerBound">
            <summary>
            The lower bound.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.upperBound">
            <summary>
            The upper bound. 
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.DEFAULT_BOUNDARY">
            <summary>
            The default boundary.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.sqrt">
            <summary>
            Should the square root of the number of rows be used?
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.FanInRandomizer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.#ctor">
            <summary>
            Create a fan-in randomizer with default values.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.#ctor(System.Double,System.Boolean)">
            <summary>
            Construct a fan-in randomizer along the specified boundary. The min will
            be -boundary and the max will be boundary.
            </summary>
            <param name="boundary">The boundary for the fan-in.</param>
            <param name="sqrt">Should the square root of the rows to be used in the
            calculation.</param>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Construct a fan-in randomizer. Use the specified bounds.
            </summary>
            <param name="aLowerBound">The lower bound.</param>
            <param name="anUpperBound">The upper bound.</param>
            <param name="sqrt">True if the square root of the rows should be used in the
            calculation.</param>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.CalculateValue(System.Int32)">
            <summary>
            Calculate the fan-in value.
            </summary>
            <param name="rows">The number of rows.</param>
            <returns>The fan-in value.</returns>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.CauseError">
            <summary>
            Throw an error if this class is used improperly.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.Randomize(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Randomize the synapses and thresholds in the basic network based on an
            array, modify the array. Previous values may be used, or they may be
            discarded, depending on the randomizer.
            </summary>
            <param name="network">A network to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.Randomize(System.Double)">
            <summary>
            Starting with the specified number, randomize it to the degree specified
            by this randomizer. This could be a totally new random number, or it
            could be based on the specified number.
            </summary>
            <param name="d">The number to randomize.</param>
            <returns>A randomized number.</returns>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.Randomize(System.Double[])">
            <summary>
            Randomize the array based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.Randomize(System.Double[][])">
            <summary>
            Randomize the 2d array based on an array, modify the array. Previous 
            values may be used, or they may be discarded, depending on 
            the randomizer.
            </summary>
            <param name="d">An array to randomize.</param>
        </member>
        <member name="M:Encog.Util.Randomize.FanInRandomizer.Randomize(Encog.Matrix.Matrix)">
            <summary>
            Randomize the matrix based on an array, modify the array. Previous values
            may be used, or they may be discarded, depending on the randomizer.
            </summary>
            <param name="m">A matrix to randomize.</param>
        </member>
        <member name="T:Encog.Util.HTTP.FormUtility">
            <summary>
            FormUtility: This class is used to construct responses to
            HTML forms. The class supports both standard HTML forms,
            as well as multipart forms.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.getBoundary">
            <summary>
            Generate a boundary for a multipart form.
            </summary>
            <returns>The boundary.</returns>
        </member>
        <member name="F:Encog.Util.HTTP.FormUtility.boundary">
            <summary>
            The boundary used for a multipart post. This field is
            null if this is not a multipart form and has a value if
            this is a multipart form.
            </summary>
        </member>
        <member name="F:Encog.Util.HTTP.FormUtility.os">
            <summary>
            The stream to output the encoded form to.
            </summary>
        </member>
        <member name="F:Encog.Util.HTTP.FormUtility.writer">
            <summary>
            The text writer to use.
            </summary>
        </member>
        <member name="F:Encog.Util.HTTP.FormUtility.first">
            <summary>
            Keep track of if we're on the first form element.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Encode(System.String)">
            <summary>
            Encode the specified string. This encodes all special
            characters.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.RandomString">
            <summary>
            Generate a random string, of a specified length. This
            is used to generate the multipart boundary.
            </summary>
            <returns>A random string.</returns>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.#ctor(System.IO.Stream,System.String)">
            <summary>
            Prepare to access either a regular, or multipart, form.
            </summary>
            <param name="os">The stream to output to.</param>
            <param name="boundary">The boundary to be used, or null if this is
            not a multipart form.</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.AddFile(System.String,System.String)">
            <summary>
            Add a file to a multipart form.  Default mime type to
            application/octet-stream.
            </summary>
            <param name="name">The field name.</param>
            <param name="file">The file to attach.</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.AddFile(System.String,System.String,System.String)">
            <summary>
            Add a file to a multipart form.
            </summary>
            <param name="name">The field name.</param>
            <param name="file">he file to attach.</param>
            <param name="type">The mime type</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Add(System.String,System.String)">
            <summary>
            Add a regular text field to either a regular or
            multipart form.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Complete">
            <summary>
            Complete the building of the form.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Boundary">
            <summary>
            Generate a multipart form boundary.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Newline">
            <summary>
            Create a new line by displaying a carriage return and
            linefeed.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Write(System.String)">
            <summary>
            Write the specified string, without a carriage return
            and line feed.
            </summary>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.WriteName(System.String)">
            <summary>
            Write the name element for a multipart post.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Encog.Util.HTTP.FormUtility.Writeln(System.String)">
            <summary>
            Write a string, with a carriage return and linefeed.
            </summary>
            <param name="str">The string to write.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.WeightlessSynapsePersistor">
            <summary>
            The Encog persistor used to persist the WeightlessSynapse class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.WeightlessSynapsePersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.WeightlessSynapsePersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.PersistorUtil">
            <summary>
            This class contains some utilities for persisting objects.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PersistorUtil.ATTRIBUTE_MATRIX_ROWS">
            <summary>
            The rows in the matrix.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PersistorUtil.ATTRIBUTE_MATRIX_COLS">
            <summary>
            The columns in the matrix.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PersistorUtil.ROW">
            <summary>
            A matrix row.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.PersistorUtil.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.PersistorUtil.BeginEncogObject(System.String,Encog.Parse.Tags.Write.WriteXML,Encog.Persist.IEncogPersistedObject,System.Boolean)">
            <summary>
            Write the beginning XML for an Encog object.
            </summary>
            <param name="objectType">The object type to persist.</param>
            <param name="xmlOut">The object that is being persisted.</param>
            <param name="obj">The XML writer.</param>
            <param name="top">Is this a top-level object, that needs a name
            and description?</param>
        </member>
        <member name="M:Encog.Persist.Persistors.PersistorUtil.CreatePersistor(System.String)">
            <summary>
            Create a persistor object.  These objects know how to persist
            certain types of classes.
            </summary>
            <param name="className">The name of the class to create a persistor for.</param>
            <returns>The persistor for the specified class.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.PersistorUtil.LoadMatrix(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load a matrix from the reader.
            </summary>
            <param name="xmlIn">The XML reader.</param>
            <returns>The loaded matrix.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.PersistorUtil.SaveMatrix(Encog.Matrix.Matrix,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified matrix.
            </summary>
            <param name="matrix">The matrix to save.</param>
            <param name="xmlOut">The XML writer.</param>
        </member>
        <member name="F:Encog.Persist.Persistors.PersistorUtil.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.BasicLayerPersistor">
            <summary>
            Provides basic functions that many of the persistors will need.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicLayerPersistor.TAG_ACTIVATION">
            <summary>
            The activation function tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicLayerPersistor.PROPERTY_NEURONS">
            <summary>
            The neurons property.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicLayerPersistor.PROPERTY_THRESHOLD">
            <summary>
            The threshold property.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicLayerPersistor.PROPERTY_X">
            <summary>
            The x-coordinate to place this object at.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicLayerPersistor.PROPERTY_Y">
            <summary>
            The y-coordinate to place this object at.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicLayerPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicLayerPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationSINPersistor">
            <summary>
            The Encog persistor used to persist the ActivationSIN class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSINPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSINPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Location.StreamPersistence">
            Create a location based on a Stream.
        </member>
        <member name="T:Encog.Persist.Location.IPersistenceLocation">
            <summary>
            A persistence location specifies how the persistence collection is stored.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.IPersistenceLocation.CreateStream(System.IO.FileMode)">
            <summary>
            Create a new stream to read data from.
            </summary>
            <returns>A new stream to read data from.</returns>
        </member>
        <member name="M:Encog.Persist.Location.IPersistenceLocation.Exists">
            <summary>
            Determine if this location exists.
            </summary>
            <returns>True if this location exists.</returns>
        </member>
        <member name="M:Encog.Persist.Location.IPersistenceLocation.Delete">
            <summary>
            Delete the location, if possible.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.IPersistenceLocation.RenameTo(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Attempt to rename this location. Mainly for file locations.
            </summary>
            <param name="toLocation">The new name.</param>
        </member>
        <member name="F:Encog.Persist.Location.StreamPersistence.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Persist.Location.StreamPersistence.stream">
            <summary>
            The stream to persist to/from.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.StreamPersistence.#ctor(System.IO.Stream)">
            <summary>
            Construct a persistance location based on a stream.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:Encog.Persist.Location.StreamPersistence.CreateStream(System.IO.FileMode)">
            <summary>
            The stream to use.
            </summary>
            <returns>A new InputStream for this file.</returns>
        </member>
        <member name="M:Encog.Persist.Location.StreamPersistence.Delete">
            <summary>
            Attempt to delete the file.  Will fail for this location type.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.StreamPersistence.Exists">
            <summary>
            Does the file exist?  This is always true for this location type.
            </summary>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:Encog.Persist.Location.StreamPersistence.RenameTo(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Rename this file to a different location.
            </summary>
            <param name="toLocation">What to rename to.</param>
        </member>
        <member name="T:Encog.Parse.Tags.Write.WriteXML">
            <summary>
            Contains specifics to writing XML.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.Write.WriteTags">
            <summary>
            Class used to write out tags, such as XML or HTML.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Write.WriteTags.output">
            <summary>
            The output stream to write to.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Write.WriteTags.tagStack">
            <summary>
            Stack to keep track of beginning and ending tags.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Write.WriteTags.attributes">
            <summary>
            The attributes for the current tag.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Write.WriteTags.encoder">
            <summary>
            Used to encode strings to bytes.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Write.WriteTags.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.#ctor(System.IO.Stream)">
            <summary>
            Construct an object to write tags.
            </summary>
            <param name="output">THe output stream.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddAttribute(System.String,System.String)">
            <summary>
            Add an attribute to be written with the next tag.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddCDATA(System.String)">
            <summary>
            Add CDATA to the output stream. XML allows a large block of unformatted
            text to be added as a CDATA tag.
            </summary>
            <param name="text">The text to add.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddProperty(System.String,System.Double)">
            <summary>
            Add a property as a double. A property is a value enclosed in two tags.
            </summary>
            <param name="name">The name of the enclosing tags.</param>
            <param name="d">The value to store.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddProperty(System.String,System.Int32)">
            <summary>
            Add a property as an integer. A property is a value enclosed in two tags.
            </summary>
            <param name="name">The name of the enclosing tags.</param>
            <param name="i">The value to store.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddProperty(System.String,System.String)">
            <summary>
            Add a property as a string. A property is a value enclosed in two tags.
            </summary>
            <param name="name">The name of the enclosing tags.</param>
            <param name="str">The value to store.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.AddText(System.String)">
            <summary>
            Add text.
            </summary>
            <param name="text">The text to add.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.BeginDocument">
            <summary>
            Called to begin the document.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.BeginTag(System.String)">
            <summary>
            Begin a tag with the specified name.
            </summary>
            <param name="name">The tag to begin.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.Close">
            <summary>
            Close this object.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.EndDocument">
            <summary>
            End the document.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.EndTag">
            <summary>
            End the current tag.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteTags.EndTag(System.String)">
            <summary>
            End a tag, require that we are ending the specified tag.
            </summary>
            <param name="name">The tag to be ending.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Write.WriteXML.#ctor(System.IO.Stream)">
            <summary>
            Construct an object to write an XML file.
            </summary>
            <param name="os">The output stream.</param>
        </member>
        <member name="T:Encog.Normalize.Target.NormalizationStorageNeuralDataSet">
            <summary>
            Store the normalized data to a neural data set.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.inputCount">
            <summary>
            The input count.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.idealCount">
            <summary>
            The ideal count.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.dataset">
            <summary>
            The data set to add to.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new NeuralDataSet based on the parameters specified.
            </summary>
            <param name="inputCount">The input count.</param>
            <param name="idealCount">The output count.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.#ctor(Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Construct a normalized neural storage class to hold data.
            </summary>
            <param name="dataset">The data set to store to. This uses an existing data set.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.Close">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.Open">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageNeuralDataSet.Write(System.Double[],System.Int32)">
            <summary>
            Write an array.
            </summary>
            <param name="data">The data to write.</param>
            <param name="inputCount">How much of the data is input.</param>
        </member>
        <member name="T:Encog.Normalize.Output.ZAxis.ZAxisGroup">
            <summary>
            Used to group Z-Axis fields together. Both OutputFieldZAxis and
            OutputFieldZAxisSynthetic fields may belong to this group. For
            more information see the OutputFieldZAxis class.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.BasicOutputFieldGroup">
            <summary>
            Provides very basic functionality that other output field groups
            will use.  Mainly provides the list of fields that are grouped.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.IOutputFieldGroup">
            <summary>
            Output fields can be grouped together if they are calculated together.
            This interface defines how a field group works.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.IOutputFieldGroup.AddField(Encog.Normalize.Output.OutputFieldGrouped)">
            <summary>
            Add an output field to the group.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:Encog.Normalize.Output.IOutputFieldGroup.RowInit">
            <summary>
            Init the group for a new row.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.IOutputFieldGroup.GroupedFields">
            <summary>
            All of the output fields in this group.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.BasicOutputFieldGroup.fields">
            <summary>
            The fields in this group.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.BasicOutputFieldGroup.AddField(Encog.Normalize.Output.OutputFieldGrouped)">
            <summary>
            Add a field to this group.
            </summary>
            <param name="field">The field to add to the group.</param>
        </member>
        <member name="M:Encog.Normalize.Output.BasicOutputFieldGroup.RowInit">
            <summary>
            Init for a new row.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.BasicOutputFieldGroup.GroupedFields">
            <summary>
            The list of grouped fields.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.ZAxis.ZAxisGroup.length">
            <summary>
            The calculated length.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.ZAxis.ZAxisGroup.multiplier">
            <summary>
            The multiplier, which is the value that all other values will be
            multiplied to become normalized.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.ZAxisGroup.RowInit">
            <summary>
            Initialize this group for a new row.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.ZAxis.ZAxisGroup.Length">
            <summary>
            The vector length.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.ZAxis.ZAxisGroup.Multiplier">
            <summary>
            The value to multiply the other values by to normalize them.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.InputFieldArray1D">
            <summary>
            An input field that comes from a 1D array.
            
            Note: this input field will not be persisted to an EG file.
            This is because it could point to a lengthy array, that really
            has no meaning inside of an EG file. 
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.BasicInputField">
            <summary>
            Provides basic functionality, such as min/max and current value
            for other input fields.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.IInputField">
            <summary>
             * A Normalization input field.  This field defines data that needs to be 
            normalized.  There are many different types of normalization field that can
            be used for many different purposes.
            
            To assist in normalization each input file tracks the min and max values for
            that field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.IInputField.ApplyMinMax(System.Double)">
            <summary>
            Update the min and max values for this field with the specified values.
            </summary>
            <param name="d">The current value to use to update min and max.</param>
        </member>
        <member name="M:Encog.Normalize.Input.IInputField.GetValue(System.Int32)">
            <summary>
            Called for input field types that require an index to get the current
            value. This is used by the InputFieldArray1D and InputFieldArray2D
            classes.
            </summary>
            <param name="i">The index to read.</param>
            <returns>The value read.</returns>
        </member>
        <member name="P:Encog.Normalize.Input.IInputField.CurrentValue">
            <summary>
            The current value of the input field.  This is only valid, 
            while the normalization is being performed.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.IInputField.Max">
            <summary>
            The maximum value for all of the input data, this is calculated
            during the first pass of normalization.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.IInputField.Min">
            <summary>
            The minimum value for all of the input data, this is calculated
            during the first pass of normalization.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.IInputField.UsedForNetworkInput">
            <summary>
            True, if this field is used for network input.  This is needed
            so that the buildForNetworkInput method of the normalization class knows
            how many input fields to expect.  For instance, fields used only to 
            segregate data are not used for the actual network input and may
            not be provided when the network is actually being queried.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.BasicInputField.min">
            <summary>
            The maximum value encountered so far for this field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.BasicInputField.max">
            <summary>
            The minimum value encountered so far for this field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.BasicInputField.currentValue">
            <summary>
            The current value for this field, only used while normalizing.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.BasicInputField.usedForNetworkInput">
            <summary>
            True if this field is used to actually generate the input for
            the neural network.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.BasicInputField.ApplyMinMax(System.Double)">
            <summary>
            Given the current value, apply to the min and max values.
            </summary>
            <param name="d">The current value.</param>
        </member>
        <member name="M:Encog.Normalize.Input.BasicInputField.GetValue(System.Int32)">
            <summary>
            Not supported for this sort of class, may be implemented in subclasses.
            Will throw an exception.
            </summary>
            <param name="i">The index.  Not used.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:Encog.Normalize.Input.BasicInputField.CurrentValue">
            <summary>
            The current value of the input field.  This is only valid, 
            while the normalization is being performed.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.BasicInputField.Max">
            <summary>
            The maximum value for all of the input data, this is calculated
            during the first pass of normalization.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.BasicInputField.Min">
            <summary>
            The minimum value for all of the input data, this is calculated
            during the first pass of normalization.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.BasicInputField.UsedForNetworkInput">
            <summary>
            True, if this field is used for network input.  
            This is needed so that the buildForNetworkInput method of the 
            normalization class knows how many input fields to expect.  For instance, 
            fields used only to segregate data are not used for the actual network 
            input and may not be provided when the network is actually being queried.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.IHasFixedLength">
            <summary>
            Is this input field of a fixed length, such as an array?  Or is it
            read "iterator style" where we call "next" until there is no more 
            data.  If the length can be "known" ahead of time, then the input 
            field should support this interface.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.IHasFixedLength.Length">
            <summary>
            The number of records in this input field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldArray1D.array">
            <summary>
            A reference to the array.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldArray1D.#ctor(System.Boolean,System.Double[])">
            <summary>
            Construct the 1D array field.
            </summary>
            <param name="usedForNetworkInput">True if this field is used for the actual
            input to the neural network.  See getUsedForNetworkInput for more info.</param>
            <param name="array">The array to use.</param>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldArray1D.GetValue(System.Int32)">
            <summary>
            Get the value from the specified index.
            </summary>
            <param name="i">The index to retrieve.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldArray1D.Length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.SmartMomentum">
            <summary>
            Attempt to automatically set a momentum in a training algorithm that supports
            momentum.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.IStrategy">
            <summary>
            Training strategies can be added to training algorithms.  Training 
            strategies allow different additional logic to be added to an existing
            training algorithm.  There are a number of different training strategies
            that can perform various tasks, such as adjusting the learning rate or 
            momentum, or terminating training when improvement diminishes.  Other 
            strategies are provided as well.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.IStrategy.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.IStrategy.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.IStrategy.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.MIN_IMPROVEMENT">
            <summary>
            The minimum improvement to adjust momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.MAX_MOMENTUM">
            <summary>
            The maximum value that momentum can go to.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.START_MOMENTUM">
            <summary>
            The starting momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.MOMENTUM_INCREASE">
            <summary>
            How much to increase momentum by.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.MOMENTUM_CYCLES">
            <summary>
            How many cycles to accept before adjusting momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.train">
            <summary>
            The training algorithm that is using this strategy.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.setter">
            <summary>
            The setter used to change momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.lastImprovement">
            <summary>
            The last improvement in error rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.lastError">
            <summary>
            The error rate from the previous iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.ready">
            <summary>
            Has one iteration passed, and we are now ready to start evaluation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.lastMomentum">
            <summary>
            The last momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.currentMomentum">
            <summary>
            The current momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartMomentum.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartMomentum.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartMomentum.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartMomentum.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.ResetStrategy">
            <summary>
            The reset strategy will reset the weights if the neural network fails to fall
            below a specified error by a specified number of cycles. This can be useful
            to throw out initially "bad/hard" random initializations of the weight
            matrix.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.ResetStrategy.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.ResetStrategy.required">
            <summary>
            The required minimum error.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.ResetStrategy.cycles">
            <summary>
            The number of cycles to reach the required minimum error.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.ResetStrategy.train">
            <summary>
            The training algorithm that is using this strategy.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.ResetStrategy.badCycleCount">
            <summary>
            How many bad cycles have there been so far.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.ResetStrategy.#ctor(System.Double,System.Int32)">
            <summary>
            Construct a reset strategy.  The error rate must fall
            below the required rate in the specified number of cycles,
            or the neural network will be reset to random weights and
            thresholds.
            </summary>
            <param name="required">The required error rate.</param>
            <param name="cycles">The number of cycles to reach that rate.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.ResetStrategy.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.ResetStrategy.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.ResetStrategy.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralChromosome">
            <summary>
            Implements a chromosome that allows a
            feedforward neural network to be trained using a genetic algorithm. The
            network is trained using training sets.
            
            The chromosome for a feed forward neural network is the weight and threshold
            matrix.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Genetic.NeuralChromosome">
            <summary>
            Implements a chromosome that allows a feedforward neural
            network to be trained using a genetic algorithm. The chromosome for a feed
            forward neural network is the weight and threshold matrix.
            
            This class is abstract. If you wish to train the neural network using
            training sets, you should use the TrainingSetNeuralChromosome class. If you
            wish to use a cost function to train the neural network, then implement a
            subclass of this one that properly calculates the cost.
            
            The generic type GA_TYPE specifies the GeneticAlgorithm derived class that
            implements the genetic algorithm that this class is to be used with.
            </summary>
        </member>
        <member name="T:Encog.Solve.Genetic.Chromosome`1">
            <summary>
            Implements a chromosome to genetic algorithm. This is an abstract class.
            Other classes are provided in this book that use this base class to train
            neural networks or provide an answer to the traveling salesman problem.
            
            Lifeforms in this genetic algorithm consist of one single chromosome each.
            Therefore, this class represents a virtual lifeform. The chromosome is a
            string of objects that represent one solution. For a neural network, this
            string of objects usually represents the weight and threshold matrix.
            
            Chromosomes are made up of genes. These are of the generic type GENE_TYPE.
            For a neural network this type would most likely be double values.
            </summary>
            <typeparam name="GENE_TYPE">The datatype usef for genes.</typeparam>
        </member>
        <member name="F:Encog.Solve.Genetic.Chromosome`1.cost">
            <summary>
            The cost for this chromosome. The lower the better.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.Chromosome`1.genes">
            <summary>
            The individual elements of this chromosome.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.Chromosome`1.geneticAlgorithm">
            <summary>
            The genetic algorithm that this chromosome is associated with.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.CalculateCost">
            <summary>
            Called to calculate the cost for this chromosome.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.CompareTo(Encog.Solve.Genetic.Chromosome{`0})">
            <summary>
            Used to compare two chromosomes. Used to sort by cost.
            </summary>
            <param name="other">The other chromosome to compare.</param>
            <returns>The value 0 if the argument is a chromosome that has an equal
            cost to this chromosome; a value less than 0 if the argument is a
            chromosome with a cost greater than this chromosome; and a value
            greater than 0 if the argument is a chromosome what a cost less
            than this chromosome.</returns>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.GetNotTaken(Encog.Solve.Genetic.Chromosome{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Get a list of the genes that have not been taken before. This is useful
            if you do not wish the same gene to appear more than once in a
            chromosome.
            </summary>
            <param name="source">The pool of genes to select from.</param>
            <param name="taken">An array of the taken genes.</param>
            <returns>Those genes in source that are not taken.</returns>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.Mate(Encog.Solve.Genetic.Chromosome{`0},Encog.Solve.Genetic.Chromosome{`0},Encog.Solve.Genetic.Chromosome{`0})">
            <summary>
            Assuming this chromosome is the "mother" mate with the passed in
            "father".
            </summary>
            <param name="father">The father.</param>
            <param name="offspring1">Returns the first offspring</param>
            <param name="offspring2">Returns the second offspring.</param>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.Mutate">
            <summary>
            Called to mutate this chromosome.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.SetGenesDirect(`0[])">
            <summary>
            Set the genes directly, not allowed to be overridden.
            </summary>
            <param name="genes">The genes to set.</param>
        </member>
        <member name="M:Encog.Solve.Genetic.Chromosome`1.ToString">
            <summary>
            Convert the chromosome to a string.
            </summary>
            <returns>The chromosome as a string.</returns>
        </member>
        <member name="P:Encog.Solve.Genetic.Chromosome`1.Cost">
            <summary>
            The cost.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.Chromosome`1.Genes">
            <summary>
            Used the get the entire gene array.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.Chromosome`1.GeneticAlgorithm">
            <summary>
            The genetic algorithm class to be used.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.Chromosome`1.Size">
            <summary>
            The size of the gene array.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.DISTORT_FACTOR">
            <summary>
            The amount of distortion to perform a mutation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.mutateUtil">
            <summary>
            Mutation range.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.network">
            <summary>
            The network to train.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.InitGenes(System.Int32)">
            <summary>
            Init the genes array.
            </summary>
            <param name="length">The length to create.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.Mutate">
            <summary>
            Mutate this chromosome randomly.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.UpdateGenes">
            <summary>
            Copy the network to the genes.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.UpdateNetwork">
            <summary>
            Copy the genes to the network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.Network">
            <summary>
            The network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralChromosome.Genes">
            <summary>
            Genes for this chromosome.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralChromosome.#ctor(Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralGeneticAlgorithm,Encog.Neural.Networks.BasicNetwork)">
            <summary>
            The constructor, takes a list of cities to set the initial "genes" to.
            </summary>
            <param name="genetic">The genetic algorithm used with this chromosome.</param>
            <param name="network">The neural network to train.</param>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralChromosome.genetic">
            <summary>
            The genetic algorithm being used.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralChromosome.CalculateCost">
            <summary>
            Calculate the cost for this chromosome.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralChromosome.Genes">
            <summary>
            Get all genes.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.OneToOneSynapse">
            <summary>
            A one-to-one synapse requires that the from and to layers have exactly the
            same number of neurons. A one-to-one synapse can be useful, when used in
            conjunction with a ContextLayer.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.BasicSynapse">
            <summary>
            An abstract class that implements basic functionality that may be needed by
            the other synapse classes. Specifically this class handles processing the
            from and to layer, as well as providing a name and description for the
            EncogPersistedObject.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.ISynapse">
            <summary>
            A synapse is the connection between two layers of a neural network. The
            various synapse types define how layers will interact with each other. Some
            synapses contain a weight matrix, which cause them to be teachable. Others
            simply feed the data between layers in various ways, and are not teachable.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.ISynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output from this synapse.
            </summary>
            <param name="input">The input to this synapse.</param>
            <returns>The output from this synapse.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.FromLayer">
            <summary>
            The from layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.FromNeuronCount">
            <summary>
            The neuron count from the "from layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.WeightMatrix">
            <summary>
            Get the weight matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.MatrixSize">
            <summary>
            Get the size of the matrix, or zero if one is not defined.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.ToLayer">
            <summary>
            The "to layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.ToNeuronCount">
            <summary>
            The neuron count from the "to layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.SynapseType">
            <summary>
            The type of synapse that this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.IsSelfConnected">
            <summary>
            True if this is a self-connected synapse.  That is,
            the from and to layers are the same.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.ISynapse.IsTeachable">
            <summary>
            True if the weights for this synapse can be modified.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.BasicSynapse.fromLayer">
            <summary>
            The from layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.BasicSynapse.toLayer">
            <summary>
            The to layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.BasicSynapse.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.BasicSynapse.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.BasicSynapse.CreatePersistor">
            <summary>
            Create a persistor that will be used to persist this synapse.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.BasicSynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output from this synapse.
            </summary>
            <param name="input">The input to this synapse.</param>
            <returns>The output from this synapse.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.BasicSynapse.ToString">
            <summary>
            Convert this layer to a string.
            </summary>
            <returns>The layer as a string.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.Description">
            <summary>
            The EncogPersistedObject requires a name and description, however, these
            are not used on synapses.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.FromLayer">
            <summary>
            The from layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.FromNeuronCount">
            <summary>
            The neuron count from the "from layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.Name">
            <summary>
            The EncogPersistedObject requires a name and description, however, these
            are not used on synapses.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.ToLayer">
            <summary>
            The "to layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.ToNeuronCount">
            <summary>
            The neuron count from the "to layer".
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.IsSelfConnected">
            <summary>
            True if this is a self-connected synapse. That is, the from and
            to layers are the same.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.SynapseType">
            <summary>
            What type of synapse is this?
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.MatrixSize">
            <summary>
            Get the size of the matrix, or zero if one is not defined.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.WeightMatrix">
            <summary>
            Get the weight matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.BasicSynapse.IsTeachable">
            <summary>
            True if the weights for this synapse can be modified.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.OneToOneSynapse.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.OneToOneSynapse.#ctor">
            <summary>
            Simple default constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.OneToOneSynapse.#ctor(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Construct a one-to-one synapse between the two layers.
            </summary>
            <param name="fromLayer">The starting layer.</param>
            <param name="toLayer">The ending layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.OneToOneSynapse.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.OneToOneSynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output from this synapse.
            </summary>
            <param name="input">The input to this synapse.</param>
            <returns>The output is the same as the input.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.OneToOneSynapse.CreatePersistor">
            <summary>
            null, this synapse type has no matrix.
            </summary>
            <returns>A persistor for this object.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.OneToOneSynapse.WeightMatrix">
            <summary>
            null, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.OneToOneSynapse.MatrixSize">
            <summary>
            0, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.OneToOneSynapse.SynapseType">
            <summary>
            The type of synapse that this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.OneToOneSynapse.IsTeachable">
            <summary>
            False, because this type of synapse is not teachable.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Prune.PruneIncremental">
            This class is used to help determine the optimal configuration for the hidden
            layers of a neural network. It can accept a pattern, which specifies the type
            of neural network to create, and a list of the maximum and minimum hidden
            layer neurons. It will then attempt to train the neural network at all
            configurations and see which hidden neuron counts work the best.
            
            @author jheaton
            
        </member>
        <member name="T:Encog.Util.Concurrency.Job.ConcurrentJob">
            <summary>
            A concurrent JOB, works well for multicore machines.  Provides
            the low-level tools to create a concurrent job.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.ConcurrentJob.report">
            <summary>
            Where to report progress to.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.ConcurrentJob.totalTasks">
            <summary>
            Total number of tasks.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.RequestNextTask">
            <summary>
            Called by a thread to get the next task.
            </summary>
            <returns>Config info for the next task.</returns>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.LoadWorkload">
            <summary>
            Load the workload that this job must process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.PerformJobUnit(Encog.Util.Concurrency.Job.JobUnitContext)">
            <summary>
            Perform the actual workload.
            </summary>
            <param name="context">The workload to execute.</param>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.#ctor(Encog.IStatusReportable)">
            <summary>
            
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.Process">
            <summary>
            Start the job, block until its done.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.ConcurrentJob.ReportStatus(Encog.Util.Concurrency.Job.JobUnitContext,System.String)">
            <summary>
            Recieve status reports.
            </summary>
            <param name="context">The context for this job.</param>
            <param name="status">The current status for this job.</param>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.NetworkToString(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Format the network as a human readable string that lists the 
            hidden layers.
            </summary>
            <param name="network">The network to format.</param>
            <returns>A human readable string.</returns>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.training">
            The training set to use as different neural networks are evaluated.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.pattern">
            The pattern for which type of neural network we would like to create.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.hidden">
            The ranges for the hidden layers.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.iterations">
            The number if training iterations that should be tried for
            each network.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.bestResult">
            The best error rate found so far.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.bestNetwork">
            The best network found so far.
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.currentTry">
            How many networks have been tried so far?
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneIncremental.hiddenCounts">
            Keeps track of how many neurons in each hidden layer as training the
            evaluation progresses.
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.#ctor(Encog.Neural.NeuralData.INeuralDataSet,Encog.Neural.Networks.Pattern.INeuralNetworkPattern,System.Int32,Encog.IStatusReportable)">
            Construct an object to determine the optimal number of hidden layers and
            neurons for the specified training data and pattern.
            
            @param training
                       The training data to use.
            @param pattern
                       The network pattern to use to solve this data.
            @param iterations
            			  How many iterations to try per network.
            @param report
            			  Object used to report status to.
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.AddHiddenLayer(System.Int32,System.Int32)">
            Add a hidden layer's min and max. Call this once per hidden layer.
            Specify a zero min if it is possible to remove this hidden layer.
            
            @param min
                       The minimum number of neurons for this layer.
            @param max
                       The maximum number of neurons for this layer.
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.GenerateNetwork">
            Generate a network according to the current hidden layer counts.
            @return The network based on current hidden layer counts.
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.IncreaseHiddenCounts">
            Increase the hidden layer counts according to the hidden layer 
            parameters.  Increase the first hidden layer count by one, if
            it is maxed out, then set it to zero and increase the next 
            hidden layer.
            @return False if no more increases can be done, true otherwise.
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.Process">
            <summary>
            Begin process and find a good network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.LoadWorkload">
            <summary>
            Load all workloads, calculate how many networks we will examine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.PerformJobUnit(Encog.Util.Concurrency.Job.JobUnitContext)">
            <summary>
            Evaluate one network.
            </summary>
            <param name="context">The job context.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneIncremental.RequestNextTask">
            <summary>
            Request the next task, the next network to try.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Neural.Networks.Prune.PruneIncremental.Hidden">
            @return The hidden layer max and min.
        </member>
        <member name="P:Encog.Neural.Networks.Prune.PruneIncremental.Iterations">
            @return The number of training iterations to try for each network.
        </member>
        <member name="P:Encog.Neural.Networks.Prune.PruneIncremental.Pattern">
            @return The network pattern to use.
        </member>
        <member name="P:Encog.Neural.Networks.Prune.PruneIncremental.Training">
            @return The training set to use.
        </member>
        <member name="P:Encog.Neural.Networks.Prune.PruneIncremental.BestNetwork">
            <summary>
            The best network found.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.ElmanPattern">
            <summary>
            This class is used to generate an Elman style recurrent neural network. This
            network type consists of three regular layers, an input output and hidden
            layer. There is also a context layer which accepts output from the hidden
            layer and outputs back to the hidden layer. This makes it a recurrent neural
            network.
            
            The Elman neural network is useful for temporal input data. The specified
            activation function will be used on all layers.  The Elman neural 
            network is similar to the Jordan neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ElmanPattern.inputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ElmanPattern.outputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ElmanPattern.hiddenNeurons">
            <summary>
            The number of hidden neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ElmanPattern.activation">
            <summary>
            The activation function.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ElmanPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ElmanPattern.#ctor">
            <summary>
            Create an object to generate Elman neural networks.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ElmanPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer with the specified number of neurons.
            </summary>
            <param name="count">The number of neurons in this hidden layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ElmanPattern.Generate">
            <summary>
            Generate the Elman neural network.
            </summary>
            <returns>An Elman neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ElmanPattern.Clear">
            <summary>
            Clear out any hidden neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ElmanPattern.ActivationFunction">
            <summary>
            Set the activation function to use on each of the layers.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ElmanPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ElmanPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.BAMPattern">
            <summary>
            Construct a Bidirectional Access Memory (BAM) neural network.  This
            neural network type learns to associate one pattern with another.  The
            two patterns do not need to be of the same length.  This network has two 
            that are connected to each other.  Though they are labeled as input and
            output layers to Encog, they are both equal, and should simply be thought
            of as the two layers that make up the net.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BAMPattern.TAG_F1">
            <summary>
            The F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BAMPattern.TAG_F2">
            <summary>
            The F2 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BAMPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BAMPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Unused, a BAM has no hidden layers.
            </summary>
            <param name="count">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BAMPattern.Clear">
            <summary>
            Clear any settings on the pattern.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BAMPattern.Generate">
            <summary>
            The generated network.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BAMPattern.F1Neurons">
            <summary>
            The number of neurons in the first layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BAMPattern.F2Neurons">
            <summary>
            The number of neurons in the second layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BAMPattern.ActivationFunction">
            <summary>
            Not used, the BAM uses a bipoloar activation function.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BAMPattern.InputNeurons">
            <summary>
            The number of input neurons.  This will fail, a BAM has no input neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BAMPattern.OutputNeurons">
            <summary>
            The number of output neurons.  This will fail, a BAM has no output neurons.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Extract.IExtractListener">
            <summary>
            The ExtractListener interface defines a class that can receive extraction
            events as an extraction process occurs.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.IExtractListener.FoundData(System.Object)">
            <summary>
            Notify that some data has been extracted.
            </summary>
            <param name="obj">The data that was extracted.</param>
        </member>
        <member name="T:Encog.Util.StringUtil">
            <summary>
            Simple class for string utilities.
            </summary>
        </member>
        <member name="M:Encog.Util.StringUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compare two strings, ignore case.
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The second string.</param>
            <returns></returns>
        </member>
        <member name="M:Encog.Util.StringUtil.FromBytes(System.Byte[])">
            <summary>
            Simple utility to take an array of ASCII bytes and convert to
            a String.  Works with Silverlight as well.
            </summary>
            <param name="b">The byte array.</param>
            <returns>The string created from the byte array.</returns>
        </member>
        <member name="T:Encog.Util.Randomize.ConstRandomizer">
            <summary>
            A randomizer that will create always set the random number to a const
            value, used mainly for testing.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.ConstRandomizer.value">
            <summary>
            The constant value.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.ConstRandomizer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.ConstRandomizer.#ctor(System.Double)">
            <summary>
            Construct a range randomizer.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Encog.Util.Randomize.ConstRandomizer.Randomize(System.Double)">
            <summary>
            Generate a random number based on the range specified in the constructor.
            </summary>
            <param name="d">The range randomizer ignores this value.</param>
            <returns>The random number.</returns>
        </member>
        <member name="T:Encog.Util.DirectoryUtil">
            <summary>
            Directory utilities.
            </summary>
        </member>
        <member name="F:Encog.Util.DirectoryUtil.BUFFER_SIZE">
            <summary>
            Default buffer size for read/write operations.
            </summary>
        </member>
        <member name="F:Encog.Util.DirectoryUtil.LOGGER">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.DirectoryUtil.CopyFile(System.String,System.String)">
            <summary>
            Copy the specified file.
            </summary>
            <param name="source">The file to copy.</param>
            <param name="target">The target of the copy.</param>
        </member>
        <member name="M:Encog.Util.DirectoryUtil.DeleteDirectory(System.String)">
            <summary>
            Delete a directory and all children.
            </summary>
            <param name="path">The path to delete.</param>
        </member>
        <member name="M:Encog.Util.DirectoryUtil.ReadStream(System.IO.Stream)">
            <summary>
            Read the entire contents of a stream into a string.
            </summary>
            <param name="istream">The input stream to read from.</param>
            <returns>The string that was read in.</returns>
        </member>
        <member name="M:Encog.Util.DirectoryUtil.ReadTextFile(System.String)">
            <summary>
            Read the entire contents of a stream into a string.
            </summary>
            <param name="filename">The input stream to read from.</param>
            <returns>The string that was read in.</returns>
        </member>
        <member name="M:Encog.Util.DirectoryUtil.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="T:Encog.Util.CSV.NumberList">
            <summary>
            Utility class to take numbers to/from a list.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.NumberList.FromList(Encog.Util.CSV.CSVFormat,System.String)">
            <summary>
            Get an array of double's from a string of comma separated text.
            </summary>
            <param name="format">The way to format this list.</param>
            <param name="str">The string that contains a list of numbers.</param>
            <returns>An array of doubles parsed from the string.</returns>
        </member>
        <member name="M:Encog.Util.CSV.NumberList.ToList(Encog.Util.CSV.CSVFormat,System.Text.StringBuilder,System.Double[])">
            <summary>
            Convert an array of doubles to a comma separated list.
            </summary>
            <param name="format">The way to format this list.</param>
            <param name="result">This string will have the values appended to it.</param>
            <param name="data">The array of doubles to use.</param>
        </member>
        <member name="T:Encog.Util.Concurrency.Job.JobUnitWorker">
            <summary>
            A worker job for Encog concurrency
            </summary>
        </member>
        <member name="T:Encog.Util.Concurrency.IEncogTask">
            <summary>
            A task for Encog concurrency.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.IEncogTask.Run">
            <summary>
            Run the specified task.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.JobUnitWorker.context">
            <summary>
            The context for this job unit.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.JobUnitWorker.#ctor(Encog.Util.Concurrency.Job.JobUnitContext)">
            <summary>
            Construct a job unit worker to execute the specified job.
            </summary>
            <param name="context">The context of the job to execute.</param>
        </member>
        <member name="M:Encog.Util.Concurrency.Job.JobUnitWorker.Run">
            <summary>
            Run this job.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.ObjectTagger">
            <summary>
            The object tagger is used in generic persistence to tag objects with a
            reference number.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.ObjectTagger.map">
            <summary>
            The map of object to reference number.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.ObjectTagger.currentID">
            <summary>
            The current reference ID.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.ObjectTagger.depth">
            <summary>
            The current depth.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.Analyze(Encog.Persist.IEncogPersistedObject)">
            <summary>
            Analyze the specified object and build a reference map.
            </summary>
            <param name="encogObject">The object to analyze.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.AssignObjectTag(System.Object)">
            <summary>
            Assign a reference number to the specified object.
            </summary>
            <param name="obj">The object to "tag".</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.Clear">
            <summary>
            Clear the map and current id.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.GetReference(System.Object)">
            <summary>
            Get the reference for the specified object.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>-1 for no reference, otherwise the reference numebr.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.HasReference(System.Object)">
            <summary>
            Returns true if the object has a reference.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>True if the object has a reference.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.TagCollection(System.Collections.ICollection)">
            <summary>
            Tag a collection, every object in the collection will be a reference.
            </summary>
            <param name="value">The collection to tag.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.TagField(System.Object)">
            <summary>
            Tag a field.
            </summary>
            <param name="fieldObject">The field to tag.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectTagger.TagObject(System.Object)">
            <summary>
            Tag an object.
            </summary>
            <param name="parentObject">The object to tag.</param>
        </member>
        <member name="T:Encog.Normalize.Output.OutputFieldDirect">
            <summary>
            A direct output field, will simply pass the input value to the output.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldDirect.sourceField">
            <summary>
            The source field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldDirect.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldDirect.#ctor(Encog.Normalize.Input.IInputField)">
            <summary>
            Construct a direct output field.
            </summary>
            <param name="sourceField">The source field to pass directly on.</param>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldDirect.Calculate(System.Int32)">
            <summary>
            Calculate the value for this field. This will simply be the
            value from the input field. 
            </summary>
            <param name="subfield">Not used, as this output field type does not
            support subfields.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldDirect.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldDirect.SubfieldCount">
            <summary>
            Always returns 1, as subfields are not used.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.InputFieldArray2D">
            <summary>
             * An input field that comes from a 2D array. The first dimension
            of the array will be used to read each successive row.  The second
            dimension is fixed, and specified in the constructor.  You would create
            multiple InputFieldArray2D object to read each of the "columns" stored
            at each row.
            
            Note: this input field will not be persisted to an EG file.
            This is because it could point to a lengthy array, that really
            has no meaning inside of an EG file.  
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldArray2D.array">
            <summary>
            The 2D array to use.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldArray2D.index2">
            <summary>
            The 2nd dimension index to read the field from.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldArray2D.#ctor(System.Boolean,System.Double[][],System.Int32)">
            <summary>
            Construct a 2D array input.
            </summary>
            <param name="usedForNetworkInput">Construct a 2D array input field.</param>
            <param name="array">The array to use.</param>
            <param name="index2">index2 The secondary index to read the field from.</param>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldArray2D.GetValue(System.Int32)">
            <summary>
            Gen index.
            </summary>
            <param name="i">Read a value from the specified index.</param>
            <returns>The value read.</returns>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldArray2D.Length">
            <summary>
            The number of rows in the array.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.Greedy">
            <summary>
            A simple greedy strategy. If the last iteration did not improve training,
            then discard it. Care must be taken with this strategy, as sometimes a
            training algorithm may need to temporarily decrease the error level before
            improving it.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.Greedy.train">
            <summary>
            The training algorithm that is using this strategy.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.Greedy.lastError">
            <summary>
            The error rate from the previous iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.Greedy.lastNetwork">
            <summary>
            The last state of the network, so that we can restore to this
            state if needed.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.Greedy.ready">
            <summary>
            Has one iteration passed, and we are now ready to start 
            evaluation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.Greedy.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.Greedy.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.Greedy.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.Greedy.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodGaussian">
            <summary>
            A neighborhood function based on the Gaussian function.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.Neighborhood.INeighborhoodFunction">
            <summary>
            Defines how a neighborhood function should work in competitive training.
            This is most often used in the training process for a self-organizing map.
            This function determines to what degree the training should take place on
            a neuron, based on its proximity to the "winning" neuron.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.INeighborhoodFunction.Function(System.Int32,System.Int32)">
            <summary>
            Determine how much the current neuron should be affected by 
            training based on its proximity to the winning neuron.
            </summary>
            <param name="currentNeuron">THe current neuron being evaluated.</param>
            <param name="bestNeuron">The winning neuron.</param>
            <returns>The ratio for this neuron's adjustment.</returns>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodGaussian.radial">
            <summary>
            The radial basis function (RBF) to use to calculate the training falloff
            from the best neuron.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodGaussian.#ctor(Encog.Util.MathUtil.RBF.IRadialBasisFunction)">
            <summary>
            Construct the neighborhood function with the specified radial function.
            Generally this will be a Gaussian function but any RBF should do.
            </summary>
            <param name="radial">The radial basis function to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodGaussian.Function(System.Int32,System.Int32)">
            <summary>
            Determine how much the current neuron should be affected by training
            based on its proximity to the winning neuron.
            </summary>
            <param name="currentNeuron">The current neuron being evaluated.</param>
            <param name="bestNeuron">The winning neuron.</param>
            <returns>The ratio for this neuron's adjustment.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodBubble">
            <summary>
            A neighborhood function that uses a simple bubble. A width is defined, and
            any neuron that is plus or minus that width from the winning neuron will be
            updated as a result of training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodBubble.width">
            <summary>
            The width of the bubble.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodBubble.#ctor(System.Int32)">
            <summary>
            Create a bubble neighborhood function that will return 1.0 (full update)
            for any neuron that is plus or minus the width distance from the winning
            neuron.
            </summary>
            <param name="width">The width of the bubble, this is the distance that the neuron
            can be from the winning neuron. The true width, across the
            bubble, is actually two times this parameter.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodBubble.Function(System.Int32,System.Int32)">
            <summary>
            Determine how much the current neuron should be affected by training
            based on its proximity to the winning neuron.
            </summary>
            <param name="currentNeuron">THe current neuron being evaluated.</param>
            <param name="bestNeuron">The winning neuron.</param>
            <returns>The ratio for this neuron's adjustment.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodBubble.Width">
            <summary>
            The width of the bubble.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Layers.ILayer">
            <summary>
            This interface defines all necessary methods for a neural network layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.AddNext(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Add a layer to this layer.  The "next" layer being added will
            receive input from this layer.  You can also add a layer to
            itself, this will create a self-connected layer.  This method
            will create a weighted synapse connection between this layer
            and the next.
            </summary>
            <param name="next">The layer that is to be added.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.AddNext(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Synapse.SynapseType)">
            <summary>
            Add a layer to this layer.  The "next" layer being added will
            receive input from this layer.  You can also add a layer to
            itself, this will create a self-connected layer.
            </summary>
            <param name="next">The layer that is to be added.</param>
            <param name="type">The type of synapse to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.AddSynapse(Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            This method adds a synapse to the neural network.  Usually
            you will want to use the addNext method rather than directly
            adding synapses.
            </summary>
            <param name="synapse">The synapse to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output for this layer.
            </summary>
            <param name="pattern">The input pattern.</param>
            <returns>The output from this layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.IsConnectedTo(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Determine if this layer is connected to another.
            </summary>
            <param name="layer">The second layer, checked to see if it is connected
            to this layer.</param>
            <returns>True if the two layers are connected.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.Process(Encog.Neural.Data.INeuralData)">
            <summary>
            Process the data before it is modified by this layer. This 
            method is useful for the context layer to remember the pattern
            it was presented with.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ILayer.Recur">
            <summary>
            Called on recurrent layers to provide recurrent output.  This
            is where the context layer will return the patter that it 
            previously remembered.
            </summary>
            <returns>The recurrent output.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.ActivationFunction">
            <summary>
            The activation function used for this layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.NeuronCount">
            <summary>
            Set or get the neuron count, this will NOT adjust the synapses, or thresholds
            other code must do that.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.Next">
            <summary>
            Get a list of all of the outbound synapse connections from this
            layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.NextLayers">
            <summary>
            The outbound layers from this layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.Threshold">
            <summary>
            This layer's threshold values, if present, otherwise
            this function returns null.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.X">
            <summary>
            The x-coordinate that this layer should be displayed
            at in a GUI.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.Y">
            <summary>
            The y-coordinate that this layer should be displayed
            at in a GUI.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ILayer.HasThreshold">
            <summary>
            True if this layer has threshold values.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.MarketPoint">
            <summary>
            Hold one market datapoint.  This class is based on the TemporalPoint,
            however it is designed to take its sequence number from a date.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Temporal.TemporalPoint">
            <summary>
            A point in tme for a temporal data set.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalPoint.sequence">
            <summary>
            The sequence number for this point.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalPoint.data">
            <summary>
            The data for this point.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalPoint.#ctor(System.Int32)">
            <summary>
            Construct a temporal point of the specified size.
            </summary>
            <param name="size">The size to create the temporal point for.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalPoint.CompareTo(Encog.Neural.NeuralData.Temporal.TemporalPoint)">
            <summary>
            Compare two temporal points.
            </summary>
            <param name="that">The other temporal point to compare.</param>
            <returns>Returns 0 if they are equal, less than 0 if this point is less,
            greater than zero if this point is greater.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalPoint.ToString">
            Convert this point to string form.
            @return This point as a string.
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalPoint.Data">
            <summary>
            Allowes indexed access to the data.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalPoint.Sequence">
            <summary>
            The sequence number, used to sort.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalPoint.Item(System.Int32)">
            <summary>
            Allowes indexed access to the data.
            </summary>
            <param name="x">The index.</param>
            <returns>The data at the specified index.</returns>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketPoint.when">
            <summary>
            When to hold the data from.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketPoint.#ctor(System.DateTime,System.Int32)">
            <summary>
            Construct a MarketPoint with the specified date and size.
            </summary>
            <param name="when">When is this data from.</param>
            <param name="size">What is the size of the data.</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.MarketPoint.When">
            <summary>
            When is this point from.
            </summary>
        </member>
        <member name="T:Encog.Bot.RSS.RSS">
            <summary>
            RSS: This is the class that actually parses the 
            RSS and builds a collection of RSSItems.  To make use
            of this class call the load method with a URL that
            points to RSS.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSS.attributes">
            <summary>
            All of the attributes for this RSS document.
            </summary>
        </member>
        <member name="F:Encog.Bot.RSS.RSS.items">
            <summary>
            All RSS items, or stories, found.
            </summary>
        </member>
        <member name="M:Encog.Bot.RSS.RSS.ParseDate(System.String)">
            <summary>
            Simple utility function that converts a RSS formatted date
            into a C# date.
            </summary>
            <param name="datestr">A date</param>
            <returns>A C# DateTime object.</returns>
        </member>
        <member name="M:Encog.Bot.RSS.RSS.LoadItem(System.Xml.XmlNode)">
            <summary>
            Load the specified RSS item, or story.
            </summary>
            <param name="item">A XML node that contains a RSS item.</param>
        </member>
        <member name="M:Encog.Bot.RSS.RSS.LoadChannel(System.Xml.XmlNode)">
            <summary>
            Load the channle node.
            </summary>
            <param name="channel">A node that contains a channel.</param>
        </member>
        <member name="M:Encog.Bot.RSS.RSS.Load(System.Uri)">
            <summary>
            Load all RSS data from the specified URL.
            </summary>
            <param name="url">URL that contains XML data.</param>
        </member>
        <member name="M:Encog.Bot.RSS.RSS.ToString">
            <summary>
            Convert the object to a String.
            </summary>
            <returns>The object as a String.</returns>
        </member>
        <member name="P:Encog.Bot.RSS.RSS.Attributes">
            <summary>
            All of the attributes for this RSS document.
            </summary>
        </member>
        <member name="P:Encog.Bot.RSS.RSS.Items">
            <summary>
            All RSS items, or stories, found.
            </summary>
        </member>
        <member name="M:Encog.Util.Time.DateUtil.CreateDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            January is 1.
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="T:Encog.Util.MathUtil.Equilateral">
            <summary>
            Used to produce an array of activations to classify data into groups. This
            class is provided the number of groups, as well as the range that the
            activations should fall into.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.Equilateral.matrix">
            <summary>
            The matrix of values that was generated.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.Equilateral.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Construct an equilateral matrix.
            </summary>
            <param name="count">The number of sets, these will be the rows in the matrix.</param>
            <param name="high">The high value for the outputs.</param>
            <param name="low">The low value for the outputs.</param>
        </member>
        <member name="M:Encog.Util.MathUtil.Equilateral.Decode(System.Double[])">
            <summary>
            Decode a set of activations and see which set it has the lowest Euclidean
            distance from.
            </summary>
            <param name="activations">The output from the neural network.</param>
            <returns>The set that these activations were closest too.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.Equilateral.Encode(System.Int32)">
            <summary>
            Get the activations for the specified set.
            </summary>
            <param name="set">The set to determine the activations for.</param>
            <returns>The activations for the specified sets.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.Equilateral.Equilat(System.Int32,System.Double,System.Double)">
            <summary>
            Called internally to generate the matrix.
            </summary>
            <param name="n">The number of sets to generate for.</param>
            <param name="high">The high end of the range of values to generate.</param>
            <param name="low"> The low end of the range of values to generate.</param>
            <returns>One row for each set, the columns are the activations for that set.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.Equilateral.GetDistance(System.Double[],System.Int32)">
            <summary>
            Get the Euclidean distance between the specified data and the set number.
            </summary>
            <param name="data">The data to check.</param>
            <param name="set">The set to check.</param>
            <returns>The distance.</returns>
        </member>
        <member name="T:Encog.Persist.Persistors.DirectSynapsePersistor">
            <summary>
            The Encog persistor used to persist the DirectSynapse class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.DirectSynapsePersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.DirectSynapsePersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationSigmoidPersistor">
            <summary>
            The Encog persistor used to persist the ActivationSigmoid class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSigmoidPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSigmoidPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Normalize.Target.NormalizationStorageCSV">
            <summary>
            Store normalized data to a CSV file.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageCSV.outputFile">
            <summary>
            The output file.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageCSV.output">
            <summary>
            The output writer.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageCSV.format">
            <summary>
            The CSV format to use.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageCSV.#ctor(Encog.Util.CSV.CSVFormat,System.String)">
            <summary>
            Construct a CSV storage object from the specified file.
            </summary>
            <param name="format">The format to use.</param>
            <param name="file">The file to write the CSV to.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageCSV.#ctor(System.String)">
            <summary>
            Construct a CSV storage object from the specified file.
            </summary>
            <param name="file">The file to write the CSV to.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageCSV.Close">
            <summary>
            Close the CSV file.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageCSV.Open">
            <summary>
            Open the CSV file.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageCSV.Write(System.Double[],System.Int32)">
            <summary>
            Write an array.
            </summary>
            <param name="data">The data to write.</param>
            <param name="inputCount"> How much of the data is input.</param>
        </member>
        <member name="T:Encog.Normalize.Output.ZAxis.OutputFieldZAxisSynthetic">
            <summary>
            This field represents the synthetic value used in Z-Axis normalization.
            For more information see the OutputFieldZAxis class.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.OutputFieldGrouped">
            <summary>
             Defines an output field that can be grouped.  Groupable classes
            will extend this class.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldGrouped.group">
            <summary>
            The group that this field is a member of.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.OutputFieldGrouped.sourceField">
            <summary>
            The source field, this is the input field that provides data
            for this output field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldGrouped.#ctor">
            <summary>
            Default constructor, used mainly for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldGrouped.#ctor(Encog.Normalize.Output.IOutputFieldGroup,Encog.Normalize.Input.IInputField)">
            <summary>
            Construct a grouped output field.
            </summary>
            <param name="group">The group that this field belongs to.</param>
            <param name="sourceField">The source field for this output field.</param>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldGrouped.RowInit">
            <summary>
            Init this field for a new row.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.OutputFieldGrouped.Calculate(System.Int32)">
            <summary>
            Calculate the value for this field.  Specify subfield of zero
            if this is a simple field.
            </summary>
            <param name="subfield"> The subfield index.</param>
            <returns>The calculated value for this field.</returns>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldGrouped.Group">
            <summary>
            The group that this field belongs to.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldGrouped.SourceField">
            <summary>
            The source field for this output field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Encog.Normalize.Output.OutputFieldGrouped.SubfieldCount">
            <summary>
            The numebr of fields that will actually be generated by 
            this field. For a simple field, this value is 1.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxisSynthetic.#ctor(Encog.Normalize.Output.IOutputFieldGroup)">
            <summary>
            Construct a synthetic output field for Z-Axis.
            </summary>
            <param name="group">The Z-Axis group that this belongs to.</param>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxisSynthetic.Calculate(System.Int32)">
            <summary>
            Calculate the synthetic value for this Z-Axis normalization.
            </summary>
            <param name="subfield">Not used.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxisSynthetic.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.ZAxis.OutputFieldZAxisSynthetic.SubfieldCount">
            <summary>
            The subfield count, which is one, as this field type does not
            have subfields.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.Nominal.OutputEquilateral">
            <summary>
            Allows nominal items to be encoded using the equilateral method. This maps
            the nominal items into an array of input or output values minus 1. This can
            sometimes provide a more accurate representation than the "one of" method.
            Based on: Guiver and Klimasauskas (1991).
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputEquilateral.items">
            <summary>
            The nominal items.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputEquilateral.equilateral">
            <summary>
            The current equilateral matrix.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputEquilateral.currentValue">
            <summary>
            The current value, which nominal item is selected.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputEquilateral.high">
            <summary>
            The high value to map into.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputEquilateral.low">
            <summary>
            The low value to map into.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.#ctor">
            <summary>
            Prodvide a default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.#ctor(System.Double,System.Double)">
            <summary>
            Create an equilateral output field with the specified high and low output
            values. These will often be 0 to 1 or -1 to 1.
            </summary>
            <param name="high">The high output value.</param>
            <param name="low">The low output value.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.AddItem(Encog.Normalize.Input.IInputField,System.Double)">
            <summary>
            Add a nominal value based on a single value.  This creates a 0.1 range
            around this value.
            </summary>
            <param name="inputField">The input field this is based on.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.AddItem(Encog.Normalize.Input.IInputField,System.Double,System.Double)">
            <summary>
            Add a nominal item based on a range.
            </summary>
            <param name="inputField">The input field to use.</param>
            <param name="low">The low value of the range.</param>
            <param name="high">The high value of the range.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.Calculate(System.Int32)">
            <summary>
            Calculate the value for the specified subfield.
            </summary>
            <param name="subfield">The subfield to calculate for.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.getHigh">
            <summary>
            The high value of the range.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.getLow">
            <summary>
            The low value of the range.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputEquilateral.RowInit">
            <summary>
            Determine which item's index is the value.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.OutputEquilateral.Equilateral">
            <summary>
            The equalateral table being used.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.OutputEquilateral.SubfieldCount">
            <summary>
            This is the total number of nominal items minus 1.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining">
            <summary>
            This class implements competitive training, which would be used in a
            winner-take-all neural network, such as the self organizing map (SOM). This
            is an unsupervised training method, no ideal data is needed on the training
            set. If ideal data is provided, it will be ignored.
            
            Training is done by looping over all of the training elements and calculating
            a "best matching unit" (BMU). This BMU output neuron is then adjusted to
            better "learn" this pattern. Additionally, this training may be applied to
            othr "nearby" output neurons. The degree to which nearby neurons are update
            is defined by the neighborhood function.
            
            A neighborhood function is required to determine the degree to which
            neighboring neurons (to the winning neuron) are updated by each training
            iteration.
            
            Because this is unsupervised training, calculating an error to measure
            progress by is difficult. The error is defined to be the "worst", or longest,
            Euclidean distance of any of the BMU's. This value should be minimized, as
            learning progresses.
            
            Because only the BMU neuron and its close neighbors are updated, you can end
            up with some output neurons that learn nothing. By default these neurons are
            forced to win patterns that are not represented well. This spreads out the
            workload among all output neurons. This feature is used by default, but can
            be disabled by setting the "forceWinner" property.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.BasicTraining">
            <summary>
            An abstract class that implements basic training for most training
            algorithms. Specifically training strategies can be added to enhance the
            training.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.ITrain">
            <summary>
            Interface for all neural network training methods. This allows the training
            methods to be largely interchangeable. Though some training methods require
            specific types of neural network structure.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.ITrain.AddStrategy(Encog.Neural.Networks.Training.IStrategy)">
            <summary>
            Training strategies can be added to improve the training results. There
            are a number to choose from, and several can be used at once.
            </summary>
            <param name="strategy">The strategy to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.ITrain.Iteration">
            <summary>
            Perform one iteration of training.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.ITrain.Error">
            <summary>
            Get the current error percent from the training. You can also set the current error rate. 
            This is usually used by training strategies.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.ITrain.Network">
            <summary>
            Get the current best network from the training.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.ITrain.Strategies">
            <summary>
            The strategies to use.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.ITrain.Training">
            <summary>
            The training data to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.BasicTraining.strategies">
            <summary>
            The training strategies to use. 
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.BasicTraining.training">
            <summary>
            The training data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.BasicTraining.error">
            <summary>
            The current error rate.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.BasicTraining.AddStrategy(Encog.Neural.Networks.Training.IStrategy)">
            <summary>
            Training strategies can be added to improve the training results. There
            are a number to choose from, and several can be used at once.
            </summary>
            <param name="strategy">The strategy to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.BasicTraining.PostIteration">
            <summary>
            Call the strategies after an iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.BasicTraining.PreIteration">
            <summary>
            Call the strategies before an iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.BasicTraining.Iteration">
            <summary>
            Perform one iteration of training.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.BasicTraining.Error">
            <summary>
            Get the current error percent from the training.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.BasicTraining.Strategies">
            <summary>
            The strategies to use.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.BasicTraining.Training">
            <summary>
            The training data to use.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.BasicTraining.Network">
            <summary>
            Get the current best network from the training.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.ILearningRate">
            <summary>
            Specifies that a training algorithm has the concept of a learning rate.
            This allows it to be used with strategies that automatically adjust the
            learning rate.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.ILearningRate.LearningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.neighborhood">
            <summary>
            The neighborhood function to use to determine to what degree a neuron
            should be "trained".
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.learningRate">
            <summary>
            The learning rate. To what degree should changes be applied.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.inputLayer">
            <summary>
            The input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.outputLayer">
            <summary>
            The output layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.synapses">
            <summary>
            A collection of the synapses being modified.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.inputNeuronCount">
            <summary>
            How many neurons in the input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.outputNeuronCount">
            <summary>
            How many neurons in the output layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.bmuUtil">
            <summary>
            Utility class used to determine the BMU.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.correctionMatrix">
            <summary>
            Holds the corrections for any matrix being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.forceWinner">
            <summary>
            True is a winner is to be forced, see class description, or forceWinners
            method. By default, this is true.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.#ctor(Encog.Neural.Networks.BasicNetwork,System.Double,Encog.Neural.NeuralData.INeuralDataSet,Encog.Neural.Networks.Training.Competitive.Neighborhood.INeighborhoodFunction)">
            <summary>
            Create an instance of competitive training.
            </summary>
            <param name="network">The network to train.</param>
            <param name="learningRate">The learning rate, how much to apply per iteration.</param>
            <param name="training">The training set (unsupervised).</param>
            <param name="neighborhood">The neighborhood function to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.ApplyCorrection">
            <summary>
            Loop over the synapses to be trained and apply any corrections that were
            determined by this training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.CopyInputPattern(Encog.Neural.Networks.Synapse.ISynapse,System.Int32,Encog.Neural.Data.INeuralData)">
            <summary>
            Copy the specified input pattern to the weight matrix. This causes an
            output neuron to learn this pattern "exactly". This is useful when a
            winner is to be forced.
            </summary>
            <param name="synapse">The synapse that is the target of the copy.</param>
            <param name="outputNeuron">The output neuron to set.</param>
            <param name="input">The input pattern to copy.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.DetermineWeightAdjustment(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Determine the weight adjustment for a single neuron during a training
            iteration.
            </summary>
            <param name="weight">The starting weight.</param>
            <param name="input">The input to this neuron.</param>
            <param name="currentNeuron">The neuron who's weight is being updated.</param>
            <param name="bmu">The neuron that "won", the best matching unit.</param>
            <returns>The new weight value.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.ForceWinners(Encog.Neural.Networks.Synapse.ISynapse,System.Int32[],Encog.Neural.Data.INeuralData)">
            <summary>
            Force any neurons that did not win to off-load patterns from overworked
            neurons.
            </summary>
            <param name="synapse">The synapse.</param>
            <param name="won">An array that specifies how many times each output neuron has "won".</param>
            <param name="leastRepresented">The training pattern that is the least represented by this neural network.</param>
            <returns>True if a winner was forced.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.Iteration">
            <summary>
            Perform one training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.Train(System.Int32,Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData)">
            <summary>
            Train for the specified synapse and BMU.
            </summary>
            <param name="bmu">The best matching unit for this input.</param>
            <param name="synapse">The synapse to train.</param>
            <param name="input">The input to train for.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.TrainPattern(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData,System.Int32,System.Int32)">
            <summary>
            Train for the specified pattern.
            </summary>
            <param name="synapse">The synapse to train.</param>
            <param name="input">The input pattern to train for.</param>
            <param name="current">The current output neuron being trained.</param>
            <param name="bmu">The best matching unit, or winning output neuron.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.InputNeuronCount">
            <summary>
            The input neuron count.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.LearningRate">
            <summary>
            The learning rate. This was set when the object was created.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.Neighborhood">
            <summary>
            The network neighborhood function.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.Network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.OutputNeuronCount">
            <summary>
            The output neuron count.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Competitive.CompetitiveTraining.ForceWinner">
            <summary>
            Is a winner to be forced of neurons that do not learn. See class
            description for more info.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Anneal.NeuralTrainingSetSimulatedAnnealing">
            <summary>
            A simulated annealing implementation that trains from a training set.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing">
            <summary>
            This class implements a simulated annealing training algorithm for 
            neural networks. It is based on the generic SimulatedAnnealing class.
            It is used in the same manner as any other training class that implements the
            Train interface.  This class is abstract, to create your own version
            of simulated annealing, you must provide an implementation of the
            determineError method.  If you want to train with a training set, use
            the NeuralTrainingSetSimulatedAnnealing class.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.CUT">
            <summary>
            The cutoff for random data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.network">
            <summary>
            The neural network that is to be trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.anneal">
            <summary>
            This class actually performs the training.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.#ctor(Encog.Neural.Networks.BasicNetwork,System.Double,System.Double,System.Int32)">
            <summary>
            Construct a simulated annleaing trainer for a feedforward neural network. 
            </summary>
            <param name="network">The neural network to be trained.</param>
            <param name="startTemp">The starting temperature.</param>
            <param name="stopTemp">The ending temperature.</param>
            <param name="cycles">The number of cycles in a training iteration.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.Iteration">
            <summary>
            Perform one iteration of simulated annealing.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.DetermineError">
            <summary>
            Determine the error of the current weights and thresholds.
            </summary>
            <returns>The error.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.GetArray">
            <summary>
            Get the network as an array of doubles.
            </summary>
            <returns>The network as an array of doubles.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.GetArrayCopy">
            <summary>
            A copy of the annealing array.
            </summary>
            <returns>A copy of the annealing array.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.PutArray(System.Double[])">
            <summary>
            Convert an array of doubles to the current best network.
            </summary>
            <param name="array">An array.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.Randomize">
            <summary>
            Randomize the weights and thresholds. This function does most of the
            work of the class. Each call to this class will randomize the data
            according to the current temperature. The higher the temperature the
            more randomness.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing.Network">
            <summary>
            The best network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralTrainingSetSimulatedAnnealing.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double,System.Double,System.Int32)">
            <summary>
            Construct a simulated annealing object that works with a training set.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training set to use.</param>
            <param name="startTemp">The starting temperature.</param>
            <param name="stopTemp">The ending temperature.</param>
            <param name="cycles">The number of cycles per iteration.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralTrainingSetSimulatedAnnealing.DetermineError">
            <summary>
            Determine the error of the current weights and thresholds.
            </summary>
            <returns>The error.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.WeightedSynapse">
            <summary>
            A fully-connected weight based synapse. Inputs will be multiplied by the
            weight matrix and presented to the layer.
            
            This synapse type is teachable.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.WeightedSynapse.matrix">
            <summary>
            The weight matrix.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightedSynapse.#ctor">
            <summary>
            Simple default constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightedSynapse.#ctor(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Construct a weighted synapse between the two layers.
            </summary>
            <param name="fromLayer">The starting layer.</param>
            <param name="toLayer">The ending layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightedSynapse.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightedSynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the weighted output from this synapse. Each neuron
            in the from layer has a weighted connection to each of the
            neurons in the next layer. 
            </summary>
            <param name="input">The input from the synapse.</param>
            <returns>The output from this synapse.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightedSynapse.CreatePersistor">
            <summary>
            Return a persistor for this object.
            </summary>
            <returns>A new persistor.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightedSynapse.WeightMatrix">
            <summary>
            Get the weight and threshold matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightedSynapse.MatrixSize">
            <summary>
            Get the size of the matrix, or zero if one is not defined.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightedSynapse.SynapseType">
            <summary>
            The type of synapse this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightedSynapse.IsTeachable">
            <summary>
            True, this is a teachable synapse type.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.NeuralDataMapping">
            <summary>
            A mapping between two INeuralData classes.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralDataMapping.from">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralDataMapping.to">
            <summary>
            The target.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralDataMapping.#ctor">
            <summary>
            Construct an empty mapping.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralDataMapping.#ctor(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Construct a neural data mapping.
            </summary>
            <param name="from">The source.</param>
            <param name="to">The target.</param>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralDataMapping.Copy(Encog.Neural.Networks.NeuralDataMapping,Encog.Neural.Networks.NeuralDataMapping)">
            <summary>
            Copy from one mapping to another.  Deep copy.
            </summary>
            <param name="source">The source mapping.</param>
            <param name="target">The target mapping.</param>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralDataMapping.From">
            <summary>
            The source.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralDataMapping.To">
            <summary>
            The target.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.MarketNeuralDataSet">
            <summary>
            A data set that is designed to hold market data. This class is based on the
            TemporalNeuralDataSet.  This class is designed to load financial data from
            external sources.  This class is designed to track financial data across days.
            However, it should be usable with other levels of granularity as well. 
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet">
            <summary>
            This class implements a temporal neural data set. A temporal neural dataset
            is designed to use a neural network to predict.
            
            A temporal dataset is a stream of data over a time range. This time range is
            broken up into "points". Each point can contain one or more values. These
            values are either the values that you would like to predict, or use to
            predict. It is possible for a value to be both predicted and used to predict.
            For example, if you were trying to predict a trend in a stock's price
            fluctuations you might very well use the security price for both.
            
            Each point that we have data for is stored in the TemporalPoint class. Each
            TemporalPoint will contain one more data values. These data values are
            described by the TemporalDataDescription class. For example, if you had five
            TemporalDataDescription objects added to this class, each Temporal point
            object would contain five values.
            
            Points are arranged by sequence number.  No two points can have the same 
            sequence numbers.  Methods are provided to allow you to add points using the
            Date class.  These dates are resolved to sequence number using the level
            of granularity specified for this class.  No two points can occupy the same
            granularity increment.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Basic.BasicNeuralDataSet">
            <summary>
            Basic implementation of the NeuralDataSet class.  This class simply
            stores the neural data in an ArrayList.  This class is memory based, 
            so large enough datasets could cause memory issues.  Many other dataset
            types extend this class.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.IIndexable">
            <summary>
            Specifies that a data set can be accessed in random order via an index. This
            property is required for MPROP training. 
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.IIndexable.GetRecord(System.Int64,Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Read an individual record, specified by index, in random order.
            </summary>
            <param name="index">The index to read.</param>
            <param name="pair">The pair that the record will be copied into.</param>
        </member>
        <member name="M:Encog.Neural.Data.IIndexable.OpenAdditional">
            <summary>
            Opens an additional instance of this dataset.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Encog.Neural.Data.IIndexable.Count">
            <summary>
            The total number of records in the set.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Basic.BasicNeuralDataSet.data">
            <summary>
            The data held by this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Basic.BasicNeuralDataSet.enumerators">
            <summary>
            The enumerators created for this list.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.#ctor(System.Collections.Generic.IList{Encog.Neural.NeuralData.INeuralDataPair})">
            <summary>
            Construct a data set from an already created list. Mostly used to
            duplicate this class.
            </summary>
            <param name="data">The data to use.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.#ctor(System.Double[][],System.Double[][])">
            <summary>
            Construct a data set from an input and idea array.
            </summary>
            <param name="input">The input into the neural network for training.</param>
            <param name="ideal">The idea into the neural network for training.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.#ctor">
            <summary>
            Construct a basic neural data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Add the specified data to the set.  Add unsupervised data.
            </summary>
            <param name="data1">The data to add to the set.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Add supervised data to the set.
            </summary>
            <param name="inputData">The input data.</param>
            <param name="idealData">The ideal data.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Add a pair to the set.
            </summary>
            <param name="inputData">The pair to add to the set.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.Close">
            <summary>
            Close the neural data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.GetEnumerator">
            <summary>
            Get an enumerator to access the data with.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to access the data with.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.CreatePersistor">
            <summary>
            Create a persistor to load/save this object to XML.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.GetRecord(System.Int64,Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Get one record from the data set.
            </summary>
            <param name="index">The index to read.</param>
            <param name="pair">The pair to read into.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.OpenAdditional">
            <summary>
            Open an additional instance of this dataset.
            </summary>
            <returns>The new instance of this dataset.</returns>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.Description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.Data">
            <summary>
            Access to the list of data items.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.IdealSize">
            <summary>
            Get the ideal size, or zero for unsupervised.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.InputSize">
            <summary>
            Get the input size.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.IsSupervised">
            <summary>
            Determine if the dataset is supervised.  It is assumed that all pairs
            are either supervised or not.  So we can determine the entire set by
            looking at the first item.  If the set is empty then return false, or
            unsupervised.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.Count">
            <summary>
            The number of records in this data set.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator">
            <summary>
            The enumerator for the basic neural data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.#ctor(Encog.Neural.Data.Basic.BasicNeuralDataSet)">
            <summary>
            Construct an enumerator.
            </summary>
            <param name="owner">The owner of the enumerator.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns>True if there is a next item.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.Reset">
            <summary>
            Reset to the beginning.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.Current">
            <summary>
            The current data item.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataSet.BasicNeuralEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.ADD_NOT_SUPPORTED">
            <summary>
            Error message: adds are not supported.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.descriptions">
            <summary>
            Descriptions of the data needed.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.points">
            <summary>
            The temporal points at which we have data.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.inputWindowSize">
            <summary>
            The size of the input window, this is the data being used to predict.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.predictWindowSize">
            <summary>
            The size of the prediction window.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.lowSequence">
            <summary>
            The lowest sequence.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.highSequence">
            <summary>
            The highest sequence.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.desiredSetSize">
            <summary>
            How big would we like the input size to be.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.inputNeuronCount">
            <summary>
            How many input neurons will be used.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.outputNeuronCount">
            <summary>
            How many output neurons will there be.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.startingPoint">
            <summary>
            What is the date for the first temporal point.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.sequenceGrandularity">
            <summary>
            What is the granularity of the temporal points? Days, months, years,
            etc?
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a dataset.
            </summary>
            <param name="inputWindowSize">What is the input window size.</param>
            <param name="predictWindowSize">What is the prediction window size.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.AddDescription(Encog.Neural.NeuralData.Temporal.TemporalDataDescription)">
            <summary>
            Add a data description.
            </summary>
            <param name="desc">The data description to add.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Clear">
            <summary>
            Clear the entire dataset.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Adding directly is not supported. Rather, add temporal points and
            generate the training data.
            </summary>
            <param name="inputData">Not used</param>
            <param name="idealData">Not used</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Adding directly is not supported. Rather, add temporal points and
            generate the training data.
            </summary>
            <param name="inputData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Adding directly is not supported. Rather, add temporal points and
            generate the training data.
            </summary>
            <param name="data">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CreatePoint(System.Int32)">
            <summary>
            Create a temporal data point using a sequence number. They can also be
            created using time. No two points should have the same sequence number.
            </summary>
            <param name="sequence">The sequence number.</param>
            <returns>A new TemporalPoint object.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GetSequenceFromDate(System.DateTime)">
            <summary>
            Create a sequence number from a time. The first date will be zero, and
            subsequent dates will be increased according to the grandularity
            specified. 
            </summary>
            <param name="when">The date to generate the sequence number for.</param>
            <returns>A sequence number.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CreatePoint(System.DateTime)">
            <summary>
            Create a temporal point from a time. Using the grandularity each date is
            given a unique sequence number. No two dates that fall in the same
            grandularity should be specified.
            </summary>
            <param name="when">The time that this point should be created at.</param>
            <returns>The point TemporalPoint created.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CalculatePointsInRange">
            <summary>
            Calculate how many points are in the high and low range. These are the
            points that the training set will be generated on.
            </summary>
            <returns>The number of points.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CalculateActualSetSize">
            <summary>
            Calculate the actual set size, this is the number of training set entries
            that will be generated.
            </summary>
            <returns>The size of the training set.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CalculateNeuronCounts">
            <summary>
            Calculate how many input and output neurons will be needed for the
            current data.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.IsPointInRange(Encog.Neural.NeuralData.Temporal.TemporalPoint)">
            <summary>
            Is the specified point within the range. If a point is in the selection
            range, then the point will be used to generate the training sets.
            </summary>
            <param name="point">The point to consider.</param>
            <returns>True if the point is within the range.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GenerateInputNeuralData(System.Int32)">
            <summary>
            Generate input neural data for the specified index.
            </summary>
            <param name="index">The index to generate neural data for.</param>
            <returns>The input neural data generated.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GetDataRAW(Encog.Neural.NeuralData.Temporal.TemporalDataDescription,System.Int32)">
            <summary>
            Get data between two points in raw form.
            </summary>
            <param name="desc">The data description.</param>
            <param name="index">The index to get data from.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GetDataDeltaChange(Encog.Neural.NeuralData.Temporal.TemporalDataDescription,System.Int32)">
            <summary>
            Get data between two points in delta form.
            </summary>
            <param name="desc">The data description.</param>
            <param name="index">The index to get data from.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GetDataPercentChange(Encog.Neural.NeuralData.Temporal.TemporalDataDescription,System.Int32)">
            <summary>
            Get data between two points in percent form.
            </summary>
            <param name="desc">The data description.</param>
            <param name="index">The index to get data from.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.FormatData(Encog.Neural.NeuralData.Temporal.TemporalDataDescription,System.Int32)">
            <summary>
            Format data according to the type specified in the description.
            </summary>
            <param name="desc">The data description.</param>
            <param name="index">The index to format the data at.</param>
            <returns>The formatted data.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.GenerateOutputNeuralData(System.Int32)">
            <summary>
            Generate neural ideal data for the specified index.
            </summary>
            <param name="index">The index to generate for.</param>
            <returns>The neural data generated.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.CalculateStartIndex">
            <summary>
            Calculate the index to start at.
            </summary>
            <returns>The starting point.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.SortPoints">
            <summary>
            Sort the points.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Generate">
            <summary>
            Generate the training sets.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Descriptions">
            <summary>
            The data descriptions.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.Points">
            <summary>
            The points, or time slices to take data from.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.InputWindowSize">
            <summary>
            Get the size of the input window.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.PredictWindowSize">
            <summary>
            The prediction window size.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.LowSequence">
            <summary>
            The low value for the sequence.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.HighSequence">
            <summary>
            The high value for the sequence.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.DesiredSetSize">
            <summary>
            The desired dataset size.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.InputNeuronCount">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.OutputNeuronCount">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.StartingPoint">
            <summary>
            The starting point.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalNeuralDataSet.SequenceGrandularity">
            <summary>
            The size of the timeslices.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.loader">
            <summary>
            The loader to use to obtain the data.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.pointIndex">
            <summary>
            A map between the data points and actual data.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.#ctor(Encog.Neural.NeuralData.Market.Loader.IMarketLoader,System.Int32,System.Int32)">
            <summary>
            Construct a market data set object.
            </summary>
            <param name="loader">The loader to use to get the financial data.</param>
            <param name="inputWindowSize">The input window size, that is how many datapoints do we use to predict.</param>
            <param name="predictWindowSize">How many datapoints do we want to predict.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.AddDescription(Encog.Neural.NeuralData.Temporal.TemporalDataDescription)">
            <summary>
            Add one description of the type of market data that we are seeking at
            each datapoint.
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.CreatePoint(System.DateTime)">
            <summary>
            Create a datapoint at the specified date.
            </summary>
            <param name="when">The date to create the point at.</param>
            <returns>Returns the TemporalPoint created for the specified date.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.Load(System.DateTime,System.DateTime)">
            <summary>
            Load data from the loader.
            </summary>
            <param name="begin">The beginning date.</param>
            <param name="end">The ending date.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.LoadPointFromMarketData(Encog.Neural.NeuralData.Market.TickerSymbol,Encog.Neural.NeuralData.Temporal.TemporalPoint,Encog.Neural.NeuralData.Market.Loader.LoadedMarketData)">
            <summary>
            Load one point of market data.
            </summary>
            <param name="ticker">The ticker symbol to load.</param>
            <param name="point">The point to load at.</param>
            <param name="item">The item being loaded.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.LoadSymbol(Encog.Neural.NeuralData.Market.TickerSymbol,System.DateTime,System.DateTime)">
            <summary>
            Load one ticker symbol.
            </summary>
            <param name="ticker">The ticker symbol to load.</param>
            <param name="from">Load data from this date.</param>
            <param name="to">Load data to this date.</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.MarketNeuralDataSet.Loader">
            <summary>
            The loader that is being used for this set.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Image.ImageNeuralData">
            <summary>
            An extension of the BasicNeuralData class that is designed to hold images for
            input into a neural network. This class should only be used with the
            ImageNeuralDataSet collection.
            
            This class provides the ability to associate images with the elements of a
            dataset. These images will be downsampled to the resolution specified in the
            ImageNeuralData set class that they are added to.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Basic.BasicNeuralData">
            <summary>
            Basic implementation of the NeuralData interface that stores the
            data in an array.  
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.INeuralData">
            <summary>
            Neural data, basically an array of values.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.INeuralData.Item(System.Int32)">
            <summary>
            Get or set the specified index.
            </summary>
            <param name="x">The index to access.</param>
            <returns></returns>
        </member>
        <member name="P:Encog.Neural.Data.INeuralData.Data">
            <summary>
            Allowes indexed access to the data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.INeuralData.Count">
            <summary>
            How many elements in this data structure.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralData.#ctor(System.Double[])">
            <summary>
            Construct this object with the specified data. 
            </summary>
            <param name="d">The data to construct this object with.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralData.#ctor(System.Int32)">
            <summary>
            Construct this object with blank data and a specified size.
            </summary>
            <param name="size">The amount of data to store.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralData.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralData.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralData.Item(System.Int32)">
            <summary>
            Access the data by index.
            </summary>
            <param name="x">The index to access.</param>
            <returns></returns>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralData.Data">
            <summary>
            Get the data as an array.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralData.Count">
            <summary>
            Get the count of data items.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralData.image">
            <summary>
            The image associated with this class.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralData.#ctor(System.Drawing.Bitmap)">
            <summary>
            Construct an object based on an image.
            </summary>
            <param name="image">The image to use.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralData.Downsample(Encog.Util.DownSample.IDownSample,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Downsample, and copy, the image contents into the data of this object.
            Calling this method has no effect on the image, as the same image can be
            downsampled multiple times to different resolutions.
            </summary>
            <param name="downsampler">The downsampler object to use.</param>
            <param name="findBounds">Should the bounds be located and cropped.</param>
            <param name="height">The height to downsample to.</param>
            <param name="width">The width to downsample to</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Image.ImageNeuralData.Image">
            <summary>
            The image that will be downsampled.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationSoftMax">
            <summary>
            The softmax activation function.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSoftMax.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSoftMax.Clone">
            <summary>
            Clone the specified object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSoftMax.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSoftMax.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationSoftMax.HasDerivative">
            <summary>
            Return false, softmax has no derivative.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.LoadWebPage">
            <summary>
            Called to actually load a web page. This will read the HTML on a web page and
            generate the DocumentRange classes.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.LoadWebPage.page">
            <summary>
            The loaded webpage.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.LoadWebPage.baseURL">
            <summary>
            The base URL for the page being loaded.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.LoadWebPage.lastForm">
            <summary>
            The last form that was processed.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.LoadWebPage.lastHierarchyElement">
            <summary>
            The last hierarchy element that was processed.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.LoadWebPage.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.#ctor(System.Uri)">
            <summary>
            Construct a web page loader with the specified base URL.
            </summary>
            <param name="baseURL">The base URL to use when loading.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.AddHierarchyElement(Encog.Bot.Browse.Range.DocumentRange)">
            <summary>
            Add the specified hierarchy element.
            </summary>
            <param name="element">The hierarchy element to add.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.CreateCodeDataUnit(System.String)">
            <summary>
            Create a dataunit to hode the code HTML tag.
            </summary>
            <param name="str">The code to create the data unit with.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.CreateTagDataUnit(Encog.Parse.Tags.Tag)">
            <summary>
            Create a tag data unit.
            </summary>
            <param name="tag">The tag name to create the data unit for.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.CreateTextDataUnit(System.String)">
            <summary>
            Create a text data unit.
            </summary>
            <param name="str">The text.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.FindEndTag(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
             Find the end tag that lines up to the beginning tag.
            </summary>
            <param name="index">The index to start the search on. This specifies
            the starting data unit.</param>
            <param name="tag">The beginning tag that we are seeking the end tag 
            for.</param>
            <returns>The index that the ending tag was found at. Returns -1
            if not found.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.Load(System.IO.Stream)">
            <summary>
            Load a web page from the specified stream.
            </summary>
            <param name="istream">The input stream to load from.</param>
            <returns>The loaded web page.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.Load(System.String)">
            <summary>
            Load the web page from a string that contains HTML.
            </summary>
            <param name="str">A string containing HTML.</param>
            <returns>The loaded WebPage.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadContents">
            <summary>
            Using the data units, which should have already been loaded by this 
            time, load the contents of the web page.  This includes the title,
            any links and forms.  Div tags and spans are also processed.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadDataUnits(System.IO.Stream)">
            <summary>
            Load the data units.  Once the lower level data units have been 
            loaded, the contents can be loaded.
            </summary>
            <param name="istream">The input stream that the data units are loaded from.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadDiv(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load a div tag.
            </summary>
            <param name="index">The index to begin at.</param>
            <param name="tag">The beginning div tag.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadForm(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load a form on the page.
            </summary>
            <param name="index">The index to begin loading at.</param>
            <param name="tag">The beginning tag.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadInput(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load an input tag on the form.
            </summary>
            <param name="index">The index to begin loading at.</param>
            <param name="tag">The beginning tag.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadLink(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load a link on the page.
            </summary>
            <param name="index">The index to begin loading at.</param>
            <param name="tag">The beginning tag.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadSpan(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load a span.
            </summary>
            <param name="index">The index to begin loading at.</param>
            <param name="tag">The beginning tag.</param>
        </member>
        <member name="M:Encog.Bot.Browse.LoadWebPage.LoadTitle(System.Int32,Encog.Parse.Tags.Tag)">
            <summary>
            Called by loadContents to load the title of the page.
            </summary>
            <param name="index">The index to begin loading at.</param>
            <param name="tag">The beginning tag.</param>
        </member>
        <member name="T:Encog.Bot.Browse.Extract.ListExtractListener">
            <summary>
            A simple implementation of the ExtractListener interface that will listen for
            words and add them to a list. This allows you to quickly build a list of all
            of the words on a web page.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Extract.ListExtractListener.list">
            <summary>
            The list to extract into.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.ListExtractListener.FoundData(System.Object)">
            <summary>
            Called when a word is found, add it to the list.
            </summary>
            <param name="obj">The word found.</param>
        </member>
        <member name="P:Encog.Bot.Browse.Extract.ListExtractListener.List">
            <summary>
            The list of words extracted.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.BrowseError">
            <summary>
            Indicates an error has occurred in the browse classes.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.BrowseError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Bot.Browse.BrowseError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ContextLayerPersistor">
            <summary>
            The Encog persistor used to persist the ContextLayer class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.ContextLayerPersistor.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ContextLayerPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ContextLayerPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationBiPolarPersistor">
            <summary>
            The Encog persistor used to persist the ActivationBiPolar class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationBiPolarPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationBiPolarPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Parse.PeekableInputStream">
            <summary>
            PeekableInputStream: This class allows a stream to be
            read like normal.  However, the ability to peek is added.
            The calling method can peek as far as is needed.  This is
            used by the ParseHTML class.
            </summary>
        </member>
        <member name="F:Encog.Parse.PeekableInputStream.stream">
            <summary>
            The underlying stream.
            </summary>
        </member>
        <member name="F:Encog.Parse.PeekableInputStream.peekBytes">
            <summary>
            Bytes that have been peeked at.
            </summary>
        </member>
        <member name="F:Encog.Parse.PeekableInputStream.peekLength">
            <summary>
            How many bytes have been peeked at.
            </summary>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a peekable input stream based on the specified stream.
            </summary>
            <param name="stream">The underlying stream.</param>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Flush">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value">The length.</param>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes from the stream.
            </summary>
            <param name="buffer">The buffer to read the bytes into.</param>
            <param name="offset">The offset to begin storing the bytes at.</param>
            <param name="count">How many bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Read">
            <summary>
            Read a single byte.
            </summary>
            <returns>The byte read, or -1 for end of stream.</returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Peek(System.Int32)">
            <summary>
            Peek ahead the specified depth.
            </summary>
            <param name="depth">How far to peek ahead.</param>
            <returns>The byte read.</returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Peek">
            <summary>
            Peek at the next character from the stream.
            </summary>
            <returns>The next character.</returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Peek(System.String)">
            <summary>
            Peek ahead and see if the specified string is present.
            </summary>
            <param name="str">The string we are looking for.</param>
            <returns>True if the string was found.</returns>
        </member>
        <member name="M:Encog.Parse.PeekableInputStream.Skip(System.Int64)">
            <summary>
            Skip the specified number of bytes.
            </summary>
            <param name="count">The number of bytes to skip.</param>
            <returns>The actual number of bytes skipped.</returns>
        </member>
        <member name="P:Encog.Parse.PeekableInputStream.CanRead">
            <summary>
            Specifies that the stream can read.
            </summary>
        </member>
        <member name="P:Encog.Parse.PeekableInputStream.CanWrite">
            <summary>
            Specifies that the stream cannot write.
            </summary>
        </member>
        <member name="P:Encog.Parse.PeekableInputStream.CanSeek">
            <summary>
            Specifies that the stream cannot seek.
            </summary>
        </member>
        <member name="P:Encog.Parse.PeekableInputStream.Length">
            <summary>
            Specifies that the stream cannot determine its length.
            </summary>
        </member>
        <member name="P:Encog.Parse.PeekableInputStream.Position">
            <summary>
            Specifies that the stream cannot determine its position.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.ZAxis.OutputFieldZAxis">
            <summary>
            Both the multiplicative and z-axis normalization types allow a group of 
            outputs to be adjusted so that the "vector length" is 1.  Both go about it
            in different ways.  Certain types of neural networks require a vector length 
            of 1.
            
            Z-Axis normalization is usually a better choice than multiplicative.    
            However, multiplicative can perform better than Z-Axis when all of the 
            values are near zero most of the time.  This can cause the "synthetic value"
            that z-axis uses to dominate and skew the answer.
            
             Z-Axis gets its name from 3D computer graphics, where there is a Z-Axis
             extending from the plane created by the X and Y axes.  It has nothing to 
             do with z-scores or the z-transform of signal theory.
             
             To implement Z-Axis normalization a scaling factor must be created to multiply
             each of the inputs against.  Additionally, a synthetic field must be added.
             It is very important that this synthetic field be added to any z-axis
             group that you might use.  The synthetic field is represented by the
             OutputFieldZAxisSynthetic class.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxis.#ctor(Encog.Normalize.Output.IOutputFieldGroup,Encog.Normalize.Input.IInputField)">
            <summary>
            Construct a ZAxis output field.
            </summary>
            <param name="group">The group this field belongs to.</param>
            <param name="field">The input field this is based on.</param>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxis.Calculate(System.Int32)">
            <summary>
            Calculate the current value for this field. 
            </summary>
            <param name="subfield">Ignored, this field type does not have subfields.</param>
            <returns>The current value for this field.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.ZAxis.OutputFieldZAxis.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.ZAxis.OutputFieldZAxis.SubfieldCount">
            <summary>
            The subfield count, which is one, as this field type does not
            have subfields.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.Nominal.NominalItem">
            <summary>
            A nominal item.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.NominalItem.low">
            <summary>
            The low value for the range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.NominalItem.high">
            <summary>
            The high value for the range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.NominalItem.inputField">
            <summary>
            The input field used to verify against the range.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.NominalItem.#ctor">
            <summary>
            Construct a empty range item.  Used mainly for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.NominalItem.#ctor(Encog.Normalize.Input.IInputField,System.Double,System.Double)">
            <summary>
            Create a nominal item.
            </summary>
            <param name="inputField">The field that this item is based on.</param>
            <param name="high">The high value.</param>
            <param name="low">The low value.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.NominalItem.BeginRow">
            <summary>
            Begin a row.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.NominalItem.IsInRange">
            <summary>
            Determine if the specified value is in range.
            </summary>
            <returns>True if this item is within range.</returns>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.NominalItem.High">
            <summary>
            The high value.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.NominalItem.InputField">
            <summary>
            The input field value.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.NominalItem.Low">
            <summary>
            The low value.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.IPropagationMethod">
            <summary>
            Defines the specifics to one of the propagation methods. The individual ways
            that each of the propagation methods uses to modify the weight and] threshold
            matrix are defined here.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.IPropagationMethod.CalculateError(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Calculate the error between these two levels.
            </summary>
            <param name="output">The output to the "to level".</param>
            <param name="fromLevel">The from level.</param>
            <param name="toLevel">The target level.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.IPropagationMethod.Init(Encog.Neural.Networks.Training.Propagation.PropagationUtil)">
            <summary>
            Init with the specified propagation object.
            </summary>
            <param name="propagation">The propagation object that this method will
            be used with.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.IPropagationMethod.Learn">
            <summary>
            Apply the accumulated deltas and learn.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper">
            <summary>
            Simple class used by the neural simulated annealing.  This
            class is a subclass of the basic SimulatedAnnealing class.  The
            It is used by the actual NeuralSimulatedAnnealing class, which
            subclasses BasicTraining.  This class is mostly necessary due
            to the fact that NeuralSimulatedAnnealing can't subclass BOTH
            SimulatedAnnealing and Train, because multiple inheritance is
            not supported.
            </summary>
        </member>
        <member name="T:Encog.Solve.Anneal.SimulatedAnnealing`1">
            <summary>
            The basis for the simulated annealing method.
            </summary>
            <typeparam name="UNIT_TYPE"></typeparam>
        </member>
        <member name="F:Encog.Solve.Anneal.SimulatedAnnealing`1.startTemperature">
            <summary>
            The starting temperature.
            </summary>
        </member>
        <member name="F:Encog.Solve.Anneal.SimulatedAnnealing`1.stopTemperature">
            <summary>
            The ending temperature.
            </summary>
        </member>
        <member name="F:Encog.Solve.Anneal.SimulatedAnnealing`1.cycles">
            <summary>
            The number of cycles that will be used, per iteration.
            </summary>
        </member>
        <member name="F:Encog.Solve.Anneal.SimulatedAnnealing`1.error">
            <summary>
            The current error.
            </summary>
        </member>
        <member name="F:Encog.Solve.Anneal.SimulatedAnnealing`1.temperature">
            <summary>
            The current temperature.
            </summary>
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.DetermineError">
            Subclasses should provide a method that evaluates the error for the
            current solution. Those solutions with a lower error are better.
            
            @return Return the error, as a percent.
            @throws NeuralNetworkError
                        Should be thrown if any sort of error occurs.
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.GetArray">
            Subclasses must provide access to an array that makes up the solution.
            
            @return An array that makes up the solution.
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.Iteration">
            Called to perform one cycle of the annealing process.
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.GetArrayCopy">
            <summary>
            Get a copy of the array.
            </summary>
            <returns>The new array copy.</returns>
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.PutArray(`0[])">
            <summary>
            Use the specified array.
            </summary>
            <param name="array">The array to use.</param>
        </member>
        <member name="M:Encog.Solve.Anneal.SimulatedAnnealing`1.Randomize">
            <summary>
            Randomize the values.
            </summary>
        </member>
        <member name="P:Encog.Solve.Anneal.SimulatedAnnealing`1.StartTemperature">
            <summary>
            The starting temperature.
            </summary>
        </member>
        <member name="P:Encog.Solve.Anneal.SimulatedAnnealing`1.StopTemperature">
            <summary>
            The ending temperature.
            </summary>
        </member>
        <member name="P:Encog.Solve.Anneal.SimulatedAnnealing`1.Cycles">
            <summary>
            The number of cycles that will be used, per iteration.
            </summary>
        </member>
        <member name="P:Encog.Solve.Anneal.SimulatedAnnealing`1.Error">
            <summary>
            The current error.
            </summary>
        </member>
        <member name="P:Encog.Solve.Anneal.SimulatedAnnealing`1.Temperature">
            <summary>
            The current temperature.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.owner">
            <summary>
            The class that this class should report to.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.#ctor(Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealing)">
            <summary>
            Constructs this object.
            </summary>
            <param name="owner">The owner of this class, that recieves all messages.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.DetermineError">
            <summary>
            Used to pass the determineError call on to the parent object.
            </summary>
            <returns>The error returned by the owner.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.GetArray">
            <summary>
            Used to pass the getArray call on to the parent object.
            </summary>
            <returns>The array returned by the owner.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.GetArrayCopy">
            <summary>
            Used to pass the getArrayCopy call on to the parent object.
            </summary>
            <returns>The array copy created by the owner.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.PutArray(System.Double[])">
            <summary>
            Used to pass the putArray call on to the parent object.
            </summary>
            <param name="array">The array</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Anneal.NeuralSimulatedAnnealingHelper.Randomize">
            <summary>
            Used to pass the randomize call on to the partent object.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.HopfieldLogic">
            <summary>
            Provides the neural logic for an Hopfield type network.  See HopfieldPattern
            for more information on this type of network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.HopfieldLogic.AddPattern(Encog.Neural.Data.INeuralData)">
            <summary>
            Train the neural network for the specified pattern. The neural network
            can be trained for more than one pattern. To do this simply call the
            train method more than once.
            </summary>
            <param name="pattern">The pattern to train for.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.HopfieldLogic.ConvertHopfieldMatrix(Encog.Matrix.Matrix)">
            <summary>
            Update the Hopfield weights after training.
            </summary>
            <param name="delta">The amount to change the weights by.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.HopfieldLogic.Run">
            <summary>
            Perform one Hopfield iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.HopfieldLogic.RunUntilStable(System.Int32)">
            <summary>
            Run the network until it becomes stable and does not change from
            more runs.
            </summary>
            <param name="max">The maximum number of cycles to run before giving up.</param>
            <returns>The number of cycles that were run.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.ART1Logic">
            <summary>
            Provides the neural logic for an ART1 type network.  See ART1Pattern
            for more information on this type of network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.ARTLogic">
            <summary>
            Neural logic for all ART type networks.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_A1">
            <summary>
            Neural network property, the A1 parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_B1">
            <summary>
            Neural network property, the B1 parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_C1">
            <summary>
            Neural network property, the C1 parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_D1">
            <summary>
            Neural network property, the D1 parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_L">
            <summary>
            Neural network property, the L parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.PROPERTY_VIGILANCE">
            <summary>
            Neural network property, the vigilance parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ARTLogic.network">
            <summary>
            The network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ARTLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ARTLogic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for the BasicNetwork class.
            </summary>
            <param name="input">The input to the network.</param>
            <param name="useHolder">The NeuralOutputHolder to use.</param>
            <returns>The output from the network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ARTLogic.Network">
            <summary>
            The network in use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.layerF1">
            <summary>
            The first layer, basically, the input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.layerF2">
            <summary>
            The second layer, basically, the output layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.synapseF1toF2">
            <summary>
            The connection from F1 to F2.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.synapseF2toF1">
            The connection from F2 to F1.
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.winner">
            <summary>
            Last winner in F2 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.a1">
            <summary>
            A parameter for F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.b1">
            <summary>
            B parameter for F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.c1">
            <summary>
            C parameter for F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.d1">
            <summary>
            D parameter for F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.l">
            <summary>
            L parameter for net.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.vigilance">
            <summary>
            The vigilance parameter.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.inhibitF2">
            <summary>
            Allows members of the F2 layer to be inhibited.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.noWinner">
            <summary>
            Tracks if there was no winner.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.outputF1">
            <summary>
            The output from the F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.ART1Logic.outputF2">
            <summary>
            The output from the F2 layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.Reset">
            <summary>
            Reset the weight matrix back to starting values.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.AdjustWeights">
            <summary>
            Adjust the weights for the pattern just presented.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.Compute(Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData,Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData)">
            <summary>
            Compute the output from the ART1 network.  This can be called directly
            or used by the BasicNetwork class.  Both input and output should be
            bipolar numbers.
            </summary>
            <param name="input">The input to the network.</param>
            <param name="output">The output from the network.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.ComputeF1(Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData)">
            <summary>
            Compute the output from the F1 layer.
            </summary>
            <param name="input">The input to the F1 layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.ComputeF2">
            <summary>
            Compute the output from the F2 layer. 
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.GetOutput(Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData)">
            <summary>
            Copy the output from the network to another object.
            </summary>
            <param name="output">The target object for the output from the network.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.Magnitude(Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData)">
            <summary>
            Get the magnitude of the specified input.
            </summary>
            <param name="input">The input to calculate the magnitude for.</param>
            <returns>The magnitude of the specified pattern.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.SetInput(Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData)">
            <summary>
            Set the input to the neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.ART1Logic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for the BasicNetwork class.
            </summary>
            <param name="input">The input to the network.</param>
            <param name="useHolder">The NeuralOutputHolder to use.</param>
            <returns>The output from the network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.Winner">
            <summary>
            The winning neuron.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.HasWinner">
            <summary>
            Does this network have a "winner"?
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.A1">
            <summary>
            The A1 parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.B1">
            <summary>
            The B1 parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.C1">
            <summary>
            The C1 parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.D1">
            <summary>
            The D1 parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.L">
            <summary>
            The L parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.ART1Logic.Vigilance">
            <summary>
            The vigilance for the network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.IContextClearable">
            <summary>
            Allows the clearContext method to be called.  If the layer has a context
            that can be cleared, it should support this interface.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.IContextClearable.ClearContext">
            <summary>
            Clear the context for this layer.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Union.UnionNeuralDataSet">
            <summary>
            A UnionNeuralDataSet is used to create a compound data set that is made
            up of other data sets.  The union set will iterate through all of the date
            of the subsets in the order that they were added to the union.  There
            are a number of uses for this sort of a dataset.  One is for processing
            extremely large SQL datasets.  You can break your query into multiple
            SQLNeuralDataSet objects and use the UnionNeuralDataSet to cause them
            to appear as one large dataset.  
            
            The UnionNeuralDataSet can also be used to combine several different
            dataset types into one.
            
            You must specify the ideal and input sizes.  All subsets must adhear
            to these sizes.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.ADD_ERROR">
            <summary>
            The error to report when the user attempts an ADD.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.REMOVE_ERROR">
            <summary>
            The error to report when the user attempts a remove.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.inputSize">
            <summary>
            The size of the input data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.idealSize">
            <summary>
            The size of the ideal data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.subsets">
            <summary>
            The subsets that this union is made up of.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.enumerators">
            <summary>
            The enumerators that have been created so far for this data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Not supported.  Will throw an error.
            </summary>
            <param name="data1">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Not supported. Will throw an error.
            </summary>
            <param name="inputData">Not used.</param>
            <param name="idealData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Not supported. Will throw an error.
            </summary>
            <param name="inputData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.Close">
            <summary>
            Close the dataset.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.GetEnumerator">
            <summary>
            Obtain an enumerator to access the collection of data.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the union data set.  All subsets must have input and
            ideal sizes to match the parameters specified to this constructor.
            For unsupervised training specify 0 for idealSize.
            </summary>
            <param name="inputSize">The array size of the input data.</param>
            <param name="idealSize">The array size of the ideal data.</param>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.AddSubset(Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Add a subset.  This method will validate that the input and
            ideal sizes are correct.
            </summary>
            <param name="set">The subset to add.</param>
        </member>
        <member name="P:Encog.Neural.Data.Union.UnionNeuralDataSet.IdealSize">
            <summary>
            The array size of the ideal data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Union.UnionNeuralDataSet.InputSize">
            <summary>
            The array size of the input data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Union.UnionNeuralDataSet.Subsets">
            <summary>
            A collection of the subsets that make up this union.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator">
            <summary>
            The enumerator used to access the UnionNeuralDataSet.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.currentSet">
            <summary>
            The next subset.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.currentEnumerator">
            <summary>
            An enumerator to the current subset.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.owner">
            <summary>
            The owner of this enumerator.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.#ctor(Encog.Neural.Data.Union.UnionNeuralDataSet)">
            <summary>
            Construct the union enumerator.  This sets the current set
            and current enumerator.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.MoveNext">
            <summary>
            Determine if there is more data to be read from this enumerator.
            </summary>
            <returns>True if there is more data to read.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.Dispose">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.Reset">
            <summary>
            Reset to the beginning.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.Current">
            <summary>
            Obtain the current piece of data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Union.UnionNeuralDataSet.UnionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationBiPolar">
            <summary>
            BiPolar activation function. This will scale the neural data into the bipolar
            range. Greater than zero becomes 1, less than or equal to zero becomes -1.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationBiPolar.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationBiPolar.Clone">
            <summary>
            The object cloned.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationBiPolar.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationBiPolar.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationBiPolar.HasDerivative">
            <summary>
            Return false, bipolar has no derivative.
            </summary>
        </member>
        <member name="T:Encog.Matrix.BiPolarUtil">
            This class contains a number of utility methods used to work
            with bipolar numbers. A bipolar number is another way to represent binary
            numbers. The value of true is defined to be one, where as false is defined to
            be negative one.
            <summary>
            Utility class for converting between bipolar and regular numbers.
            </summary>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Bipolar2double(System.Boolean)">
            <summary>
            Convert binary to bipolar, true is 1 and false is -1.
            </summary>
            <param name="b">The binary value.</param>
            <returns>The bipolar value.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Bipolar2double(System.Boolean[])">
            <summary>
            Convert a boolean array to bipolar, true is 1 and false is -1.
            </summary>
            <param name="b">The binary array to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Bipolar2double(System.Boolean[][])">
            <summary>
            Convert a 2D boolean array to bipolar, true is 1 and false is -1.
            </summary>
            <param name="b">The 2D array to convert.</param>
            <returns>A bipolar array.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Double2bipolar(System.Double)">
            <summary>
            Convert biploar to boolean, true is 1 and false is -1.
            </summary>
            <param name="d">A bipolar value.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Double2bipolar(System.Double[])">
            <summary>
            Convert a bipolar array to a boolean array, true is 1 and false is -1.
            </summary>
            <param name="d">A bipolar array.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.Double2bipolar(System.Double[][])">
            <summary>
            Convert a 2D bipolar array to a boolean array, true is 1 and false is -1.
            </summary>
            <param name="d">A 2D bipolar array.</param>
            <returns>A 2D boolean array.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.NormalizeBinary(System.Double)">
            <summary>
            Normalize a binary number.  Greater than 0 becomes 1, zero and below are false.
            </summary>
            <param name="d">A binary number in a double.</param>
            <returns>A double that will be 0 or 1.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.ToBinary(System.Double)">
            <summary>
            Convert a single number from bipolar to binary.
            </summary>
            <param name="d">a bipolar number.</param>
            <returns>A binary number.</returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.ToBiPolar(System.Double)">
            <summary>
            Convert a number to bipolar.
            </summary>
            <param name="d">A binary number.</param>
            <returns></returns>
        </member>
        <member name="M:Encog.Matrix.BiPolarUtil.ToNormalizedBinary(System.Double)">
            <summary>
            Normalize a number and convert to binary.
            </summary>
            <param name="d">A bipolar number.</param>
            <returns>A binary number stored as a double</returns>
        </member>
        <member name="T:Encog.Encog">
            <summary>
            Main Encog class, does little more than provide version information.
            Also used to hold the ORM session that Encog uses to work with
            Hibernate.
            </summary>
        </member>
        <member name="F:Encog.Encog.DEFAULT_PRECISION">
            <summary>
            The default precision to use for compares.
            </summary>
        </member>
        <member name="F:Encog.Encog.ENCOG_VERSION">
            <summary>
            The version of the Encog JAR we are working with. Given in the form
            x.x.x.
            </summary>
        </member>
        <member name="F:Encog.Encog.VERSION">
            <summary>
            The current engog version, this should be read from the properties.
            </summary>
        </member>
        <member name="F:Encog.Encog.FILE_VERSION">
            <summary>
            The current engog file version, this should be read from the properties.
            </summary>
        </member>
        <member name="F:Encog.Encog.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Encog.ENCOG_FILE_VERSION">
            <summary>
            The encog file version. This determines of an encog file can be read.
            This is simply an integer, that started with zero and is incramented each
            time the format of the encog data file changes.
            </summary>
        </member>
        <member name="F:Encog.Encog.instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="F:Encog.Encog.properties">
            <summary>
            Get the properties as a Map.
            </summary>
        </member>
        <member name="M:Encog.Encog.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="P:Encog.Encog.Instance">
            <summary>
            Get the instance to the singleton.
            </summary>
        </member>
        <member name="P:Encog.Encog.Properties">
            <summary>
            The Encog properties.  Contains version information.
            </summary>
        </member>
        <member name="T:Encog.Bot.DataUnits.DataUnit">
            <summary>
            Data units are very abstract pieces of data that the browser processes.
            </summary>
        </member>
        <member name="T:Encog.Util.Logging.DumpMatrix">
            <summary>
            A utility for writing matrixes to the log.
            </summary>
        </member>
        <member name="F:Encog.Util.Logging.DumpMatrix.MAX_PRECIS">
            <summary>
            Maximum precision.
            </summary>
        </member>
        <member name="M:Encog.Util.Logging.DumpMatrix.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.Logging.DumpMatrix.DumpArray(System.Double[])">
            <summary>
            Dump an array of numbers to a string.
            </summary>
            <param name="d">The array to dump.</param>
            <returns>The array as a string.</returns>
        </member>
        <member name="M:Encog.Util.Logging.DumpMatrix.DumpMatrixString(Encog.Matrix.Matrix)">
            <summary>
            Dump a matrix to a string.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix as a string.</returns>
        </member>
        <member name="T:Encog.Util.ErrorCalculation">
            <summary>
            ErrorCalculation: An implementation of root mean square (RMS) error
            calculation. This class is used by nearly every neural network in this book
            to calculate error.
            </summary>
        </member>
        <member name="F:Encog.Util.ErrorCalculation.globalError">
            <summary>
            The current error level.
            </summary>
        </member>
        <member name="F:Encog.Util.ErrorCalculation.setSize">
            <summary>
            The size of a training set.
            </summary>
        </member>
        <member name="M:Encog.Util.ErrorCalculation.CalculateRMS">
            <summary>
            Returns the root mean square error for a complete training set.
            </summary>
            <returns>The current error for the neural network.</returns>
        </member>
        <member name="M:Encog.Util.ErrorCalculation.Reset">
            <summary>
            Reset the error accumulation to zero.
            </summary>
        </member>
        <member name="M:Encog.Util.ErrorCalculation.UpdateError(System.Double[],System.Double[])">
            <summary>
            Called to update for each number that should be checked.
            </summary>
            <param name="actual">The actual number.</param>
            <param name="ideal">The ideal number.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.GenericPersistor">
            <summary>
            An Encog perisistor that can be used with any object that supports the Encog
            generic persistence. Simply provide the class to the constructor, and return
            an instance of this object in the getPersistor call.
            
            When loading an object, Encog will attempt to use this class if no other
            suitable persistor can be found.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.GenericPersistor.clazz">
            <summary>
            The class that this persistor is used with.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.GenericPersistor.#ctor(System.Type)">
            <summary>
            Construct a generic persistor for the specified class.
            </summary>
            <param name="clazz">The class to construct a persistor for.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.GenericPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load from the specified node.
            </summary>
            <param name="xmlIn">The node to load from.</param>
            <returns>The EncogPersistedObject that was loaded.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.GenericPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified object.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML object.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationGaussianPersistor">
            <summary>
            The Encog persistor used to persist the ActivationGaussian class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.ActivationGaussianPersistor.ATTRIBUTE_CENTER">
            <summary>
            The center attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.ActivationGaussianPersistor.ATTRIBUTE_PEAK">
            <summary>
            The peak attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.ActivationGaussianPersistor.ATTRIBUTE_WIDTH">
            <summary>
            The width attribute.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationGaussianPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationGaussianPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Parse.Tags.Read.ReadXML">
            <summary>
            Parse XML data.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.Read.ReadTags">
            <summary>
            Base class used to read tags.  This base class is used by both the
            XML and HTML parsing.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.CHAR_BULLET">
            <summary>
            The bullet character.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.CHAR_TRADEMARK">
            <summary>
            The bullet character.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.MAX_LENGTH">
            <summary>
            Maximum length string to read.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.charMap">
            <summary>
            A mapping of certain HTML encoded values to their actual
            character values.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.source">
            <summary>
            The stream that we are parsing from.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.tag">
            <summary>
            The current HTML tag. Access this property if the read function returns
            0.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.lockedEndTag">
            <summary>
            Are we locked, looking for an end tag?  Such as the end of a
            comment?
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadTags.insertEndTag">
            <summary>
            Does a "fake" end-tag need to be added, because of a compound
            tag (i.e. <br/>)?  If so, this will hold a string for that tag.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.#ctor(System.IO.Stream)">
            <summary>
            The constructor should be passed an InputStream that we will parse from.
            </summary>
            <param name="istream">A stream to parse from.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.EatWhitespace">
            <summary>
            Remove any whitespace characters that are next in the InputStream.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.IsIt(System.String,System.Boolean)">
            <summary>
            Checks to see if the next tag is the tag specified.
            </summary>
            <param name="name">The name of the tag desired.</param>
            <param name="start">True if a starting tag is desired.</param>
            <returns>True if the next tag matches these criteria.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ParseAttributeName">
            <summary>
            Parse an attribute name, if one is present.
            </summary>
            <returns>Return the attribute name, or null if none present.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ParseSpecialCharacter">
            <summary>
            Parse any special characters
            </summary>
            <returns>The character that was parsed.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ParseString">
            <summary>
            Called to parse a double or single quote string.
            </summary>
            <returns>The string parsed.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ParseTag">
            <summary>
            Called when a tag is detected. This method will parse the tag.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.PeekEndTag(System.String)">
            <summary>
            Check to see if the ending tag is present.
            </summary>
            <param name="name">The type of end tag being sought.</param>
            <returns>True if the ending tag was found.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.Read">
            <summary>
            Read a single character from the HTML source, if this function returns
            zero(0) then you should call getTag to see what tag was found. Otherwise
            the value returned is simply the next character found.
            </summary>
            <returns>The character read, or zero if there is an HTML tag. If zero is
            returned, then call getTag to get the next tag.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ReadToTag">
            <summary>
            Read until we reach the next tag.
            </summary>
            <returns>True if a tag was found, false on EOF.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadTags.ToString">
            <summary>
            Returns this object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Parse.Tags.Read.ReadTags.LastTag">
            <summary>
            Return the last tag found, this is normally called just after the read
            function returns a zero.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Read.ReadXML.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadXML.#ctor(System.IO.Stream)">
            <summary>
            Construct an XML reader.
            </summary>
            <param name="istream">The input stream to read from.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadXML.FindTag(System.String,System.Boolean)">
            <summary>
            Advance until the specified tag is found.
            </summary>
            <param name="name">The name of the tag we are looking for.</param>
            <param name="beginTag">True if this is a begin tage, false otherwise.</param>
            <returns>True if the tag was found.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadXML.ReadIntToTag">
            <summary>
            Read an integer that is contained between the current position, and the
            next tag.
            </summary>
            <returns>The integer that was found.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadXML.ReadPropertyBlock">
            <summary>
            Read all property data until an end tag, which corrisponds to the current
            tag, is found. The properties found will be returned in a map.
            </summary>
            <returns>The properties found.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadXML.ReadTextToTag">
            <summary>
            Read all text between the current position and the next tag.
            </summary>
            <returns>The string that was read.</returns>
        </member>
        <member name="T:Encog.NullStatusReportable">
            <summary>
            A report object that does nothing.
            </summary>
        </member>
        <member name="T:Encog.IStatusReportable">
            <summary>
            Used to report status updates for some Encog tasks.
            </summary>
        </member>
        <member name="M:Encog.IStatusReportable.Report(System.Int32,System.Int32,System.String)">
            <summary>
            Called when an Encog job changes status.
            </summary>
            <param name="total">Total amount of work to be done.</param>
            <param name="current">Work currently being processed.</param>
            <param name="message">The current message.</param>
        </member>
        <member name="M:Encog.NullStatusReportable.Report(System.Int32,System.Int32,System.String)">
            <summary>
            Simply ignore any status reports.
            </summary>
            <param name="total">Not used.</param>
            <param name="current">Not used.</param>
            <param name="message">Not used.</param>
        </member>
        <member name="T:Encog.Normalize.Output.Mapped.OutputFieldEncode">
            <summary>
            An encoded output field.  This allows ranges of output values to be
            mapped to specific values.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.OutputFieldEncode.sourceField">
            <summary>
            The source field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.OutputFieldEncode.catchAll">
            <summary>
            The catch all value, if nothing matches, then use this value.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.OutputFieldEncode.ranges">
            <summary>
            The ranges.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.OutputFieldEncode.#ctor(Encog.Normalize.Input.IInputField)">
            <summary>
            Construct an encoded field.
            </summary>
            <param name="sourceField">The field that this is based on.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.OutputFieldEncode.addRange(System.Double,System.Double,System.Double)">
            <summary>
            Add a ranged mapped to a value.
            </summary>
            <param name="low">The low value for the range.</param>
            <param name="high">The high value for the range.</param>
            <param name="value">The value that the field should produce for this range.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.OutputFieldEncode.Calculate(System.Int32)">
            <summary>
            Calculate the value for this field.
            </summary>
            <param name="subfield">Not used.</param>
            <returns>Return the value for the range the input falls within, or return
            the catchall if nothing matches.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.OutputFieldEncode.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.OutputFieldEncode.SourceField">
            <summary>
            The source field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.OutputFieldEncode.SubfieldCount">
            <summary>
            Return 1, no subfield supported.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.OutputFieldEncode.CatchAll">
            <summary>
            The catch all value that is to be returned if none
            of the ranges match.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.PropagationLevel">
            <summary>
            Holds a level worth of information used by each of the propagation methods. A
            level is defined as all of the layers that feed a single next layer. In a
            pure feedforward neural network there will be only one layer per level.
            However, recurrent neural networks will contain multiple layers per level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.NeuronCount">
            <summary>
            The number of neurons on this level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.Layers">
            <summary>
            The layers that make up this level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.Outgoing">
            <summary>
            All outgoing synapses from this level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.Deltas">
            <summary>
            The differences between the actual and expected output for this
            level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.ThresholdGradents">
            <summary>
            The calculated threshold gradients for this level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.LastThresholdGradents">
            <summary>
            The last iteration's calculated threshold gradients.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.ThresholdDeltas">
            <summary>
            The deltas to be applied to the threshold values.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationLevel.Propagation">
            <summary>
            The propagation class that this level belongs to.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.#ctor(Encog.Neural.Networks.Training.Propagation.PropagationUtil,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Construct a propagation level.
            </summary>
            <param name="propagation">The propagation object that created this.</param>
            <param name="layer">The initial layer, others can be added later.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.#ctor(Encog.Neural.Networks.Training.Propagation.PropagationUtil,System.Collections.Generic.IList{Encog.Neural.Networks.Synapse.ISynapse})">
            <summary>
            Construct a propagation level with a list of outgoing synapses.
            </summary>
            <param name="propagation">The propagation object that created this.</param>
            <param name="outgoing">The outgoing synapses.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.AccumulateThresholdGradient(System.Int32,System.Double)">
            <summary>
            Call this method to accumulate the threshold gradients during
            a batch.
            </summary>
            <param name="index">The index of the gradient to modify.</param>
            <param name="value">The value to be added to the existing gradients.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.DeterminePreviousSynapses">
            <summary>
            Determine the previous synapses from this level.
            </summary>
            <returns>A list of the previous synapses.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.GetActual(System.Int32)">
            <summary>
            Get the actual output from the specified neuron.
            </summary>
            <param name="index">The neuron needed.</param>
            <returns>The actual output from that neuron.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationLevel.ToString">
            <summary>
            Convert object to string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralGeneticAlgorithm">
            <summary>
            Implements a genetic algorithm that allows a neural network to be trained
            using a genetic algorithm. This algorithm is for a neural network. The neural
            network is trained using training sets.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm">
            <summary>
            Implements a genetic algorithm that allows a feedforward neural network to be
            trained using a genetic algorithm. This algorithm is for a feed forward
            neural network.
            
            This class is somewhat undefined. If you wish to train the neural network 
            using training sets, you should use the TrainingSetNeuralGeneticAlgorithm 
            class. If you wish to use a cost function to train the neural network, 
            then implement a subclass of this one that properly calculates the cost.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.genetic">
            <summary>
            Simple helper class that implements the required methods to 
            implement a genetic algorithm.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.#ctor">
            <summary>
            Construct the training class.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.Iteration">
            <summary>
            Perform one training iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.Network">
            <summary>
            The network that is being trained.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.Genetic">
            <summary>
            
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.NeuralGeneticAlgorithmHelper">
            <summary>
            Very simple class that implements a genetic algorithm.
            </summary>
        </member>
        <member name="T:Encog.Solve.Genetic.GeneticAlgorithm`1">
            <summary>
            Implements a genetic algorithm. This is an abstract class.
            Other classes are provided in this book that use this base class to train
            neural networks or provide an answer to the traveling salesman problem.
            
            The genetic algorithm is also capable of using a thread pool to speed
            execution.
            </summary>
            <typeparam name="GENE_TYPE">The datatype of the gene.</typeparam>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.TIMEOUT">
            <summary>
            Threadpool timeout.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.populationSize">
            <summary>
            How many chromosomes should be created.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.mutationPercent">
            <summary>
            The percent that should mutate.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.percentToMate">
            <summary>
            What percent should be chosen to mate. They will choose partners from the
            entire mating population.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.matingPopulation">
            <summary>
            Percent of the population that the mating population chooses partners.
            from.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.preventRepeat">
            <summary>
            Should the same gene be prevented from repeating.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.cutLength">
            <summary>
            How much genetic material should be cut when mating.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.GeneticAlgorithm`1.chromosomes">
            <summary>
            The population.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.GeneticAlgorithm`1.Iteration">
            <summary>
            Modify the weight matrix and thresholds based on the last call to
            calcError.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.GeneticAlgorithm`1.SortChromosomes">
            <summary>
            Sort the chromosomes.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.Chromosomes">
            <summary>
            Return the entire population.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.CutLength">
            <summary>
            The cut length.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.MatingPopulation">
            <summary>
            The mating population percent.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.MutationPercent">
            <summary>
            The mutation percent.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.PercentToMate">
            <summary>
            The percent to mate.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.PopulationSize">
            <summary>
            The population size.
            </summary>
        </member>
        <member name="P:Encog.Solve.Genetic.GeneticAlgorithm`1.PreventRepeat">
            <summary>
            Should repeating genes be prevented.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.NeuralGeneticAlgorithmHelper.Error">
            <summary>
            The error from the last iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Genetic.NeuralGeneticAlgorithm.NeuralGeneticAlgorithmHelper.Network">
            <summary>
            Get the current best neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Genetic.TrainingSetNeuralGeneticAlgorithm.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Util.Randomize.IRandomizer,Encog.Neural.NeuralData.INeuralDataSet,System.Int32,System.Double,System.Double)">
            <summary>
            Construct a training object.
            </summary>
            <param name="network">The network to train.</param>
            <param name="randomizer">The randomizer to use to create new networks.</param>
            <param name="training">The training set.</param>
            <param name="populationSize">The population size.</param>
            <param name="mutationPercent">The mutation percent.</param>
            <param name="percentToMate">The percent to mate.</param>
        </member>
        <member name="T:Encog.Neural.Data.XML.XMLNeuralDataSet">
            <summary>
            A data source that reads XML files. This class is not memory based, so very
            large XML files can be used, without problem.
            
            The XML data is assumed to look something like below.  The names of the tags
            can be configured using the various properties on this object.
            
            &lt;DataSet&gt;
            &lt;pair&gt;
              &lt;input&gt;&lt;value&gt;0&lt;/value&gt;&lt;value&gt;0&lt;/value>&lt;/input&gt;
              &lt;ideal&gt;&lt;value&gt;0&lt;/value&gt;&lt;/ideal&gt;
            &lt;/pair&gt;
            &lt;pair&gt;
              &lt;input&gt;&lt;value&gt;1&lt;/value&gt;&lt;value&gt;0&lt;/value&gt;&lt;/input&gt;
              &lt;ideal&gt;&lt;value&gt;1&lt;/value&gt;&lt;/ideal&gt;
            &lt;/pair&gt;
            &lt;pair&gt;
              &lt;input&gt;&lt;value&gt;0&lt;/value&gt;&lt;value&gt;1&lt;/value&gt;&lt;/input&gt;
              &lt;ideal&gt;&lt;value&gt;1&lt;/value&gt;&lt;/ideal&gt;
            &lt;/pair&gt;
            &lt;pair&gt;
              &lt;input&gt;&lt;value&gt;1&lt;/value&gt;&lt;value&gt;1&lt;/value&gt;&lt;/input&gt;
              &lt;ideal&gt;&lt;value&gt;0&lt;/value&gt;&lt;/ideal&gt;
            &lt;/pair&gt;
            &lt;/DataSet&gt;
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.ADD_NOT_SUPPORTED">
            <summary>
            Error Message: adds are not supported.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.filename">
            <summary>
            The file name to read.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.pairXML">
            <summary>
            The XML that indicates that a pair is about to start.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.inputXML">
            <summary>
            The XML that indicates that input data is about to start.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.idealXML">
            <summary>
             XMl that indicates that ideal data is about to start.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.valueXML">
            <summary>
            XML that indicates that a numeric value is about to start.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.inputSize">
            <summary>
            The input data size.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.idealSize">
            <summary>
            The ideal data size.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.iterators">
            <summary>
            A collection of iterators that have been created.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Construct an XML neural data set.
            </summary>
            <param name="filename">The filename to read.</param>
            <param name="inputSize">The input size.</param>
            <param name="idealSize">The ideal size. Zero for unsupervised.</param>
            <param name="pairXML">The XML that starts a pair.</param>
            <param name="inputXML">The XML that starts input.</param>
            <param name="idealXML">The XML that starts ideal.</param>
            <param name="valueXML">The XML that starts values.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Adds are not supported, this is a read only data set.
            </summary>
            <param name="data1">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Adds are not supported, this is a read only data set.
            </summary>
            <param name="inputData">Not used.</param>
            <param name="idealData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Adds are not supported, this is a read only data set.
            </summary>
            <param name="inputData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Close">
            <summary>
            Close the XML data source.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.CreatePersistor">
            <summary>
            Create a persistor to load/save Encog objects.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.Encog#Persist#IEncogPersistedObject#Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.System#ICloneable#Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.GetEnumerator">
            <summary>
            Get an enumerator to access the data with.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to access the data with.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.Filename">
            <summary>
            The XML filename.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.IdealSize">
            <summary>
            The ideal size.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.IdealXML">
            <summary>
            The XML tag for ideal.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.InputSize">
            <summary>
            The input size.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.InputXML">
            <summary>
            The XML tag for input.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.PairXML">
            <summary>
            XML tag for pairs.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.ValueXML">
            <summary>
            The XML tag for values.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.Description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.Enumerators">
            <summary>
            Get a list of enumerators in use.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator">
            <summary>
            An enumerator designed to read from XML files.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.file">
            <summary>
            The XML file being read.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.reader">
            <summary>
            A reader for the XML file.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.nextPair">
            <summary>
            The data pair just read.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.#ctor(Encog.Neural.Data.XML.XMLNeuralDataSet)">
            <summary>
            Construct an iterator to read the XML data.
            </summary>
            <param name="set">The dataset that owns this enumerator.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.HasNext">
            <summary>
            Is there any more data to read?
            </summary>
            <returns>True if there is more data to read.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.InvalidError">
            <summary>
            Internal function called by several functions to display an error
            that indicates that the XML is not valid.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.ObtainNext">
            <summary>
            Internal function to obtain the next training set item.
            </summary>
            <returns>True if one was found.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.InternalCurrent">
            <summary>
            Internal function to get the current pair.
            </summary>
            <returns>The current pair.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.Reset">
            <summary>
            Reset back to tbe beginning of the file.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.XMLNeuralDataSet.XMLNeuralEnumerator.Current">
            <summary>
            The current data pair.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet">
            <summary>
            A dataset based on a SQL query. This is not a memory based dataset, so it can
            handle very large datasets without a memory issue. and can handle very large
            datasets.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.inputSize">
            <summary>
            What is the size of the input data?
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.idealSize">
            <summary>
            What is the size of the ideal data?
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.connection">
            <summary>
            The database connection.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.statement">
            <summary>
            The SQL statement being used.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create a SQL neural data set.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="inputSize">The size of the input data being read.</param>
            <param name="idealSize">The size of the ideal output data being read.</param>
            <param name="connectString">The connection string.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Not used.
            </summary>
            <param name="data1">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Not used.
            </summary>
            <param name="inputData">Not used.</param>
            <param name="idealData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Not used.
            </summary>
            <param name="inputData">Not used.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.Close">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.Statement">
            <summary>
            The statement being used.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.IdealSize">
            <summary>
            The size of the ideal data, zero if unsupervised.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.InputSize">
            <summary>
            The size of the input data.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator">
            <summary>
            Enumerator for the SQLNeuralDataSet.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.results">
            <summary>
            Holds results from the SQL query.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.#ctor(Encog.Neural.NeuralData.SQL.SQLNeuralDataSet)">
            <summary>
            Construct the SQLNeuralEnumerator.
            </summary>
            <param name="owner">The owner of the enumerator.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.MoveNext">
            <summary>
            Move to the next object.
            </summary>
            <returns>True if there is a next object.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.Reset">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.Current">
            <summary>
            The current data item.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.SQL.SQLNeuralDataSet.SQLNeuralEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Obtain the current item.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.NeuralDataError">
            <summary>
            The base Encog neural data error.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.NeuralDataError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.NeuralDataError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.NeuralData.INeuralDataPair">
            <summary>
            A neural data pair holds both the input and ideal data.  If this
            is an unsupervised data element, then only input is provided.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.INeuralDataPair.Input">
            <summary>
            The input that the neural network.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.INeuralDataPair.Ideal">
            <summary>
            The ideal data that the neural network should produce
            for the specified input.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.INeuralDataPair.IsSupervised">
            <summary>
            True if this training pair is supervised.  That is, it has 
            both input and ideal data.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationLinear">
            <summary>
            The Linear layer is really not an activation function at all. The input is
            simply passed on, unmodified, to the output. This activation function is
            primarily theoretical and of little actual use. Usually an activation
            function that scales between 0 and 1 or -1 and 1 should be used.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLinear.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLinear.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLinear.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLinear.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationLinear.HasDerivative">
            <summary>
            Return false, linear has no derivative.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Div">
            <summary>
            A document range that represents the beginning and ending DIV tag, as well as
            any tages embedded between them.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Div.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct a range to hold the DIV tag.
            </summary>
            <param name="source">The web page this range was found on.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Div.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="T:Encog.Bot.BotUtil">
            <summary>
            Utility class for bots.
            </summary>
        </member>
        <member name="F:Encog.Bot.BotUtil.BUFFER_SIZE">
            <summary>
            How much data to read at once.
            </summary>
        </member>
        <member name="F:Encog.Bot.BotUtil.LOGGER">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Bot.BotUtil.ExtractFromIndex(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method is very useful for grabbing information from a HTML page.
            </summary>
            <param name="str">The string to search.</param>
            <param name="token1">The text, or tag, that comes before the desired text</param>
            <param name="token2">The text, or tag, that comes after the desired text</param>
            <param name="index">Index in the string to start searching from.</param>
            <param name="occurence">What occurence.</param>
            <returns>The contents of the URL that was downloaded.</returns>
        </member>
        <member name="M:Encog.Bot.BotUtil.Extract(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method is very useful for grabbing information from a HTML page.
            </summary>
            <param name="str">The string to search.</param>
            <param name="token1">The text, or tag, that comes before the desired text.</param>
            <param name="token2">The text, or tag, that comes after the desired text.</param>
            <param name="index">Which occurrence of token1 to use, 1 for the first.</param>
            <returns>The contents of the URL that was downloaded.</returns>
        </member>
        <member name="M:Encog.Bot.BotUtil.LoadPage(System.Uri)">
            <summary>
            Load the specified web page into a string.
            </summary>
            <param name="url">The url to load.</param>
            <returns>The web page as a string.</returns>
        </member>
        <member name="M:Encog.Bot.BotUtil.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.YahooSearch.Search(System.String)">
            <summary>
            Perform a Yahoo search.
            </summary>
            <param name="searchFor">What are we searching for.</param>
            <returns>The URLs that contain the specified item.</returns>
        </member>
        <member name="T:Encog.Util.MathUtil.MathConst">
            <summary>
            Math constants needed by Encog.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.MathConst.EULERS_NUMBER">
            <summary>
            Euler's number.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.MathConst.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="T:Encog.Util.DownSample.IDownSample">
            <summary>
            A class that is able to downsample an image.
            </summary>
        </member>
        <member name="M:Encog.Util.DownSample.IDownSample.DownSample(System.Int32,System.Int32)">
            <summary>
            Downsample the image.  This can be called multiple times.
            </summary>
            <param name="height">The height to downsample to.</param>
            <param name="width">The width to downsample to.</param>
            <returns>The downsampled array from the image.</returns>
        </member>
        <member name="M:Encog.Util.DownSample.IDownSample.ProcessImage(System.Drawing.Bitmap)">
            <summary>
            Process the specified image.  It will not be downsampled until the
            DownSample method is called.
            </summary>
            <param name="image">The image to downsample.</param>
        </member>
        <member name="M:Encog.Util.DownSample.IDownSample.FindBounds">
            <summary>
            If you would like to trim off whitespace, this method will find the
            boundaries.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.DownsampleImage">
            <summary>
            The bitmap to downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.RatioX">
            <summary>
            The x-ratio for the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.RatioY">
            <summary>
            The y-ratio for the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.ImageHeight">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.ImageWidth">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.DownSampleLeft">
            <summary>
            The left boundary of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.DownSampleRight">
            <summary>
            The right boundary of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.DownSampleTop">
            <summary>
            The top boundary of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.IDownSample.DownSampleBottom">
            <summary>
            The bottom boundary of the downsample.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.ObjectMapper">
            <summary>
            Used to map objects to reference numbers. This is where reference numbers are
            resolved. This class is used by Encog generic persistence.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.ObjectMapper.objectMap">
            <summary>
            A map from reference numbers to objects.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.ObjectMapper.list">
            <summary>
            A list of all of the field mappings.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectMapper.AddFieldMapping(System.Int32,System.Reflection.FieldInfo,System.Object)">
            <summary>
            Add a field mapping to be resolved later. This builds a list of
            references to be resolved later when the resolve method is called.
            </summary>
            <param name="reff">The reference number.</param>
            <param name="field">The field to map.</param>
            <param name="target">The target object that holds the field.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectMapper.AddObjectMapping(System.Int32,System.Object)">
            <summary>
            Add an object mapping to be resolved later.
            </summary>
            <param name="reff">The object reference.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectMapper.Clear">
            <summary>
            Clear the map and reference list.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.ObjectMapper.Resolve">
            <summary>
            Resolve all references and place the correct objects.
            </summary>
        </member>
        <member name="T:Encog.Persist.Location.ResourcePersistence">
            <summary>
            A location that allows Encog objects to be read from a resource. This
            location only supports read operations, so the Encog resource is usually
            created first as a file and then embedded in the application as a resource.
            </summary>
        </member>
        <member name="F:Encog.Persist.Location.ResourcePersistence.resource">
            <summary>
            The name of the resource to read from.
            </summary>
        </member>
        <member name="F:Encog.Persist.Location.ResourcePersistence.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.ResourcePersistence.#ctor(System.String)">
            <summary>
            Construct a location to read from the specified resource. 
            </summary>
            <param name="resource">The resource to read from.</param>
        </member>
        <member name="M:Encog.Persist.Location.ResourcePersistence.CreateStream(System.IO.FileMode)">
            <summary>
            Create a stream to read the resource.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:Encog.Persist.Location.ResourcePersistence.Delete">
            <summary>
            Delete operations are not supported for resource persistence.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.ResourcePersistence.Exists">
            <summary>
            Exist is not supported for resource persistence.
            </summary>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Encog.Persist.Location.ResourcePersistence.RenameTo(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Rename is not supported for resource persistence.
            </summary>
            <param name="toLocation">Not used.</param>
        </member>
        <member name="T:Encog.Persist.Location.FilePersistence">
            <summary>
            A persistence location based on a file.
            </summary>
        </member>
        <member name="F:Encog.Persist.Location.FilePersistence.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Persist.Location.FilePersistence.file">
            <summary>
            The file to persist to/from.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.FilePersistence.#ctor(System.String)">
            <summary>
            Construct a persistance location based on a file.
            </summary>
            <param name="file">The file to use.</param>
        </member>
        <member name="M:Encog.Persist.Location.FilePersistence.CreateStream(System.IO.FileMode)">
            <summary>
            Create a stream to a access the file.
            </summary>
            <returns>A new InputStream for this file.</returns>
        </member>
        <member name="M:Encog.Persist.Location.FilePersistence.Delete">
            <summary>
            Attempt to delete the file.
            </summary>
        </member>
        <member name="M:Encog.Persist.Location.FilePersistence.Exists">
            <summary>
            Does the file exist?
            </summary>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:Encog.Persist.Location.FilePersistence.RenameTo(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Rename this file to a different location.
            </summary>
            <param name="toLocation">What to rename to.</param>
        </member>
        <member name="P:Encog.Persist.Location.FilePersistence.FileName">
            <summary>
            The file this location is based on.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.Nominal.OutputOneOf">
            <summary>
            An output field that uses the "on of" technique to represent input data. For
            example, if there were five nominal items, or classes, given then each one
            would be represented by a single output neuron that would be on or off.
            
            Often the OutputEquilateral class is a better choice to represent nominal
            items.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputOneOf.items">
            <summary>
            The nominal items to represent.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputOneOf.trueValue">
            <summary>
            What is the true value, often just "1".
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Nominal.OutputOneOf.falseValue">
            <summary>
            What is the true value, often just "0" or "-1".
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.#ctor(System.Double,System.Double)">
            <summary>
            Construct a one-of field and specify the true and false value.
            </summary>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.AddItem(Encog.Normalize.Input.IInputField,System.Double)">
            <summary>
            Add a nominal value specifying a single value, the high and low values
            will be 0.5 below and 0.5 above.
            </summary>
            <param name="inputField">The input field to use.</param>
            <param name="value">The value to calculate the high and low values off of.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.AddItem(Encog.Normalize.Input.IInputField,System.Double,System.Double)">
            <summary>
            Add a nominal item, specify the low and high values.
            </summary>
            <param name="inputField">The input field to base everything from.</param>
            <param name="low">The high value for this nominal item.</param>
            <param name="high">The low value for this nominal item.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.Calculate(System.Int32)">
            <summary>
            Calculate the value for the specified subfield.
            </summary>
            <param name="subfield">The subfield to calculate for.</param>
            <returns>The calculated value for this field.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.getTrueValue">
            <summary>
            The true value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Normalize.Output.Nominal.OutputOneOf.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.OutputOneOf.FalseValue">
            <summary>
            The false value.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Nominal.OutputOneOf.SubfieldCount">
            <summary>
            The number of subfields, or nominal classes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Propagation">
            <summary>
            Implements basic functionality that is needed by each of the propagation
            methods. The specifics of each of the propagation methods is implemented
            inside of the PropagationMethod interface implementors.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Propagation.batchSize">
            <summary>
            The batch size. Defaults to the max size of an integer, which means
            update once per iteration.
            
            The batch size is the frequency with which the weights are updated per
            iteration. Setting it to the size of the training set means one update
            per iteration. Setting this to a lower number may improve training
            efficiency at the cost of processing time.
            
            If you do not want to use batch training, specify a value of 1, then the
            weights will be updated on each iteration, which is online training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Propagation.propagationUtil">
            <summary>
            The propagation utility to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Propagation.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Propagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.Networks.Training.Propagation.IPropagationMethod,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Construct a propagation trainer.
            </summary>
            <param name="network">The network to train.</param>
            <param name="method">The propagation method to use.</param>
            <param name="training">The training data to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Propagation.Iteration">
            <summary>
            Perform one iteration of training.
            
            Note: if you get a StackOverflowError while training, then you have
            endless recurrent loops. Try inserting no trainable synapses on one side
            of the loop.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Propagation.Network">
            <summary>
            Get the current best neural network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.CPN.TrainInstar">
            <summary>
            Used for Instar training of a CPN neural network. A CPN network is a hybrid
            supervised/unsupervised network. The Instar training handles the unsupervised
            portion of the training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainInstar.network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainInstar.training">
            <summary>
            The training data. This is unsupervised training, so only the input
            portion of the training data will be used.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainInstar.learningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainInstar.mustInit">
            <summary>
            If the weights have not been initialized, then they must be initialized
            before training begins. This will be done on the first iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainInstar.parts">
            <summary>
            Used to find the parts of the CPN network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainInstar.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double)">
            <summary>
            Construct the instar training object.
            </summary>
            <param name="network">The network to be trained.</param>
            <param name="training">The training data.</param>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainInstar.InitWeights">
            <summary>
            Approximate the weights based on the input values.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainInstar.Iteration">
            <summary>
            Perform one training iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.TrainInstar.Network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.TrainInstar.LearningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.CPNPattern">
            <summary>
            Pattern that creates a CPN neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.TAG_INSTAR">
            <summary>
            The INSTAR tag.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.TAG_OUTSTAR">
            <summary>
            The OUTSTAR tag.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.instarCount">
            <summary>
            The number of neurons in the instar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.outstarCount">
            <summary>
            The number of neurons in the outstar layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.inputCount">
            <summary>
            The number of neurons in the hidden layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.CPNPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.CPNPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Not used, will throw an error. CPN networks already have a predefined
            hidden layer called the instar layer.
            </summary>
            <param name="count">Not used</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.CPNPattern.Clear">
            <summary>
            Clear any parameters that were set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.CPNPattern.Generate">
            <summary>
            Generate the network.
            </summary>
            <returns>The generated network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.CPNPattern.ActivationFunction">
            <summary>
            Not used, can't set activation function for CPN.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.CPNPattern.InstarCount">
            <summary>
            The number of neurons in the instar layer.  This level
            is essentially a hidden layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.CPNPattern.OutstarCount">
            <summary>
            Set the number of neurons in the outstar level, this level
            is mapped to the "output" level.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.CPNPattern.OutputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.CPNPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.INetwork">
            <summary>
            Interface that defines a neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.AddLayer(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Add a layer to the neural network. The first layer added is the input
            layer, the last layer added is the output layer. This layer is added with
            a weighted synapse.
            </summary>
            <param name="layer">The layer to be added.</param>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.AddLayer(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Synapse.SynapseType)">
            <summary>
            Add a layer to the neural network. If there are no layers added this
            layer will become the input layer. This function automatically updates
            both the input and output layer references.
            </summary>
            <param name="layer">The layer to be added to the network.</param>
            <param name="type">What sort of synapse should connect this layer to the last.</param>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.CalculateError(Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Calculate the error for this neural network. The error is calculated
            using root-mean-square(RMS).
            </summary>
            <param name="data">The training set.</param>
            <returns>The error percentage.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.CalculateNeuronCount">
            <summary>
            Calculate the total number of neurons in the network across all layers.
            </summary>
            <returns>The neuron count.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.CheckInputSize(Encog.Neural.Data.INeuralData)">
            <summary>
            Check that the input size is acceptable, if it does not match the input
            layer, then throw an error.
            </summary>
            <param name="input">The input data.</param>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output for a given input to the neural network.
            </summary>
            <param name="input">The input to the neural network.</param>
            <returns>The output from the neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for a given input to the neural network. This method
            provides a parameter to specify an output holder to use. This holder
            allows propagation training to track the output from each layer. If you
            do not need this holder pass null, or use the other compare method.
            </summary>
            <param name="input">The input provide to the neural network.</param>
            <param name="useHolder">Allows a holder to be specified, this allows propagation
            training to check the output of each layer.</param>
            <returns>The results from the output neurons.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Equals(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Compare the two neural networks. For them to be equal they must be of the
            same structure, and have the same matrix values.
            </summary>
            <param name="other">The other neural network.</param>
            <returns>True if the two networks are equal.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Equals(Encog.Neural.Networks.BasicNetwork,System.Int32)">
            <summary>
            Determine if this neural network is equal to another. Equal neural
            networks have the same weight matrix and threshold values, within a
            specified precision.
            </summary>
            <param name="other">The other neural network.</param>
            <param name="precision">The number of decimal places to compare to.</param>
            <returns>True if the two neural networks are equal.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.GetHashCode">
            <summary>
            Generate a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Reset">
            <summary>
            Reset the weight matrix and the thresholds.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.ToString">
            <summary>
            Convert this object to a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.INetwork.Winner(Encog.Neural.Data.INeuralData)">
            <summary>
            Determine the winner for the specified input. This is the number of the
            winning neuron.
            </summary>
            <param name="input">The input patter to present to the neural network.</param>
            <returns>The winning neuron.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.INetwork.Structure">
            <summary>
            Get the structure of the neural network. The structure allows you
            to quickly obtain synapses and layers without traversing the
            network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.INetwork.WeightMatrixSize">
            <summary>
            The size of the matrix.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.MarketDataDescription">
            <summary>
            This class is used to describe the type of financial data that is needed.
            Each piece of data can be used for input, prediction or both. If used for
            input, it will be used as data to help predict. If used for prediction, it
            will be one of the values predicted. It is possible, and quite common, to use
            data from both input and prediction.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Temporal.TemporalDataDescription">
            <summary>
            This class describes one unit of input, or output, to a temporal neural
            network. Data can be both an input and output. Inputs are used to attempt
            predict the output.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.low">
            <summary>
            The lowest allowed number.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.high">
            <summary>
            The highest allowed number.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.input">
            <summary>
            Is this data item used for input to prediction?
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.predict">
            <summary>
            Should this data item be predicted?
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.type">
            <summary>
            What type of data is requested?
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.index">
            <summary>
            What is the index of this data item in relation to the others.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.activationFunction">
            <summary>
            Should an activation function be used?
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.#ctor(Encog.Neural.Activation.IActivationFunction,System.Double,System.Double,Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type,System.Boolean,System.Boolean)">
            <summary>
            Construct a data description item. Set both low and high to zero for
            unbounded.
            </summary>
            <param name="activationFunction">What activation function should be used?</param>
            <param name="low">What is the lowest allowed value.</param>
            <param name="high">What is the highest allowed value.</param>
            <param name="type">What type of data is this.</param>
            <param name="input">Used for input?</param>
            <param name="predict">Used for prediction?</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.#ctor(Encog.Neural.Activation.IActivationFunction,Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type,System.Boolean,System.Boolean)">
            <summary>
            Construct a data description with an activation function, but no range.
            </summary>
            <param name="activationFunction">The activation function.</param>
            <param name="type">The type of data.</param>
            <param name="input">Used for input?</param>
            <param name="predict">Used for prediction?</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.#ctor(Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type,System.Boolean,System.Boolean)">
            <summary>
            Construct a data description with no activation function or range.
            </summary>
            <param name="type">The type of data.</param>
            <param name="input">Used for input?</param>
            <param name="predict">Used for prediction?</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Low">
            <summary>
            The lowest allowed data.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.High">
            <summary>
            The highest allowed value.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.IsInput">
            <summary>
            Is this data input?  Or is it to be predicted.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.IsPredict">
            <summary>
            Determine if this is a predicted value.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Index">
            <summary>
            Get the index.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.DescriptionType">
            <summary>
            The type of data this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.ActivationFunction">
            <summary>
            The activation function for this layer.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type">
            <summary>
            The type of data requested.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type.RAW">
            <summary>
            Data in its raw, unmodified form.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type.PERCENT_CHANGE">
            <summary>
            The percent change.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Temporal.TemporalDataDescription.Type.DELTA_CHANGE">
            <summary>
            The difference change.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataDescription.ticker">
            <summary>
            The ticker symbol to be loaded.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataDescription.dataType">
            <summary>
            The type of data to be loaded from the specified ticker symbol.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketDataDescription.#ctor(Encog.Neural.NeuralData.Market.TickerSymbol,Encog.Neural.NeuralData.Market.MarketDataType,Encog.Neural.Activation.IActivationFunction,System.Boolean,System.Boolean)">
            <summary>
            Construct a MarketDataDescription item.
            </summary>
            <param name="ticker">The ticker symbol to use.</param>
            <param name="dataType">The data type needed.</param>
            <param name="activationFunction">The activation function to apply to this data, can be null.</param>
            <param name="input">Is this field used for input?</param>
            <param name="predict">Is this field used for prediction?</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.MarketDataDescription.#ctor(Encog.Neural.NeuralData.Market.TickerSymbol,Encog.Neural.NeuralData.Market.MarketDataType,System.Boolean,System.Boolean)">
            <summary>
            Construct a MarketDataDescription item.
            </summary>
            <param name="ticker">The ticker symbol to use.</param>
            <param name="dataType">The data type needed.</param>
            <param name="input">Is this field used for input?</param>
            <param name="predict">Is this field used for prediction?</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.MarketDataDescription.Ticker">
            <summary>
            The ticker symbol.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.MarketDataDescription.DataType">
            <summary>
            The data type that this is.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Span">
            <summary>
            A document range that specifies a span tag, and any embedded tags.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Span.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct a span range from the specified web page.
            </summary>
            <param name="source">The source web page.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Span.ToString">
            <summary>
            This object as a string. 
            </summary>
            <returns>This object as a string. </returns>
        </member>
        <member name="T:Encog.Bot.Browse.Range.FormElement">
            A document range that represents one individual component to a form.
            
            @author jheaton
            
        </member>
        <member name="F:Encog.Bot.Browse.Range.FormElement.name">
            The name of this form element.
        </member>
        <member name="F:Encog.Bot.Browse.Range.FormElement.value">
            The value held by this form element.
        </member>
        <member name="F:Encog.Bot.Browse.Range.FormElement.owner">
            The owner of this form element.
        </member>
        <member name="M:Encog.Bot.Browse.Range.FormElement.#ctor(Encog.Bot.Browse.WebPage)">
            Construct a form element from the specified web page.
            @param source The page that holds this form element.
        </member>
        <member name="P:Encog.Bot.Browse.Range.FormElement.Name">
            @return The name of this form.
        </member>
        <member name="P:Encog.Bot.Browse.Range.FormElement.Owner">
            @return The owner of this form element.
        </member>
        <member name="P:Encog.Bot.Browse.Range.FormElement.Value">
            @return The value of this form element.
        </member>
        <member name="P:Encog.Bot.Browse.Range.FormElement.AutoSend">
            @return True if this is autosend, which means that the type is 
            NOT submit.  This prevents a form that has multiple submit buttons
            from sending ALL of them in a single post.
        </member>
        <member name="T:Encog.Util.NormalizationType">
            <summary>
            This class support two normalization types. Z-AXIS is the most commonly
            used normalization type. Multiplicative is used over z-axis when the
            values are in very close range.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizationType.Z_AXIS">
            <summary>
            Z-Axis normalization.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizationType.MULTIPLICATIVE">
            <summary>
            Multiplicative normalization.
            </summary>
        </member>
        <member name="T:Encog.Util.NormalizeInput">
            <summary>
            NormalizeInput: Input into a Self Organizing Map must be normalized.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizeInput.VERYSMALL">
            <summary>
            Do not allow patterns to go below this very small number.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizeInput.type">
            <summary>
            What type of normalization should be used.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizeInput.normfac">
            <summary>
            The normalization factor.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizeInput.synth">
            <summary>
            The synthetic input.
            </summary>
        </member>
        <member name="F:Encog.Util.NormalizeInput.inputMatrix">
            <summary>
            The input expressed as a matrix.
            </summary>
        </member>
        <member name="M:Encog.Util.NormalizeInput.#ctor(System.Double[],Encog.Util.NormalizationType)">
            <summary>
            Normalize an input array into a matrix. The resulting matrix will have
            one extra column that will be occupied by the synthetic input.
            </summary>
            <param name="input">The input array to be normalized.</param>
            <param name="type">What type of normalization to use.</param>
        </member>
        <member name="M:Encog.Util.NormalizeInput.CreateInputMatrix(System.Double[],System.Double)">
            <summary>
            Create an input matrix that has enough space to hold the extra synthetic
            input.
            </summary>
            <param name="pattern">The input pattern to create.</param>
            <param name="extra">The synthetic input.</param>
            <returns>A matrix that contains the input pattern and the synthetic input.</returns>
        </member>
        <member name="M:Encog.Util.NormalizeInput.CalculateFactors(System.Double[])">
            <summary>
            Determine both the normalization factor and the synthetic input for the
            given input.
            </summary>
            <param name="input">The input to normalize.</param>
        </member>
        <member name="P:Encog.Util.NormalizeInput.InputMatrix">
            <summary>
            Get the resulting input matrix.
            </summary>
        </member>
        <member name="P:Encog.Util.NormalizeInput.Normfac">
            <summary>
            The normalization factor.
            </summary>
        </member>
        <member name="P:Encog.Util.NormalizeInput.Synth">
            <summary>
            The synthetic input.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.XML2Object">
            <summary>
            A generic class used to take an XML segment and produce an object for it.
            Some of the Encog persistors make use of this class. The Encog generic
            persistor makes use of this class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.XML2Object.mapper">
            <summary>
            The object mapper to use to resolve references.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.XML2Object.xmlIn">
            <summary>
            Used to read the XML.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.XML2Object.Load(Encog.Parse.Tags.Read.ReadXML,Encog.Persist.IEncogPersistedObject)">
            <summary>
            Load an object from XML.
            </summary>
            <param name="xmlIn">The XML reader.</param>
            <param name="target">The object to load.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.XML2Object.LoadActualObject(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Load an object.
            </summary>
            <param name="objectField">The object's field.</param>
            <param name="target">The object that will get the value.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.XML2Object.LoadCollection(System.Collections.IList)">
            <summary>
            Load a collection.
            </summary>
            <param name="collection">The collection to load.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.XML2Object.LoadObject(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Load an object and handle reference if needed.
            </summary>
            <param name="objectField">The field.</param>
            <param name="parent">The object that holds the field.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.XML2Object.SetFieldValue(System.Reflection.FieldInfo,System.Object,System.String)">
            <summary>
            Set a field value.
            </summary>
            <param name="field">The field to set.</param>
            <param name="target">The object that contains the field.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.Object2XML">
            <summary>
            A generic class used to take an object and produce XML for it. Some of the
            Encog persistors make use of this class. The Encog generic persistor makes
            use of this class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.Object2XML.xmlOut">
            <summary>
            The XML writer used.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.Object2XML.tagger">
            <summary>
            The object tagger, allows the objects to be tagged with references.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.Object2XML.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the object to XML.
            </summary>
            <param name="encogObject">The object to save.</param>
            <param name="xmlOut">The XML writer.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.Object2XML.SaveCollection(System.Collections.ICollection)">
            <summary>
            Save a collection.
            </summary>
            <param name="value">The collection to save.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.Object2XML.SaveField(System.Object)">
            <summary>
            Save a field.
            </summary>
            <param name="fieldObject">The field to save.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.Object2XML.SaveFieldReference(System.Object)">
            <summary>
            Save a field by reference.
            </summary>
            <param name="fieldObject">The field to save.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.Object2XML.SaveObject(System.Object)">
            <summary>
            Save an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Encog.Normalize.Output.Mapped.MappedRange">
            <summary>
            Simple class that is used internally to hold a range mapping.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.MappedRange.low">
            <summary>
            The low value for the range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.MappedRange.high">
            <summary>
            The high value for the range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Mapped.MappedRange.value">
            <summary>
            The value that should be returned for this range.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.MappedRange.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct the range mapping.
            </summary>
            <param name="low">The low value for the range.</param>
            <param name="high">The high value for the range.</param>
            <param name="value">The value that this range represents.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Mapped.MappedRange.InRange(System.Double)">
            <summary>
            Determine if the specified value is in the range.
            </summary>
            <param name="d">The value to check.</param>
            <returns>True if this value is within the range.</returns>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.MappedRange.High">
            <summary>
            The high value for this range.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.MappedRange.Low">
            <summary>
            The low value for this range.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Mapped.MappedRange.Value">
            <summary>
            The value that this range represents.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.NeuralDataFieldHolder">
            <summary>
            Simple holder class used internally for Encog.
            Used as a holder for a:
            
             NeuralDataPair
             Enumeration
             InputFieldNeuralDataSet
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.NeuralDataFieldHolder.pair">
            <summary>
            A neural data pair.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.NeuralDataFieldHolder.iterator">
            <summary>
            An iterator.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.NeuralDataFieldHolder.field">
            <summary>
            A field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.NeuralDataFieldHolder.#ctor(System.Collections.Generic.IEnumerator{Encog.Neural.NeuralData.INeuralDataPair},Encog.Normalize.Input.InputFieldNeuralDataSet)">
            <summary>
            Construct the class.
            </summary>
            <param name="iterator">An iterator.</param>
            <param name="field">A field.</param>
        </member>
        <member name="M:Encog.Normalize.Input.NeuralDataFieldHolder.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Encog.Normalize.Input.NeuralDataFieldHolder.ObtainPair">
            <summary>
            Obtain the next pair.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.NeuralDataFieldHolder.Field">
            <summary>
            The field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.NeuralDataFieldHolder.Pair">
            <summary>
            The pair.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.SmartLearningRate">
            <summary>
            Attempt to automatically set the learning rate in a learning method that
            supports a learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.LEARNING_DECAY">
            <summary>
            Learning decay rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.train">
            <summary>
            The training algorithm that is using this strategy.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.setter">
            <summary>
            The class that is to have the learning rate set for.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.currentLearningRate">
            <summary>
            The current learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.trainingSize">
            <summary>
            The training set size, this is used to pick an initial learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.lastError">
            <summary>
            The error rate from the previous iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.ready">
            <summary>
            Has one iteration passed, and we are now ready to start evaluation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.DetermineTrainingSize">
            <summary>
            Determine the training size.
            </summary>
            <returns>The training size.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.SmartLearningRate.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.RadialBasisPattern">
            <summary>
            A radial basis function (RBF) network uses several radial basis
            functions to provide a more dynamic hidden layer activation function
            than many other types of neural network.  It consists of a 
            input, output and hidden layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RadialBasisPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RadialBasisPattern.inputNeurons">
            <summary>
            The number of input neurons to use. Must be set, default to invalid
            -1 value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RadialBasisPattern.outputNeurons">
            <summary>
            The number of hidden neurons to use. Must be set, default to invalid
            -1 value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RadialBasisPattern.hiddenNeurons">
            <summary>
            The number of hidden neurons to use. Must be set, default to invalid
            -1 value.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RadialBasisPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add the hidden layer, this should be called once, as a RBF
            has a single hidden layer.
            </summary>
            <param name="count">The number of neurons in the hidden layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RadialBasisPattern.Generate">
            <summary>
            Generate the RBF network.
            </summary>
            <returns>The neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RadialBasisPattern.Clear">
            <summary>
            Clear out any hidden neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RadialBasisPattern.ActivationFunction">
            <summary>
            Set the activation function, this is an error. The activation function
            may not be set on a RBF layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RadialBasisPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RadialBasisPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.PatternConst">
            <summary>
            GUI constants for creating the patterns.  Specifically default
            x and y coordinates.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.PatternConst.START_X">
            <summary>
            The starting x-coordinate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.PatternConst.START_Y">
            <summary>
            The starting y-coordinate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.PatternConst.INDENT_X">
            <summary>
            How much to indent on the x-axis.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.PatternConst.INC_Y">
            <summary>
            How much to increase y by as the network grows.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.PatternConst.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.NeuralStructure">
            <summary>
            Holds "cached" information about the structure of the neural network. This is
            a very good performance boost since the neural network does not need to
            traverse itself each time a complete collection of layers or synapses is needed.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralStructure.layers">
            <summary>
            The layers in this neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralStructure.synapses">
            <summary>
            The synapses in this neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralStructure.network">
            <summary>
            The neural network this class belongs to.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralStructure.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.#ctor(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Construct a structure object for the specified network.
            </summary>
            <param name="network">The network to construct a structure for.</param>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.FinalizeLayers">
            <summary>
            Build the layer structure.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.FinalizeStructure">
            <summary>
            Build the synapse and layer structure.  This method should be called 
            after you are done adding layers to a network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.FinalizeSynapses">
            <summary>
            Build the synapse structure.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.GetLayers(System.Collections.Generic.IList{Encog.Neural.Networks.Layers.ILayer},Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Called to help build the layer structure.
            </summary>
            <param name="result">The layer list. </param>
            <param name="layer">The current layer being processed.</param>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.GetPreviousLayers(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Get the previous layers from the specified layer.
            </summary>
            <param name="targetLayer">The target layer.</param>
            <returns>The previous layers.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.GetPreviousSynapses(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Get the previous synapses.
            </summary>
            <param name="targetLayer">The layer to get the previous layers from.</param>
            <returns>A collection of synapses.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.NameLayer(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Get all of the names for a layer.
            </summary>
            <param name="layer">The layer to name.</param>
            <returns>A collection of the layer's names.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.FindSynapse(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Layers.ILayer,System.Boolean)">
            <summary>
            Find the specified synapse.
            </summary>
            <param name="fromLayer">From layer.</param>
            <param name="toLayer">To layer.</param>
            <param name="required">Throw an error if this synapse is not there.</param>
            <returns>The synapse, if found.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralStructure.ContainsLayerType(System.Type)">
            <summary>
            Determine if the network contains a layer of the specified type.
            </summary>
            <param name="type">The layer type we are looking for.</param>
            <returns>True if this layer type is present.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralStructure.Layers">
            <summary>
            The layers in this neural network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralStructure.Network">
            <summary>
            The network this structure belongs to.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralStructure.Synapses">
            <summary>
            All synapses in the neural network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Layers.BasicLayer">
            <summary>
            Basic functionality that most of the neural layers require. The basic layer
            is often used by itself to implement forward or recurrent layers. Other layer
            types are based on the basic layer as well.
            
            The layer will either have thresholds are not.  Thresholds are values that
            correspond to each of the neurons.  The threshold values will be added to
            the output calculated for each neuron.  Together with the weight matrix
            the threshold values make up the memory of the neural network.  When the
            neural network is trained, these threshold values (along with the weight
            matrix values) will be modified.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.next">
            <summary>
            The outbound synapse connections from this layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.x">
            <summary>
            The x-coordinate of this layer, used for GUI rendering.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.y">
            <summary>
            The y-coordinate of this layer, used for GUI rendering.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.activationFunction">
            <summary>
            Which activation function to use for this layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.name">
            <summary>
            The name for this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.neuronCount">
            <summary>
            How many neurons does this layer hold.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.BasicLayer.threshold">
            <summary>
            The threshold values for this layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.#ctor">
            <summary>
            Default constructor, mainly so the workbench can easily create a default
            layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.#ctor(Encog.Neural.Activation.IActivationFunction,System.Boolean,System.Int32)">
            <summary>
            Construct this layer with a non-default threshold function.
            </summary>
            <param name="activationFunction">The threshold function to use.</param>
            <param name="hasThreshold">How many neurons in this layer.</param>
            <param name="neuronCount">True if this layer has threshold values.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.#ctor(System.Int32)">
            <summary>
            Construct this layer with a sigmoid threshold function.
            </summary>
            <param name="neuronCount">How many neurons in this layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.AddNext(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Add a layer as the next layer. The layer will be added with a weighted
            synapse.
            </summary>
            <param name="next">The next layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.AddNext(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Synapse.SynapseType)">
            <summary>
            Add a "next" layer.
            </summary>
            <param name="next">The next layer to add.</param>
            <param name="type">The synapse type to use for this layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.AddSynapse(Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Add a synapse to the list of outbound synapses.  Usually you should 
            simply call the addLayer method to add to the outbound list.
            </summary>
            <param name="synapse">The synapse to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.Clone">
            <summary>
            Clone this object. 
            </summary>
            <returns>A cloned version of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the outputs for this layer given the input pattern. The output is
            also stored in the fire instance variable.
            </summary>
            <param name="pattern">The input pattern.</param>
            <returns>The output from this layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.CreatePersistor">
            <summary>
            Create a persistor for this layer.
            </summary>
            <returns>The new persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.IsConnectedTo(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Determine if this layer is connected to another layer.
            </summary>
            <param name="layer">A layer to check and see if this layer is connected to.</param>
            <returns>True if the two layers are connected.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.IsSelfConnected">
            <summary>
            Determine if this layer is self-connected.
            </summary>
            <returns>True if this layer is connected to intself.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.Process(Encog.Neural.Data.INeuralData)">
            <summary>
            Process the input pattern.  For the basic layer, nothing is done.
            This is how the context layer gets a chance to record the input. 
            Other similar functions, where access is needed to the input.
            </summary>
            <param name="pattern">The input to this layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.Recur">
            <summary>
            Get the output from this layer when called in a recurrent manor.
            For the BaiscLayer, this is not implemented.
            </summary>
            <returns>The output when called in a recurrent way.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.BasicLayer.ToString">
            <summary>
            Convert this object to a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.ActivationFunction">
            <summary>
            The activation function for this layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.NeuronCount">
            <summary>
            Get or set the neuron count for this layer. This just sets it, it does not make any
            adjustments to the class.  To automatically change the neuron count
            refer to the pruning classes.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.Next">
            @return The outbound synapse connections.
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.NextLayers">
            <summary>
            The list of layers that the outbound synapses connect to.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.Threshold">
            <summary>
            Set or gets the threshold array.  This does not modify any of the other values
            in the network, it just sets the threshold array.  If you want to 
            change the structure of the neural network you should use the pruning 
            classes.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.X">
            <summary>
            The x-coordinate. Used when the layer is displayed in a GUI.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.Y">
            <summary>
            The y-coordinate. Used when the layer is displayed in a GUI.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.BasicLayer.HasThreshold">
            <summary>
            True if threshold values are present.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.Loader.YahooFinanceLoader">
            <summary>
            This class loads financial data from Yahoo.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.YahooFinanceLoader.buildURL(Encog.Neural.NeuralData.Market.TickerSymbol,System.DateTime,System.DateTime)">
            <summary>
            This method builds a URL to load data from Yahoo Finance for a neural
            network to train with.
            </summary>
            <param name="ticker">The ticker symbol to access.</param>
            <param name="from">The beginning date.</param>
            <param name="to">The ending date.</param>
            <returns>The URL to read from</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.YahooFinanceLoader.Load(Encog.Neural.NeuralData.Market.TickerSymbol,System.Collections.Generic.IList{Encog.Neural.NeuralData.Market.MarketDataType},System.DateTime,System.DateTime)">
            <summary>
            Load the specified financial data. 
            </summary>
            <param name="ticker">The ticker symbol to load.</param>
            <param name="dataNeeded">The financial data needed.</param>
            <param name="from">The beginning date to load data from.</param>
            <param name="to">The ending date to load data to.</param>
            <returns>A collection of LoadedMarketData objects that represent the data
            loaded.</returns>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationUtil">
            <summary>
            Utility classes for activation functions. Used to convert a single value
            to/from an array. This is necessary because the activation functions are
            designed to operate on arrays, rather than single values.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationUtil.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationUtil.FromArray(System.Double[])">
            <summary>
            Get a single value from an array. Return the first element in the 
            array.
            </summary>
            <param name="d">The array.</param>
            <returns>The first element in the array.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationUtil.ToArray(System.Double)">
            <summary>
            Take a single value and create an array that holds it.
            </summary>
            <param name="d">The single value.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Link">
            <summary>
            A document range that represents a hyperlink, and any embedded tags and text.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Link.target">
            <summary>
            The target address for this link.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Link.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct a link from the specified web page.
            </summary>
            <param name="source">The web page this link is from.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Link.setTarget(Encog.Bot.Browse.Address)">
            <summary>
            Set the target of this link.
            </summary>
            <param name="target">The link target.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Link.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.Browse.Range.Link.Target">
            <summary>
            The target of this link.
            </summary>
        </member>
        <member name="T:Encog.Util.Concurrency.Job.JobUnitContext">
            <summary>
            Holds basic configuration information for an Encog job.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.JobUnitContext.jobUnit">
            <summary>
            The job unit that this job will execute.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.JobUnitContext.owner">
            <summary>
            The owner of this job.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.Job.JobUnitContext.taskNumber">
            <summary>
            The task number.
            </summary>
        </member>
        <member name="P:Encog.Util.Concurrency.Job.JobUnitContext.JobUnit">
            <summary>
            The JobUnit that this context will execute.
            </summary>
        </member>
        <member name="P:Encog.Util.Concurrency.Job.JobUnitContext.Owner">
            <summary>
            The owner of this job.
            </summary>
        </member>
        <member name="P:Encog.Util.Concurrency.Job.JobUnitContext.TaskNumber">
            <summary>
            The task number.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.Tag">
            <summary>
            HTMLTag: This class holds a single HTML tag. This class subclasses the
            AttributeList class. This allows the HTMLTag class to hold a collection of
            attributes, just as an actual HTML tag does.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.attributes">
            <summary>
            The tag's attributes.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.name">
            <summary>
            The tag name.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.type">
            <summary>
            The tag type.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.Clear">
            <summary>
            Clear the name, type and attributes.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A cloned copy of the object.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.GetAttributeInt(System.String)">
            <summary>
            Get the specified attribute as an integer.
            </summary>
            <param name="attributeId">The attribute name.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.GetAttributeValue(System.String)">
            <summary>
            Get the value of the specified attribute.
            </summary>
            <param name="name">The name of an attribute.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.SetAttribute(System.String,System.String)">
            <summary>
            Set a HTML attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Tag.ToString">
            <summary>
            Convert this tag back into string form, with the 
            beginning &lt; and ending &gt;.
            </summary>
            <returns>The Attribute object that was found.</returns>
        </member>
        <member name="P:Encog.Parse.Tags.Tag.Attributes">
            <summary>
            The attributes for this tag as a dictionary.
            </summary>
        </member>
        <member name="P:Encog.Parse.Tags.Tag.Name">
            <summary>
            The tag name.
            </summary>
        </member>
        <member name="P:Encog.Parse.Tags.Tag.TagType">
            <summary>
            The tag type.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.Tag.Type">
            <summary>
            Tag types.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.Type.BEGIN">
            <summary>
            A beginning tag.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.Type.END">
            <summary>
            An ending tag.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.Type.COMMENT">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.Tag.Type.CDATA">
            <summary>
            A CDATA section.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.Index.IndexSampleSegregator">
            <summary>
            An index segregator is used to segregate the data according to its index.
            Nothing about the data is actually compared. This makes the index range
            segregator very useful for breaking the data into training and validation
            sets. For example, you could very easily determine that 70% of the data is
            for training, and 30% for validation.
            
            This segregator takes a starting and ending index, as well as a smple size.
            Everything that is between these two indexes will be used.  The sample 
            repeats over and over.  For example, if you choose a sample size of 10, 
            and a beginning index of 0 and an ending index of 5, you would get
            half of the first 10 element, then half of the next ten, and so on.
            
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.Index.IndexSegregator">
            <summary>
             The index segregator. An abstract class to build index based segregators off
            of. An index segregator is used to segregate the data according to its index.
            Nothing about the data is actually compared. This makes the index range
            segregator very useful for breaking the data into training and validation
            sets. For example, you could very easily determine that 70% of the data is
            for training, and 30% for validation.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.ISegregator">
            <summary>
            Segregators are used to exclude certain rows. You may want to exclude rows to
            create training and validation sets. You may also simply wish to exclude some
            rows because they do not apply to what you are currently training for.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.ISegregator.Init(Encog.Normalize.DataNormalization)">
            <summary>
            Setup this object to use the specified normalization object.
            </summary>
            <param name="normalization">The normalization object to use.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.ISegregator.ShouldInclude">
            <summary>
            Should this row be included, according to this segregator.
            </summary>
            <returns>True if this row should be included.</returns>
        </member>
        <member name="M:Encog.Normalize.Segregate.ISegregator.PassInit">
            <summary>
            Init for a pass.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.ISegregator.Owner">
            <summary>
            The normalization object that is being used with this segregator.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexSegregator.currentIndex">
            <summary>
            The current index.  Updated rows are processed.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexSegregator.normalization">
            <summary>
            THe normalization object this belongs to.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSegregator.Init(Encog.Normalize.DataNormalization)">
            <summary>
            Setup this class with the specified normalization object.
            </summary>
            <param name="normalization">Normalization object.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSegregator.RollIndex">
            <summary>
            Used to increase the current index as data is processed.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSegregator.ShouldInclude">
            <summary>
            Should this row be included, according to this segregator.
            </summary>
            <returns>True if this row should be included.</returns>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSegregator.PassInit">
            <summary>
            Init for pass... nothing to do fo this class.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexSegregator.CurrentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexSegregator.Owner">
            <summary>
            The normalization object this object will use.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexSampleSegregator.startingIndex">
            <summary>
            The starting index (within a sample).
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexSampleSegregator.endingIndex">
            <summary>
            The ending index (within a sample).
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexSampleSegregator.sampleSize">
            <summary>
            The sample size.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSampleSegregator.#ctor">
            <summary>
            The default constructor, for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSampleSegregator.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct an index sample segregator.
            </summary>
            <param name="startingIndex">The starting index.</param>
            <param name="endingIndex">The ending index.</param>
            <param name="sampleSize">The sample size.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexSampleSegregator.ShouldInclude">
            <summary>
            Should this row be included.
            </summary>
            <returns>True if this row should be included.</returns>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexSampleSegregator.EndingIndex">
            <summary>
            The ending index.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexSampleSegregator.SampleSize">
            <summary>
            The sample size.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexSampleSegregator.StartingIndex">
            <summary>
            The starting index.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative">
            <summary>
             * Both the multiplicative and z-axis normalization types allow a group of 
            outputs to be adjusted so that the "vector length" is 1.  Both go about it
            in different ways.  Certain types of neural networks require a vector length 
            of 1.
            
            The multiplicative normalization is more simple than Z-Axis normalization.  
            Almost always Z=Axis normalization is a better choice.  However, 
            multiplicative can perform better than Z-Axis when all of the values
            are near zero most of the time.  This can cause the "synthetic value"
            that z-axis uses to dominate and skew the answer.
            
             Multiplicative normalization works by calculating the vector length of
             the input fields and dividing each by that value.  This also presents 
             a problem, as the magnitude of the original fields is not used.  For 
             example, multiplicative normalization would not distinguish between
             (-2,1,3) and (-10,5,15).  Both would result in the same output.   
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative.#ctor">
            <summary>
            The default constructor.  Used for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative.#ctor(Encog.Normalize.Output.IOutputFieldGroup,Encog.Normalize.Input.IInputField)">
            <summary>
            Construct a multiplicative output field.
            </summary>
            <param name="group">The group this field belongs to.</param>
            <param name="field">The input field that this field is based on.</param>
        </member>
        <member name="M:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative.Calculate(System.Int32)">
            <summary>
            Calculate the value for this output field.
            </summary>
            <param name="subfield">The subfield is not used.</param>
            <returns>The value for this field.</returns>
        </member>
        <member name="M:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative.RowInit">
            <summary>
            Not needed for this sort of output field.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Multiplicative.OutputFieldMultiplicative.SubfieldCount">
            <summary>
            Always returns 1, subfields are not used for this field.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.HybridStrategy">
            <summary>
            A hybrid stragey allows a secondary training algorithm to be used. Once the
            primary algorithm is no longer improving by much, the secondary will be used.
            Using simulated annealing in as a secondary to one of the propagation methods
            is often a very efficient combination as it can help the propagation method
            escape a local minimum. This is particularly true with backpropagation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.DEFAULT_MIN_IMPROVEMENT">
            <summary>
            The default minimum improvement before we switch to the alternate
            training method.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.DEFAULT_TOLERATE_CYCLES">
            <summary>
            The default number of cycles to tolerate bad improvement for.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.DEFAULT_ALTERNATE_CYCLES">
            <summary>
            The default number of cycles to use the alternate training for.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.mainTrain">
            <summary>
            The primary training method.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.altTrain">
            <summary>
            The alternate training method.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.lastImprovement">
            <summary>
            The last improvement.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.lastError">
            <summary>
            The error rate from the previous iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.ready">
            <summary>
            Has one iteration passed, and we are now ready to start 
            evaluation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.lastHybrid">
            <summary>
            The last time the alternate training algorithm was used.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.minImprovement">
            <summary>
            The minimum improvement before the alternate training 
            algorithm is considered.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.tolerateMinImprovement">
            <summary>
            The number of minimal improvement to tolerate before the
            alternate training algorithm is used.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.alternateCycles">
            <summary>
            How many cycles to engage the alternate algorithm for.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.HybridStrategy.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.HybridStrategy.#ctor(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Construct a hybrid strategy with the default minimum improvement
            and toleration cycles.
            </summary>
            <param name="altTrain">The alternative training strategy.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.HybridStrategy.#ctor(Encog.Neural.Networks.Training.ITrain,System.Double,System.Int32,System.Int32)">
            <summary>
            Create a hybrid strategy.
            </summary>
            <param name="altTrain">The alternate training algorithm.</param>
            <param name="minImprovement">The minimum improvement to switch algorithms.</param>
            <param name="tolerateMinImprovement">The number of cycles to tolerate the 
            minimum improvement for.</param>
            <param name="alternateCycles">How many cycles should the alternate 
            training algorithm be used for.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.HybridStrategy.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.HybridStrategy.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.HybridStrategy.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Buffer.BufferedNeuralDataSet">
            <summary>
            This class is not memory based, so very long files can be used, without
            running out of memory. This dataset uses a binary file as a buffer. When used
            with a slower access dataset, such as CSV, XML or SQL, where parsing must
            occur, this dataset can be used to load from the slower dataset and train at
            much higher speeds.
            
            If you are going to create a binary file, by using the add methods, you must
            call beginLoad to cause Encog to open an output file. Once the data has been
            loaded, call endLoad.
            
            The floating point numbers stored to the binary file may not be cross
            platform.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.ERROR_ADD">
            <summary>
            Error message for ADD.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.bufferFile">
            <summary>
            The buffer file to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.inputSize">
            <summary>
            The size of the input data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.idealSize">
            <summary>
            The size of the ideal data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.recordSize">
            <summary>
            The size(in bytes) of a record.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.enumerators">
            <summary>
            The enumerators.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.output">
            <summary>
            A random access file to use for output.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.input">
            <summary>
            The current input file.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.#ctor(System.String)">
            <summary>
            Construct a buffered dataset using the specified file. 
            </summary>
            <param name="bufferFile">The file to read/write binary data to/from.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Add only input data, for an unsupervised dataset. 
            </summary>
            <param name="data1">The data to be added.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Add both the input and ideal data. 
            </summary>
            <param name="inputData">The input data.</param>
            <param name="idealData">The ideal data.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Add a data pair of both input and ideal data. 
            </summary>
            <param name="inputData">The pair to add.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BeginLoad(System.Int32,System.Int32)">
            <summary>
            Begin loading to the binary file. After calling this method the add
            methods may be called.
            </summary>
            <param name="inputSize">The input size.</param>
            <param name="idealSize">The ideal size.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Close">
            <summary>
            Close all enumerators.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.EndLoad">
            <summary>
            This method should be called once all the data has been loaded. The
            underlying file will be closed.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Load(Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Load from the specified data source into the binary file. Do not call
            beginLoad before calling this method, as this is handled internally.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.OpenAdditional">
            <summary>
            Open a second buffered data set, useful for multithreading. 
            </summary>
            <returns>The additional buffered data set.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.OpenInputFile">
            <summary>
            Open an input file to allow records to be read randomly.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.ReadDoubleArray(System.IO.BinaryReader,Encog.Neural.Data.INeuralData)">
            <summary>
            Read an array of doubles from the file. 
            </summary>
            <param name="raf">The random access file to read from.</param>
            <param name="data">The neural data to read this array into.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.WriteDoubleArray(Encog.Neural.Data.INeuralData)">
            <summary>
            Write a double array from the specified data to the file. 
            </summary>
            <param name="data">The data that holds the array.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.GetRecord(System.Int64,Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Get a record by index and copy it into the specified pair.
            </summary>
            <param name="index">The index to load.</param>
            <param name="pair">The pair to copy into.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.GetEnumerator">
            <summary>
            Create an enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.Count">
            <summary>
            The record count.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.IdealSize">
            <summary>
            The ideal size.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.InputSize">
            <summary>
            The input size.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferFile">
            <summary>
            The name of the buffer file.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator">
            <summary>
            An enumerator to move through the buffered data set.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.input">
            <summary>
            The file to read from.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.next">
            <summary>
            The next data pair to read.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.current">
            <summary>
            The data pair that was just read.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.#ctor(Encog.Neural.Data.Buffer.BufferedNeuralDataSet)">
            <summary>
            Construct the buffered enumerator. This is where the file is actually
            opened.
            </summary>
            <param name="owner">The object that created this enumeration.</param>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.Close">
            <summary>
            Close the enumerator, and the underlying file.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.CreatePair">
            <summary>
            Create a neural data pair of the correct size.
            </summary>
            <returns>The pair created.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.Dispose">
            <summary>
            Dispose of the enumerator.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.MoveNext">
            <summary>
            Move to the next element.
            </summary>
            <returns>True if there are more elements to read.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.Reset">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Buffer.BufferedNeuralDataSet.BufferedNeuralDataSetEnumerator.Current">
            <summary>
            Get the current record
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationSIN">
            <summary>
            An activation function based on the sin function.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSIN.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSIN.Clone">
            <summary>
            The object cloned.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSIN.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationSIN.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationSIN.HasDerivative">
            <summary>
            Return true, sin has a derivative.
            </summary>
        </member>
        <member name="T:Encog.Matrix.MatrixMath">
            <summary>
            MatrixMath: This class can perform many different mathematical
            operations on matrixes.
            </summary>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Add(Encog.Matrix.Matrix,Encog.Matrix.Matrix)">
            <summary>
            Add two matrixes together, producing a third.
            </summary>
            <param name="a">The first matrix to add.</param>
            <param name="b">The second matrix to add.</param>
            <returns>The two matrixes added together.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Copy(Encog.Matrix.Matrix,Encog.Matrix.Matrix)">
            <summary>
            Copy the source matrix to the target matrix.  Both matrixes must have the same dimensions.
            </summary>
            <param name="source">The source matrix.</param>
            <param name="target">The target matrix.</param>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.DeleteCol(Encog.Matrix.Matrix,System.Int32)">
            <summary>
            Delete a single column from a matrix.  A new matrix, with the delete is returned.
            </summary>
            <param name="matrix">The matrix to delete from.</param>
            <param name="deleted">The column to delete.</param>
            <returns>The matrix, with the delete.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.DeleteRow(Encog.Matrix.Matrix,System.Int32)">
            <summary>
            Delete a row from a matrix.  A new matrix, with the row deleted, is returned.
            </summary>
            <param name="matrix">The matrix to delete from.</param>
            <param name="deleted">The row to delete.</param>
            <returns>The matrix, with the row deleted.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Divide(Encog.Matrix.Matrix,System.Double)">
            <summary>
            Divide every cell in the matrix by the specified number.
            </summary>
            <param name="a">The matrix to divide.</param>
            <param name="b">The number to divide by.</param>
            <returns>The divided matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.DotProduct(Encog.Matrix.Matrix,Encog.Matrix.Matrix)">
            <summary>
            Compute the dot product for two matrixes.  Note: both matrixes must be vectors.
            </summary>
            <param name="a">The first matrix, must be a vector.</param>
            <param name="b">The second matrix, must be a vector.</param>
            <returns>The dot product of the two matrixes.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Identity(System.Int32)">
            <summary>
            Create an identiry matrix, of the specified size.  An identity matrix is always square.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Multiply(Encog.Matrix.Matrix,System.Double)">
            <summary>
            Multiply every cell in the matrix by the specified value.
            </summary>
            <param name="a">Multiply every cell in a matrix by the specified value.</param>
            <param name="b">The value to multiply by.</param>
            <returns>The new multiplied matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Multiply(Encog.Matrix.Matrix,Encog.Matrix.Matrix)">
            <summary>
            Multiply two matrixes.
            </summary>
            <param name="a">The first matrix.</param>
            <param name="b">The second matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Subtract(Encog.Matrix.Matrix,Encog.Matrix.Matrix)">
            <summary>
            Subtract one matrix from another.  The two matrixes must have the same number of rows and columns.
            </summary>
            <param name="a">The first matrix.</param>
            <param name="b">The second matrix.</param>
            <returns>The subtracted matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.Transpose(Encog.Matrix.Matrix)">
            <summary>
            Transpose the specified matrix.
            </summary>
            <param name="input">The matrix to transpose.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.VectorLength(Encog.Matrix.Matrix)">
            <summary>
            Calculate the vector length of the matrix.
            </summary>
            <param name="input">The vector to calculate for.</param>
            <returns>The vector length.</returns>
        </member>
        <member name="M:Encog.Matrix.MatrixMath.#ctor">
            <summary>
            Private constructor.  All methods are static.
            </summary>
        </member>
        <member name="T:Encog.Bot.DataUnits.TextDataUnit">
            <summary>
            A data unit that holds text.
            </summary>
        </member>
        <member name="F:Encog.Bot.DataUnits.TextDataUnit.text">
            <summary>
            The text for this data unit.
            </summary>
        </member>
        <member name="M:Encog.Bot.DataUnits.TextDataUnit.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.DataUnits.TextDataUnit.Text">
            <summary>
            The text for this data unit.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Input">
            <summary>
            A form element that represents for input for text.  These are of the
            form name=value.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Input.type">
            <summary>
            The type of input element that this is.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Input.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct this Input element.
            </summary>
            <param name="source">The source for this input ent.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Input.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.Browse.Range.Input.Type">
            <summary>
            The type of this input.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.Input.AutoSend">
            <summary>
            True if this is autosend, which means that the type is NOT
            submit. This prevents a form that has multiple submit buttons
            from sending ALL of them in a single post.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Extract.IExtract">
            <summary>
            Provides the basic interface that any extractor must support. An extractor is
            a class that is capable of extracting certain types of data from web data.
            For example, the ExtractWords extractor is used to extract all of the words
            from a web page.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.IExtract.AddListener(Encog.Bot.Browse.Extract.IExtractListener)">
            <summary>
            Add a listener for the extraction.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.IExtract.Extract(Encog.Bot.Browse.WebPage)">
            <summary>
            Extract data from the web page.
            </summary>
            <param name="page">The page to extract from.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.IExtract.ExtractList(Encog.Bot.Browse.WebPage)">
            <summary>
            Extract from the web page and return the results as a list.
            </summary>
            <param name="page">The web page to extract from.</param>
            <returns>The results of the extraction as a List.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.IExtract.RemoveListener(Encog.Bot.Browse.Extract.IExtractListener)">
            <summary>
            Remove the specified listener.
            </summary>
            <param name="listener">The listener to rmove.</param>
        </member>
        <member name="P:Encog.Bot.Browse.Extract.IExtract.Listeners">
            <summary>
            A list of listeners registered with this object.
            </summary>
        </member>
        <member name="T:Encog.Util.MathUtil.BoundNumbers">
            <summary>
            A simple class that prevents numbers from getting either too
            big or too small.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.BoundNumbers.TOO_SMALL">
            <summary>
            Too small of a number.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.BoundNumbers.TOO_BIG">
            <summary>
            Too big of a number.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.BoundNumbers.LOGGER">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundNumbers.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundNumbers.Bound(System.Double)">
            <summary>
            Bound the number so that it does not become too big or too small.
            </summary>
            <param name="d">The number to check.</param>
            <returns>The new number. Only changed if it was too big or too small.</returns>
        </member>
        <member name="T:Encog.Util.MathUtil.BoundMath">
            <summary>
            C# will sometimes return Math.NaN or Math.Infinity when numbers get to
            large or too small. This can have undesirable effects. This class provides
            some basic math functions that may be in danger of returning such a value.
            This class imposes a very large and small ceiling and floor to keep the
            numbers within range.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Cos(System.Double)">
            <summary>
            Calculate the cos.
            </summary>
            <param name="a">The value passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Exp(System.Double)">
            <summary>
            Calculate the exp.
            </summary>
            <param name="a">The value passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Log(System.Double)">
            <summary>
            Calculate the log.
            </summary>
            <param name="a">The value passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Pow(System.Double,System.Double)">
            <summary>
            Calculate the power of a number.
            </summary>
            <param name="a">The base.</param>
            <param name="b">The exponent.</param>
            <returns></returns>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Sin(System.Double)">
            <summary>
            Calculate the sin.
            </summary>
            <param name="a">The value passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.BoundMath.Sqrt(System.Double)">
            <summary>
            Calculate the square root.
            </summary>
            <param name="a">The value passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="T:Encog.Util.CSV.CSVFormat">
            <summary>
            Describes how to format number lists, such as CSV.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.CSVFormat.#ctor(System.Char,System.Char)">
            <summary>
            Create a CSV format for the specified decimal char and separator char.
            </summary>
            <param name="decimalChar">The character for a decimal point or comma.</param>
            <param name="separatorChar">The separator char for a number list, likely comma or semicolon.</param>
        </member>
        <member name="M:Encog.Util.CSV.CSVFormat.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.CSVFormat.Parse(System.String)">
            <summary>
            Parse the specified string into a number.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The number that has been parsed.</returns>
        </member>
        <member name="M:Encog.Util.CSV.CSVFormat.Format(System.Double,System.Int32)">
            <summary>
            Format the specified number into a string.
            </summary>
            <param name="d">The number to parse.</param>
            <param name="digits">The number of fractional digits.</param>
            <returns>The formatted number.</returns>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.DECIMAL_POINT">
            <summary>
            A format that uses a decimal point and a comma to separate fields.
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.DECIMAL_COMMA">
            <summary>
            A format that uses a decimal comma and a semicolon to separate fields.
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.ENGLISH">
            <summary>
            The typical format for English speaking countries is a decimal
            point and a comma for field separation.  
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.EG_FORMAT">
            <summary>
            It is important that an EG file produced on one system, in one region
            be readable by another system in a different region.  Because of this
            EG files internally use a decimal point and comma separator.  Of course
            programs should display numbers to the user using regional settings.
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.DecimalChar">
            <summary>
            The decimal character, usually either a period or comma.
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.Separator">
            <summary>
            The separator character for a list of fields in CSV, usually either comma or
            semicolon.
            </summary>
        </member>
        <member name="P:Encog.Util.CSV.CSVFormat.DecimalCharacter">
            <summary>
            The decimal character for the current region.
            </summary>
        </member>
        <member name="T:Encog.Util.Banchmark.Evaluate">
            <summary>
            Used to evaluate the training time for a network.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.Evaluate.MILIS">
            <summary>
            Mili-seconds in a second.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.Evaluate.TICKS">
            <summary>
            Miliseconds in a tick.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.Evaluate.TRYS">
            <summary>
            How many times to try.
            </summary>
        </member>
        <member name="M:Encog.Util.Banchmark.Evaluate.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.Banchmark.Evaluate.EvaluateNetwork(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Evaluate how long it takes to calculate the error for the network.  This 
            causes each of the training pairs to be run through the network.  The 
            network is evaluated 10 times and the lowest time is reported.
            </summary>
            <param name="network">The network to evaluate with.</param>
            <param name="training">The training data to use.</param>
            <returns>The lowest number of seconds that each of the ten attempts took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.Evaluate.EvaluateTrain(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Evaluate how long it takes to calculate the error for the network.  This 
            causes each of the training pairs to be run through the network.  The 
            network is evaluated 10 times and the lowest time is reported.
            </summary>
            <param name="network">The network to evaluate with.</param>
            <param name="training">The training data to use.</param>
            <returns>The lowest number of seconds that each of the ten attempts took.</returns>
        </member>
        <member name="T:Encog.Util.Banchmark.EncogBenchmark">
            <summary>
            Benchmark Encog with several network types.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEPS">
            <summary>
            Number of steps in all.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP1">
            <summary>
            The first step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP2">
            <summary>
            The second step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP3">
            <summary>
            The third step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP4">
            <summary>
            The fourth step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP5">
            <summary>
            The fifth step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP6">
            <summary>
            The sixth step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.STEP7">
            <summary>
            The seventh step.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.INPUT_COUNT">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.OUTPUT_COUNT">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.HIDDEN_COUNT">
            <summary>
            The number of hidden neurons.
            </summary>
        </member>
        <member name="F:Encog.Util.Banchmark.EncogBenchmark.report">
            <summary>
            Report progress.
            </summary>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.#ctor(Encog.IStatusReportable)">
            <summary>
            Construct a benchmark object.
            </summary>
            <param name="report">The object to report progress to.</param>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Benchmar0Hidden">
            <summary>
            Benchmark a network with no hidden layers.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Benchmar1Hidden">
            <summary>
            Benchmark a network with one hidden layer.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Benchmar2Hidden">
            <summary>
            Benchmark a network with two hidden layers.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Process">
            <summary>
            Perform the benchmark.  Returns the total amount of time for all of the
            benchmarks.  Returns the final score.  The lower the better for a score.
            </summary>
            <returns>The total time, which is the final Encog benchmark score.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Train0Hidden">
            <summary>
            Train the neural network with 0 hidden layers.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Train1Hidden">
            <summary>
            Train the neural network with 1 hidden layer.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.Train2Hidden">
            <summary>
            Train the neural network with 2 hidden layers.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="M:Encog.Util.Banchmark.EncogBenchmark.TrainElman">
            <summary>
            Train an Elman neural network.
            </summary>
            <returns>The amount of time this benchmark took.</returns>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationSoftMaxPersistor">
            <summary>
            The Encog persistor used to persist the ActivationSoftMax class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSoftMaxPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationSoftMaxPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the softmax object to the specified XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to use.</param>
        </member>
        <member name="T:Encog.Persist.PersistError">
            <summary>
            General error class for Encog persistence.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Persist.PersistError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Persist.Attributes.EGReferenceable">
            <summary>
            This annotation is used with Encog generic persistence. It allows a field to
            be flagged as something that should be persisted as a reference.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation">
            <summary>
            This class implements a backpropagation training algorithm for feed forward
            neural networks. It is used in the same manner as any other training class
            that implements the Train interface.
            
            Backpropagation is a common neural network training algorithm. It works by
            analyzing the error of the output of the neural network. Each neuron in the
            output layer's contribution, according to weight, to this error is
            determined. These weights are then adjusted to minimize this error. This
            process continues working its way backwards through the layers of the neural
            network.
            
            This implementation of the backpropagation algorithm uses both momentum and a
            learning rate. The learning rate specifies the degree to which the weight
            matrixes will be modified through each iteration. The momentum specifies how
            much the previous learning iteration affects the current. To use no momentum
            at all specify zero.
            
            One primary problem with backpropagation is that the magnitude of the partial
            derivative is often detrimental to the training of the neural network. The
            other propagation methods of Manhatten and Resilient address this issue in
            different ways. In general, it is suggested that you use the resilient
            propagation technique for most Encog training tasks over back propagation.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.IMomentum">
            <summary>
            Specifies that a training algorithm has the concept of a momentum.
            This allows it to be used with strategies that automatically adjust the
            momentum.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.IMomentum.Momentum">
            <summary>
            The momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.momentum">
            <summary>
            The momentum, this is the degree to which the previous training cycle
            affects the current one.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.learningRate">
            <summary>
            The learning rate, this is value is essentially a percent. It is the
            degree to which the gradients are applied to the weight matrix to allow
            learning.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Create a class to train using backpropagation.
            </summary>
            <param name="network">The network that is to be trained.</param>
            <param name="training">The training data to be used for backpropagation.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double,System.Double)">
            <summary>
            The network that is to be trained
            </summary>
            <param name="network">The network to use.</param>
            <param name="training">The training set.</param>
            <param name="learnRate">The rate at which the weight matrix will be adjusted based on
            learning.</param>
            <param name="momentum">The influence that previous iteration's training deltas will
            have on the current iteration.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.LearningRate">
            <summary>
            The learning rate, this is value is essentially a percent. It is
            the degree to which the gradients are applied to the weight
            matrix to allow learning.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Back.Backpropagation.Momentum">
            <summary>
            The momentum for training.  This is the degree to which changes
            from which the previous training iteration will affect this training
            iteration.  This can be useful to overcome local minima.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Hopfield.TrainHopfield">
            <summary>
            This class is used to train a Hopfield neural network. A hopfield neural
            network can be created by using the basic layer and connecting it to itself,
            forming a single layer recurrent neural network.
            
            This is an unsupervised training algorithm.  Ideal values should not
            be specified in the training set.  If ideal values are present, they
            will be ignored.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.#ctor(Encog.Neural.NeuralData.INeuralDataSet,Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Construct a Hopfield training class.
            </summary>
            <param name="trainingSet">The training set to use.</param>
            <param name="network">The network to train.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.ConvertHopfieldMatrix(Encog.Neural.Networks.Synapse.ISynapse,Encog.Matrix.Matrix)">
            Update the Hopfield weights after training.
            @param target The target synapse.
            @param delta The amoun to change the weights by.
        </member>
        <member name="M:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.Iteration">
            <summary>
            Perform one training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.TrainHopfieldSynapse(Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Once the hopfield synapse has been found, this method is called
            to train it.
            </summary>
            <param name="recurrent">The hopfield layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.TrainHopfieldSynapse(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData)">
            <summary>
            Train the neural network for the specified pattern. The neural network
            can be trained for more than one pattern. To do this simply call the
            train method more than once.
            </summary>
            <param name="synapse">The synapse to train.</param>
            <param name="pattern">The pattern to train for.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Hopfield.TrainHopfield.Network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.HopfieldPattern">
            <summary>
            Create a Hopfield pattern.  A Hopfield neural network has a single
            layer that functions both as the input and output layers.  There
            are no hidden layers.  Hopfield networks are used for basic
            pattern recognition.  When a Hopfield network recognizes a 
            pattern, it "echos" that pattern on the output.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.HopfieldPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.HopfieldPattern.neuronCount">
            <summary>
            How many neurons in the Hopfield network. Default to -1, which is
            invalid. Therefore this value must be set.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.HopfieldPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer.  This will throw an error, because the
            Hopfield neural network has no hidden layers.
            </summary>
            <param name="count">The number of neurons.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.HopfieldPattern.Generate">
            <summary>
            Generate the Hopfield neural network.
            </summary>
            <returns>The generated network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.HopfieldPattern.Clear">
            <summary>
            Nothing to clear.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.HopfieldPattern.ActivationFunction">
            <summary>
            Set the activation function to use.  This function will throw
            an error, because the Hopfield network must use the BiPolar
            activation function.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.HopfieldPattern.OutputNeurons">
            <summary>
            Set the number of output neurons, should not be used with a hopfield
            neural network, because the number of input neurons defines the number of
            output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.HopfieldPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.BoltzmannPattern">
            <summary>
            Pattern to create a Boltzmann machine.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BoltzmannPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BoltzmannPattern.neuronCount">
            <summary>
            The number of neurons in the Boltzmann network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BoltzmannPattern.annealCycles">
            <summary>
            The number of annealing cycles per run.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BoltzmannPattern.runCycles">
            <summary>
            The number of cycles per run.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.BoltzmannPattern.temperature">
            <summary>
            The current temperature.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BoltzmannPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Not supported, will throw an exception, Boltzmann networks have
            no hidden layers.
            </summary>
            <param name="count">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BoltzmannPattern.Clear">
            <summary>
            Clear any properties set on this network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.BoltzmannPattern.Generate">
            <summary>
            Generate the network.
            </summary>
            <returns>The generated network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.ActivationFunction">
            <summary>
            Not used, will throw an exception.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.OutputNeurons">
            <summary>
            Number of neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.InputNeurons">
            <summary>
            Number of neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.AnnealCycles">
            <summary>
            The number of anneal cycles.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.RunCycles">
            <summary>
            The number of run cycles.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.BoltzmannPattern.Temperature">
            <summary>
            The temperature.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Layers.ContextLayer">
            <summary>
            Implements a context layer. A context layer is used to implement a simple
            recurrent neural network, such as an Elman or Jordan neural network. The
            context layer has a short-term memory. The context layer accept input, and
            provide the same data as output on the next cycle. This continues, and the
            context layer's output "one step" out of sync with the input.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.ContextLayer.context">
            <summary>
            The context data that this layer will store.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.ContextLayer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.#ctor">
            <summary>
            Default constructor, mainly so the workbench can easily create a default
            layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.#ctor(Encog.Neural.Activation.IActivationFunction,System.Boolean,System.Int32)">
            <summary>
            Construct a context layer with the parameters specified.
            </summary>
            <param name="thresholdFunction">The threshold function to use.</param>
            <param name="hasThreshold">Does this layer have thresholds?</param>
            <param name="neuronCount">The neuron count to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.#ctor(System.Int32)">
            <summary>
            Construct a default context layer that has the TANH activation function
            and the specified number of neurons. Use threshold values.
            </summary>
            <param name="neuronCount">The number of neurons on this layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.CreatePersistor">
            <summary>
            Create a persistor for this layer.
            </summary>
            <returns>The new persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.Process(Encog.Neural.Data.INeuralData)">
            <summary>
            Called to process input from the previous layer. Simply store the output
            in the context.
            </summary>
            <param name="pattern">The pattern to store in the context.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.Recur">
            <summary>
            Called to get the output from this layer when called in a recurrent
            manor. Simply return the context that was kept from the last iteration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.ContextLayer.ClearContext">
            <summary>
            Reset the context values back to zero.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.ContextLayer.Context">
            <summary>
            The context, or memory of this layer. These will be the values
            that were just output.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.BasicNetwork">
             <summary>
             This class implements a neural network. This class works in conjunction the
             Layer classes. Layers are added to the BasicNetwork to specify the structure
             of the neural network.
             
             The first layer added is the input layer, the  layer added is the output
             layer. Any layers added between these two layers are the hidden layers.
             
             The network structure is stored in the structure member. It is important to
             call:
             
             network.getStructure().FinalizeStructure();
            
             Once the neural network has been completely constructed.
             </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.TAG_INPUT">
            <summary>
            The input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.TAG_OUTPUT">
            <summary>
            The output layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.structure">
            <summary>
            Holds the structure of the network. This keeps the network from having to
            constantly lookup layers and synapses.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.logic">
            <summary>
            This class tells the network how to calculate the output for each of the layers.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.properties">
            <summary>
            Properties about the neural network.  Some NeuralLogic classes require certain properties 
            to be set.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.layerTags">
            <summary>
            A set of tags to identify special layers.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.BasicNetwork.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.#ctor">
            <summary>
            Construct an empty neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.#ctor(Encog.Neural.Networks.Logic.INeuralLogic)">
            <summary>
            Construct a basic network with the specified logic.
            </summary>
            <param name="logic">The logic to use with this network.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.AddLayer(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Add a layer to the neural network. The first layer added is the input
            layer, the last layer added is the output layer. This layer is added with
            a weighted synapse.
            </summary>
            <param name="layer">The layer to be added.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.AddLayer(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Synapse.SynapseType)">
            <summary>
            Add a layer to the neural network. If there are no layers added this
            layer will become the input layer. This function automatically updates
            both the input and output layer references.
            </summary>
            <param name="layer">The layer to be added to the network.</param>
            <param name="type">What sort of synapse should connect this layer to the last.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.CalculateError(Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Calculate the error for this neural network. The error is calculated
            using root-mean-square(RMS).
            </summary>
            <param name="data">The training set.</param>
            <returns>The error percentage.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.CalculateNeuronCount">
            <summary>
            Calculate the total number of neurons in the network across all layers.
            </summary>
            <returns>The neuron count.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.CheckInputSize(Encog.Neural.Data.INeuralData)">
            <summary>
            Check that the input size is acceptable, if it does not match
            the input layer, then throw an error.
            </summary>
            <param name="input">The input data.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Clone">
            <summary>
            Return a clone of this neural network. Including structure, weights and
            threshold values.
            </summary>
            <returns>A cloned copy of the neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output for a given input to the neural network.
            </summary>
            <param name="input">The input to the neural network.</param>
            <returns>The output from the neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Compute the output for a given input to the neural network. This method
            provides a parameter to specify an output holder to use.  This holder
            allows propagation training to track the output from each layer.
            If you do not need this holder pass null, or use the other 
            compare method.
            </summary>
            <param name="input">The input provide to the neural network.</param>
            <param name="useHolder">Allows a holder to be specified, this allows
            propagation training to check the output of each layer.</param>
            <returns>The results from the output neurons.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.CreatePersistor">
            <summary>
            Create a persistor for this object.
            </summary>
            <returns>The newly created persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Equals(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Compare the two neural networks. For them to be equal they must be of the
            same structure, and have the same matrix values.
            </summary>
            <param name="other">The other neural network.</param>
            <returns>True if the two networks are equal.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Equals(Encog.Neural.Networks.BasicNetwork,System.Int32)">
            <summary>
            Determine if this neural network is equal to another.  Equal neural
            networks have the same weight matrix and threshold values, within
            a specified precision.
            </summary>
            <param name="other">The other neural network.</param>
            <param name="precision">The number of decimal places to compare to.</param>
            <returns>True if the two neural networks are equal.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.HandleRecurrentInput(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Data.INeuralData,Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Handle recurrent layers.  See if there are any recurrent layers before
            the specified layer that must affect the input.
            </summary>
            <param name="layer">The layer being processed, see if there are any recurrent
            connections to this.</param>
            <param name="input">The input to the layer, will be modified with the result
            from any recurrent layers.</param>
            <param name="source">The source synapse.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetHashCode">
            <summary>
            Generate a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.InferOutputLayer(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Internal method that allows the use of recurrsion to determine
            the output layer.
            </summary>
            <param name="layer">The layer currently being evaluated.</param>
            <returns>The potential output layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Reset">
            <summary>
            Reset the weight matrix and the thresholds.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.ToString">
            <summary>
            Convert this object to a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.Winner(Encog.Neural.Data.INeuralData)">
            <summary>
            Determine the winner for the specified input. This is the number of the
            winning neuron.
            </summary>
            <param name="input">The input patter to present to the neural network.</param>
            <returns>The winning neuron.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.DetermineWinner(Encog.Neural.Data.INeuralData)">
            <summary>
            Determine which member of the output is the winning neuron.
            </summary>
            <param name="output">The output from the neural network.</param>
            <returns>The winning neuron.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.SetProperty(System.String,System.String)">
            <summary>
            Set a network property as a string.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.SetProperty(System.String,System.Int64)">
            <summary>
            Set a network property as long string.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="l">The long value.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.SetProperty(System.String,System.Double)">
            <summary>
            Set a network property as a double.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="d">The double value.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetPropertyString(System.String)">
            <summary>
            Get the property as a string.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The property as a string.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetPropertyLong(System.String)">
            <summary>
            Get a network property as a long.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The property as a long.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetPropertyDouble(System.String)">
            <summary>
            Get a network property as a double.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The property as a double.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.TagLayer(System.String,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Tag a layer.
            </summary>
            <param name="tag">The name of the tag.</param>
            <param name="layer">The layer to be tagged.</param>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.ClearLayerTags">
            <summary>
            Clear all network tags.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetLayer(System.String)">
            <summary>
            Get a layer using a tag name.
            </summary>
            <param name="tag">The tag name.</param>
            <returns>The layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.BasicNetwork.GetTags(Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Get a list of all of the tags on a specific layer.
            </summary>
            <param name="layer">The layer to check.</param>
            <returns>A collection of the layer tags.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.Description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.Structure">
            <summary>
            Get the structure of the neural network.  The structure 
            allows you to quickly obtain synapses and layers without 
            traversing the network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.WeightMatrixSize">
            <summary>
            The size of the matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.Logic">
            <summary>
            The neural logic to use.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.Properties">
            <summary>
            The network properties, a collection of name-value pairs.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.BasicNetwork.LayerTags">
            <summary>
            Get the layer tags.
            </summary>
        </member>
        <member name="T:Encog.Util.Time.TimeUnit">
            <summary>
            Time units.
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.SECONDS">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.MINUTES">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.HOURS">
            <summary>
            Hours
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.DAYS">
            <summary>
            Days
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.WEEKS">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.FORTNIGHTS">
            <summary>
            Fortnights
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.MONTHS">
            <summary>
            Months
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.YEARS">
            <summary>
            Years
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.DECADES">
            <summary>
            Decades
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.SCORES">
            <summary>
            Scores
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.CENTURIES">
            <summary>
            Centuries
            </summary>
        </member>
        <member name="F:Encog.Util.Time.TimeUnit.MILLENNIA">
            <summary>
            Millennia
            </summary>
        </member>
        <member name="T:Encog.Util.MathUtil.RBF.GaussianFunction">
            <summary>
            Implements a radial function based on the gaussian function.
            </summary>
        </member>
        <member name="T:Encog.Util.MathUtil.RBF.IRadialBasisFunction">
            <summary>
            Provides a generic interface to a radial basis function (RBF). Encog uses
            RBF's for a variety of purposes.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.RBF.IRadialBasisFunction.Calculate(System.Double)">
            <summary>
            Calculate the RBF result for the specified value.
            </summary>
            <param name="x">The value to be passed into the RBF.</param>
            <returns>The RBF value.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.RBF.IRadialBasisFunction.CalculateDerivative(System.Double)">
            <summary>
            Calculate the derivative of the RBF function.
            </summary>
            <param name="x">The value to calculate for.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.IRadialBasisFunction.Center">
            <summary>
            The center of the RBF.
            </summary>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.IRadialBasisFunction.Peak">
            <summary>
            The peak of the RBF.
            </summary>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.IRadialBasisFunction.Width">
            <summary>
            The width of the RBF.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.RBF.GaussianFunction.center">
            <summary>
            The center of the RBF.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.RBF.GaussianFunction.peak">
            <summary>
            The peak of the RBF.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.RBF.GaussianFunction.width">
            <summary>
            The width of the RBF.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.RBF.GaussianFunction.LOGGER">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.RBF.GaussianFunction.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a Gaussian RBF with the specified center, peak and
            width.
            </summary>
            <param name="center">The center.</param>
            <param name="peak">The peak.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Encog.Util.MathUtil.RBF.GaussianFunction.Calculate(System.Double)">
            <summary>
            Calculate the value of the Gaussian function for the specified
            value.
            </summary>
            <param name="x">The value to calculate the Gaussian function for.</param>
            <returns>The return value for the Gaussian function.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.RBF.GaussianFunction.CalculateDerivative(System.Double)">
            <summary>
            Calculate the value of the derivative of the Gaussian function 
            for the specified value.
            </summary>
            <param name="x">The value to calculate the derivative Gaussian 
            function for.</param>
            <returns>The return value for the derivative of the Gaussian 
            function.</returns>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.GaussianFunction.Center">
            <summary>
            The center of the RBF.
            </summary>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.GaussianFunction.Peak">
            <summary>
            The peak of the RBF.
            </summary>
        </member>
        <member name="P:Encog.Util.MathUtil.RBF.GaussianFunction.Width">
            <summary>
            The width of the RBF. 
            </summary>
        </member>
        <member name="T:Encog.Util.HTTP.URLUtility">
            <summary>
            URLUtility: THis class contains several useful methods
            for dealing with URL's.
            </summary>
        </member>
        <member name="F:Encog.Util.HTTP.URLUtility.indexFile">
            <summary>
            The name of an HTML index file.
            </summary>
        </member>
        <member name="M:Encog.Util.HTTP.URLUtility.ConstructURL(System.Uri,System.String,System.Boolean)">
            <summary>
            Construct a URL from a string.
            </summary>
            <param name="baseURL">The page that the URL was found on.</param>
            <param name="url">The URL found.</param>
            <param name="stripFragment">Should fragments be stripped.  Fragments are the part of a URL after the # sign.  They do not specify actual pages, but rather part of a page.  As a result, they are usually not needed by a spider or bot.</param>
            <returns>The constructed URL.</returns>
        </member>
        <member name="M:Encog.Util.HTTP.URLUtility.ContainsInvalidURLCharacters(System.String)">
            <summary>
            Does the URL contain invalid characters?
            </summary>
            <param name="url">The URL</param>
            <returns>True if the URL contains invalid characters.</returns>
        </member>
        <member name="M:Encog.Util.HTTP.URLUtility.ConvertFilename(System.String,System.Uri,System.Boolean)">
            <summary>
            Convert a filename for local storage. Also create the
            directory tree.
            </summary>
            <param name="basePath">The local path that forms the base of the
            downloaded web tree.</param>
            <param name="url">The URL path.</param>
            <param name="mkdir">True if a directory structure should be created
            to support this file.  Directories will only be
            created, if needed.</param>
            <returns></returns>
        </member>
        <member name="T:Encog.Persist.Persistors.PropertyDataPersistor">
            <summary>
            The Encog persistor used to persist the PropertyData class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PropertyDataPersistor.TAG_PROPERTIES">
            <summary>
            The properties tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PropertyDataPersistor.TAG_PROPERTY">
            <summary>
            The property tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PropertyDataPersistor.ATTRIBUTE_NAME">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PropertyDataPersistor.ATTRIBUTE_VALUE">
            <summary>
            The value attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.PropertyDataPersistor.propertyData">
            <summary>
            The property data being loaed.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.PropertyDataPersistor.HandleProperties(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Handle the properties tag.
            </summary>
            <param name="xmlin">The XML reader.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.PropertyDataPersistor.HandleProperty(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Handle loading an individual property.
            </summary>
            <param name="xmlin">The XML reader.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.PropertyDataPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlin">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.PropertyDataPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlout">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.Generic.FieldMapping">
            <summary>
            A simple mapping that holds the reference, field and target of an object.
            This is used internally by the object mapper to help resolve references.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.FieldMapping.target">
            <summary>
            The target object, that holds the field.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.FieldMapping.reff">
            <summary>
            The field's reference.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.Generic.FieldMapping.field">
            <summary>
            The field object.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.Generic.FieldMapping.#ctor(System.Int32,System.Reflection.FieldInfo,System.Object)">
            <summary>
            Construct a field mapping.
            </summary>
            <param name="reff">The field reference.</param>
            <param name="field">The field.</param>
            <param name="target">The target that holds the field.</param>
        </member>
        <member name="P:Encog.Persist.Persistors.Generic.FieldMapping.Reff">
            <summary>
            The field's reference.
            </summary>
        </member>
        <member name="P:Encog.Persist.Persistors.Generic.FieldMapping.Field">
            <summary>
            The field object.
            </summary>
        </member>
        <member name="P:Encog.Persist.Persistors.Generic.FieldMapping.Target">
            <summary>
            The target object, that holds the field.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationLOGPersistor">
            <summary>
            The Encog persistor used to persist the ActivationLOG class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationLOGPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationLOGPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationCompetitivePersistor">
            <summary>
            The Encog persistor used to persist the ActivationCompetitivePersistor class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.ActivationCompetitivePersistor.ATTRIBUTE_WINNERS">
            <summary>
            The winners attribute.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationCompetitivePersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationCompetitivePersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation">
            <summary>
            MPROP - Multipropagation Training. This is a training technique being
            developed by Jeff Heaton. It is meant to be especially optimal for running on
            multicore and eventually grid computing systems.
            
            MPROP does not currently suppor recurrent networks, this will be addressed in
            a later release.
             - Jeff Heaton
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.threadCount">
            <summary>
            How many threads are being used to train the network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.workers">
            <summary>
            The workers to be used, one for each thread.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.training">
            <summary>
            The training set to be used. This must be an indexable training set to
            that it can be divided by the threads.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.network">
            <summary>
             The neural network to be trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.fallback">
            <summary>
            If it is not worthwhile to do MPROP, then we will fall back to using
            RPROP.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.method">
            <summary>
            The RPROP method being used by the master network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.propagationUtil">
            <summary>
            The propagation utility being used by the master network. This is the
            master training data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.map">
            <summary>
            A map that allows gradients from the worker threads to be quickly copied
            to the master.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Construct a MPROP trainer that will use the number of available
            processors plus 1. If there is only one processor, then threads will not
            be used and this trainer will fall back to RPROP.
            
            Also make sure that there are not so many threads that the training set
            size per thread becomes two small.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training set to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Int32)">
            <summary>
            Construct a multi propagation trainer.
            </summary>
            <param name="network">The network to use.</param>
            <param name="training">The training set to use.</param>
            <param name="threadCount">The thread count to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.CreatePair">
            <summary>
            Create a new neural data pair object of the correct size for the neural
            network that is being trained. This object will be passed to the getPair
            method to allow the neural data pair objects to be copied to it.
            </summary>
            <returns>A new neural data pair object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.Init(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Int32)">
            Construct a MPROP trainer using the specified number of threads. You can
            also call a constructor that determines how many threads to use based on
            the number of processors in the system.
            
            @param network
                       The network to train.
            @param training
                       The set to use.
            @param threadCount
                       The number of threads to use, must be 1 or higher.
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.Iteration">
            <summary>
            Perform one iteration of training. No work is actually done by this
            method, other than providing an indication of what the current error
            level is. The threads are already running in the background and going
            about their own iterations.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.Network">
            <summary>
            The trained neural network. Make sure you call "finishTraining"
            before attempting to access the neural network. Otherwise you
            will end up with a reference to a network that is still being
            updated.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation.Workers">
            <summary>
            The thread workers.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker">
            <summary>
            Worker process for MPROP training. Each worker is given a segment of the
            training data. The workers then train individual neural networks based on
            this training set. Results are merged back with the main neural network each
            iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.owner">
            <summary>
            The object that owns this worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.network">
            <summary>
            The local thread network that is being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.high">
            <summary>
            The high index point in the training data to be used by this individual
            worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.low">
            <summary>
            The low index point in the training data to be used by this individual
            worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.method">
            <summary>
            The RPROP method being used by this worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.propagationUtil">
            <summary>
             The propagation utility being used by this worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.errorCalculation">
            <summary>
            The error calculation object used for this thread.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.error">
            <summary>
            The calculated error for the last iteration of this worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.training">
            <summary>
            The training set that should be used for this worker.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.next">
            <summary>
            THe next worker, useful for SRN networks where context layers must be
            linked. These form a ring, with the last worker linking to the first.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.Data.IIndexable,Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation,System.Int64,System.Int64)">
            <summary>
            Construct a MPROP worker.
            </summary>
            <param name="network">The individual network for this worker, this is cloned from
            the master.</param>
            <param name="training">The training set to use.</param>
            <param name="owner">The MultiPropagation object that this worker belongs to.</param>
            <param name="low">The low training index.</param>
            <param name="high">The high training index.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.Run">
            <summary>
            The thread entry point. This will execute iterations until a shutdown is
            requested.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.Error">
            <summary>
            The error for this worker's last iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.Next">
            <summary>
            The next worker in the ring.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.MPROPWorker.Utility">
            <summary>
            The propagation utility used.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodSingle">
            <summary>
            A very simple neighborhood function that will return 1.0 (full effect)
            for the winning neuron, and 0.0 (no change) for everything else.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Competitive.Neighborhood.NeighborhoodSingle.Function(System.Int32,System.Int32)">
            <summary>
            Determine how much the current neuron should be affected by training
            based on its proximity to the winning neuron.
            </summary>
            <param name="currentNeuron">The current neuron being evaluated.</param>
            <param name="bestNeuron">The winning neuron.</param>
            <returns>The ratio for this neuron's adjustment.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.DirectSynapse">
            <summary>
            A direct synapse will present the entire input array to each of the directly
            connected neurons in the next layer. This layer type is useful when building
            a radial basis neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.DirectSynapse.#ctor">
            <summary>
            Simple default constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.DirectSynapse.#ctor(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Construct a direct synapse between the two specified layers.
            </summary>
            <param name="fromLayer">The starting layer.</param>
            <param name="toLayer">The ending layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.DirectSynapse.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.DirectSynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the output from this synapse.
            </summary>
            <param name="input">The input to this synapse.</param>
            <returns>The output is the same as the input.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.DirectSynapse.CreatePersistor">
            <summary>
            Create a persistor for this type of synapse.
            </summary>
            <returns>A persistor.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.DirectSynapse.WeightMatrix">
            <summary>
            null, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.DirectSynapse.MatrixSize">
            <summary>
            0, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.DirectSynapse.SynapseType">
            <summary>
            The type of synapse that this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.DirectSynapse.IsTeachable">
            <summary>
            False, because this type of synapse is not teachable.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.TickerSymbol">
            <summary>
            A ticker symbol.  Holds the exchange and the symbol.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.TickerSymbol.symbol">
            <summary>
            The ticker symbol.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.TickerSymbol.exchange">
            <summary>
            The exchange.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.TickerSymbol.#ctor(System.String)">
            <summary>
            Construct a ticker symbol with no exchange.
            </summary>
            <param name="symbol">The ticker symbol</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.TickerSymbol.#ctor(System.String,System.String)">
            <summary>
            Construct a ticker symbol with exchange.
            </summary>
            <param name="symbol">The ticker symbol.</param>
            <param name="exchange">The exchange.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.TickerSymbol.Equals(Encog.Neural.NeuralData.Market.TickerSymbol)">
            <summary>
            Determine if two ticker symbols equal each other.
            </summary>
            <param name="other">The other ticker symbol.</param>
            <returns>True if the two symbols equal.</returns>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.TickerSymbol.Symbol">
            <summary>
            The stock symbol.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.TickerSymbol.Exchange">
            <summary>
            The exchange that this stock is on.
            </summary>
        </member>
        <member name="T:Encog.Util.ReflectionUtil">
            <summary>
            A set of C# reflection utilities.
            </summary>
        </member>
        <member name="F:Encog.Util.ReflectionUtil.classMap">
            <summary>
            A map between short class names and the full path names.
            </summary>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.FindField(System.Type,System.String)">
            <summary>
            Find the specified field, look also in superclasses.
            </summary>
            <param name="c">The class to search.</param>
            <param name="name">The name of the field we are looking for.</param>
            <returns>The field.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.GetAllFields(System.Type)">
            <summary>
            Get all of the fields from the specified class as a collection.
            </summary>
            <param name="c">The class to access.</param>
            <returns>All of the fields from this class and subclasses.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.IsSimple(System.Type)">
            <summary>
            Determine if an object is "simple", that is it should be persisted just
            with a .ToString.
            </summary>
            <param name="t">The type object to check.</param>
            <returns>True if the object is simple.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.LoadClassmap">
            <summary>
            Load the classmap file. This allows classes to be resolved using just the
            simple name.
            </summary>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.ResolveEncogClass(System.String)">
            <summary>
            Resolve an encog class using its simple name.
            </summary>
            <param name="name">The simple name of the class.</param>
            <returns>The class requested.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.HasAttribute(System.Reflection.FieldInfo,System.Type)">
            <summary>
            Determine if the specified field has the specified attribute.
            </summary>
            <param name="field">The field to check.</param>
            <param name="t">See if the field has this attribute.</param>
            <returns>True if the field has the specified attribute.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.ShouldAccessField(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Determine if Encog persistence should access the specified field.
            </summary>
            <param name="field">The field to check.</param>
            <param name="isBase">True if this is the actual Encog persisted class(top level)</param>
            <returns>True if the class should be accessed.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.HasAttribute(System.Type,System.Type)">
            <summary>
            Determine if the specified type contains the specified attribute.
            </summary>
            <param name="t">The type.</param>
            <param name="attribute">The attribute.</param>
            <returns>True if the type contains the attribute.</returns>
        </member>
        <member name="M:Encog.Util.ReflectionUtil.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.WeightedSynapsePersistor">
            <summary>
            The Encog persistor used to persist the ActivationBiPolar class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.WeightedSynapsePersistor.TAG_WEIGHTS">
            <summary>
            The weights tag.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.WeightedSynapsePersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.WeightedSynapsePersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.BasicNetworkPersistor">
            <summary>
            The Encog persistor used to persist the BasicNetwork class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_LAYERS">
            <summary>
            The layers tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_SYNAPSES">
            <summary>
            The synapses tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_SYNAPSE">
            <summary>
            The synapse tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_PROPERTIES">
            <summary>
            The properties tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_LOGIC">
            <summary>
            Logic tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_TAGS">
            <summary>
            The tags tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_TAG">
            <summary>
            The tag tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_LAYER">
            <summary>
            The layer synapse.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.TAG_PROPERTY">
            <summary>
            Property tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_ID">
            <summary>
            The id attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_NAME">
            <summary>
            Name attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_VALUE">
            <summary>
            Value tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE">
            <summary>
            The type attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE_INPUT">
            <summary>
            The input layer type.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE_OUTPUT">
            <summary>
            The output layer type.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE_HIDDEN">
            <summary>
            The hidden layer type.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE_BOTH">
            <summary>
            The both layer type.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TYPE_UNKNOWN">
            <summary>
            The unknown layer type.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_FROM">
            <summary>
            The from attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_TO">
            <summary>
            The to attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.ATTRIBUTE_LAYER">
            <summary>
            The layer attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.currentNetwork">
            <summary>
            The network that is being loaded.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.layer2index">
            <summary>
            A mapping from layers to index numbers.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNetworkPersistor.index2layer">
            <summary>
            A mapping from index numbers to layers.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.HandleLayers(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Handle any layers that should be loaded.
            </summary>
            <param name="xmlIn">The XML reader.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.HandleSynapses(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Process any synapses that should be loaded.
            </summary>
            <param name="xmlIn">The XML reader.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.HandleLogic(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the neural logic object.
            </summary>
            <param name="xmlIn">The XML object.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.HandleProperties(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the properties.
            </summary>
            <param name="xmlIn">The XML object.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.SaveLogic(Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the neural logic object.
            </summary>
            <param name="xmlOut">The XML object.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.SaveProperties(Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the neural properties.
            </summary>
            <param name="xmlOut">The xml object.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.SaveLayers(Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the layers to the specified XML writer.
            </summary>
            <param name="xmlOut">The XML writer.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNetworkPersistor.SaveSynapses(Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the synapses to the specified XML writer.
            </summary>
            <param name="xmlOut">The XML writer.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationTANHPersistor">
            <summary>
            The Encog persistor used to persist the ActivationTANH class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationTANHPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationTANHPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Attributes.EGIgnore">
            <summary>
            This annotation is used with Encog generic persistence. It allows a field to
            be flagged as something that should be ignored.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation">
            <summary>
            One problem with the backpropagation algorithm is that the magnitude of the
            partial derivative is usually too large or too small. Further, the learning
            rate is a single value for the entire neural network. The resilient
            propagation learning algorithm uses a special update value(similar to the
            learning rate) for every neuron connection. Further these update values are
            automatically determined, unlike the learning rate of the backpropagation
            algorithm.
            
            For most training situations, we suggest that the resilient propagation
            algorithm (this class) be used for training.
            
            There are a total of three parameters that must be provided to the resilient
            training algorithm. Defaults are provided for each, and in nearly all cases,
            these defaults are acceptable. This makes the resilient propagation algorithm
            one of the easiest and most efficient training algorithms available.
            
            The optional parameters are:
            
            zeroTolerance - How close to zero can a number be to be considered zero. The
            default is 0.00000000000000001.
            
            initialUpdate - What are the initial update values for each matrix value. The
            default is 0.1.
            
            maxStep - What is the largest amount that the update values can step. The
            default is 50.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.DEFAULT_ZERO_TOLERANCE">
            <summary>
            The default zero tolerance.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.POSITIVE_ETA">
            <summary>
            The POSITIVE ETA value.  This is specified by the resilient 
            propagation algorithm.  This is the percentage by which 
            the deltas are increased by if the partial derivative is
            greater than zero.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.NEGATIVE_ETA">
            <summary>
            The NEGATIVE ETA value.  This is specified by the resilient 
            propagation algorithm.  This is the percentage by which 
            the deltas are increased by if the partial derivative is
            less than zero.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.DELTA_MIN">
            <summary>
            The minimum delta value for a weight matrix value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.DEFAULT_INITIAL_UPDATE">
            <summary>
            The starting update for a delta.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.DEFAULT_MAX_STEP">
            <summary>
            The maximum amount a delta can reach.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.zeroTolerance">
            <summary>
            The zero tolerance.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.initialUpdate">
            <summary>
            The initial update value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.maxStep">
            <summary>
            The maximum delta amount.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet)">
            <summary>
            Construct a resilient training object.  Use the defaults for all
            training parameters.  Usually this is the constructor to use as
            the resilient training algorithm is designed for the default 
            parameters to be acceptable for nearly all problems.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training set to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double,System.Double,System.Double)">
            <summary>
            Construct a resilient training object, allow the training parameters
            to be specified.  Usually the default parameters are acceptable for
            the resilient training algorithm.  Therefore you should usually
            use the other constructor, that makes use of the default values.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training set to use.</param>
            <param name="zeroTolerance">The zero tolerance.</param>
            <param name="initialUpdate">The initial update values, this is the amount 
            that the deltas are all initially set to.</param>
            <param name="maxStep">The maximum that a delta can reach.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.InitialUpdate">
            <summary>
            The initial update amount, set by the constructor.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.MaxStep">
            <summary>
            The maximum step, set by the constructor.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagation.ZeroTolerance">
            <summary>
            The zero tolerance, set by the constructor.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod">
            <summary>
            Implements the specifics of the Manhattan propagation algorithm. This class
            actually handles the updates to the weight matrix.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.zeroTolerance">
            <summary>
            The zero tolerance to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.learningRate">
            <summary>
            The learning rate to use. This is the Manhattan update constant.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.propagationUtil">
            <summary>
            The propagation util.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.pderv">
            <summary>
            The partial derivative utility class.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.#ctor(System.Double,System.Double)">
            <summary>
            Construct a Manhattan update trainer.
            </summary>
            <param name="zeroTolerance">The zero tolerance to use.</param>
            <param name="learningRate">The learning rate to use, this is the Manhattan update
            constant.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.CalculateError(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Calculate the error between these two levels.
            </summary>
            <param name="output">The output to the "to level".</param>
            <param name="fromLevel">The from level.</param>
            <param name="toLevel">The target level.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.DetermineChange(System.Double)">
            <summary>
            Determine the change that should be applied.  If the partial
            derivative was zero(or close enough to zero) then do nothing
            otherwise apply the learning rate with the same sign as the
            partial derivative.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.Init(Encog.Neural.Networks.Training.Propagation.PropagationUtil)">
            <summary>
            Init with the specified propagation object.
            </summary>
            <param name="propagationUtil">The propagation object that this method will be used with.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.Learn">
            <summary>
            Modify the weight matrix and thresholds based on the last call to
            calcError.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.LearnLevel(Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Apply learning for this level.  This is where the weight matrixes
            are actually changed. This method will call learnSynapse for each
            of the synapses on this level.
            </summary>
            <param name="level">The level that is to learn.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagationMethod.LearnSynapse(Encog.Neural.Networks.Training.Propagation.PropagationSynapse)">
            <summary>
            Learn from the last error calculation.
            </summary>
            <param name="synapse">The synapse that is to learn.</param>
        </member>
        <member name="T:Encog.Neural.Networks.Prune.PruneSelective">
            <summary>
            Prune a neural network selectivly. This class allows you to either add or
            remove neurons from layers of a neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneSelective.network">
            <summary>
            The network being processed.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.PruneSelective.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.#ctor(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Construct an object prune the neural network.
            </summary>
            <param name="network">The network to prune.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.ChangeNeuronCount(Encog.Neural.Networks.Layers.ILayer,System.Int32)">
            <summary>
            Change the neuron count for the network. If the count is increased then a
            zero-weighted neuron is added, which will not affect the output of the
            neural network. If the neuron count is decreased, then the weakest neuron
            will be removed.
            </summary>
            <param name="layer">The layer to adjust.</param>
            <param name="neuronCount">The new neuron count for this layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.DecreaseNeuronCount(Encog.Neural.Networks.Layers.ILayer,System.Int32)">
            <summary>
            Internal function to decrease the neuron count of a layer.
            </summary>
            <param name="layer">The layer to affect.</param>
            <param name="neuronCount">The new neuron count.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.DetermineNeuronSignificance(Encog.Neural.Networks.Layers.ILayer,System.Int32)">
            <summary>
            Determine the significance of the neuron. The higher the return value,
            the more significant the neuron is.
            </summary>
            <param name="layer">The layer to query.</param>
            <param name="neuron">The neuron to query.</param>
            <returns>How significant is this neuron.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.IncreaseNeuronCount(Encog.Neural.Networks.Layers.ILayer,System.Int32)">
            <summary>
            Internal function to increase the neuron count. This will add a
            zero-weight neuron to this layer.
            </summary>
            <param name="layer">The layer to increase.</param>
            <param name="neuronCount">The new neuron count.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.PruneSelective.Prune(Encog.Neural.Networks.Layers.ILayer,System.Int32)">
            <summary>
            Prune one of the neurons from this layer. Remove all entries in this
            weight matrix and other layers.
            </summary>
            <param name="targetLayer">The neuron to prune. Zero specifies the first neuron.</param>
            <param name="neuron">The neuron to prune.</param>
        </member>
        <member name="T:Encog.Neural.Data.TextData">
            <summary>
            An Encog object that can hold text data. This object can be stored in an
            Encog persisted file.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.TextData.text">
            <summary>
            The text data that is stored.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.TextData.name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.TextData.description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.TextData.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.TextData.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A cloned version of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.TextData.CreatePersistor">
            <summary>
            Create a persistor to store this object.
            </summary>
            <returns>A persistor.</returns>
        </member>
        <member name="P:Encog.Neural.Data.TextData.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.TextData.Description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.TextData.Text">
            <summary>
            The text that this object holds.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationLOG">
            <summary>
            An activation function based on the logarithm function.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLOG.ActivationFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLOG.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>The object cloned.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLOG.CreatePersistor">
            <summary>
            Create a Persistor for this activation function.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationLOG.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function derivative.  The array is modified 
            according derivative of the activation function being used.  See the 
            class description for more specific information on this type of 
            activation function. Propagation training requires the derivative. 
            Some activation functions do not support a derivative and will throw
            an error.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationLOG.HasDerivative">
            <summary>
            Return true, log has a derivative.
            </summary>
        </member>
        <member name="T:Encog.Matrix.Matrix">
            <summary>
            Matrix: This class implements a mathematical matrix.  Matrix
            math is very important to neural network processing.  Many
            of the classes developed in this book will make use of the
            matrix classes in this package.
            </summary>
        </member>
        <member name="M:Encog.Matrix.Matrix.CreateColumnMatrix(System.Double[])">
            <summary>
            Create a matrix that is a single column.
            </summary>
            <param name="input">A 1D array to make the matrix from.</param>
            <returns>A matrix that contains a single column.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.CreateRowMatrix(System.Double[])">
            <summary>
            Create a matrix that is a single row.
            </summary>
            <param name="input">A 1D array to make the matrix from.</param>
            <returns>A matrix that contans a single row.</returns>
        </member>
        <member name="F:Encog.Matrix.Matrix.matrix">
            <summary>
            The matrix data, stored as a 2D array.
            </summary>
        </member>
        <member name="M:Encog.Matrix.Matrix.#ctor(System.Boolean[][])">
            <summary>
            Construct a matrix from a 2D boolean array.  Translate true to 1, false to -1.
            </summary>
            <param name="sourceMatrix">A 2D array to construcat the matrix from.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.#ctor(System.Double[][])">
            <summary>
            Construct a matrix from a 2D double array.
            </summary>
            <param name="sourceMatrix">A 2D double array.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a blank matrix with the specified number of rows and columns.
            </summary>
            <param name="rows">How many rows.</param>
            <param name="cols">How many columns.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.Add(System.Int32,System.Int32,System.Double)">
            <summary>
            Add the specified value to the specified row and column of the matrix.
            </summary>
            <param name="row">The row to add to.</param>
            <param name="col">The column to add to.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.Clear">
            <summary>
            Clear the matrix.
            </summary>
        </member>
        <member name="M:Encog.Matrix.Matrix.Clone">
            <summary>
            Clone the matrix.
            </summary>
            <returns>A cloned copy of the matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.Equals(Encog.Matrix.Matrix)">
            <summary>
            Determine if this matrix is equal to another.  Use a precision of 10 decimal places.
            </summary>
            <param name="matrix">The other matrix to compare.</param>
            <returns>True if the two matrixes are equal.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.equals(Encog.Matrix.Matrix,System.Int32)">
            <summary>
            Compare the matrix to another with the specified level of precision.
            </summary>
            <param name="matrix">The other matrix to compare.</param>
            <param name="precision">The number of decimal places of precision to use.</param>
            <returns>True if the two matrixes are equal.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.FromPackedArray(System.Double[],System.Int32)">
            <summary>
            Take the values of thie matrix from a packed array.
            </summary>
            <param name="array">The packed array to read the matrix from.</param>
            <param name="index">The index to begin reading at in the array.</param>
            <returns>The new index after this matrix has been read.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.GetCol(System.Int32)">
            <summary>
            Get one column from this matrix as a column matrix.
            </summary>
            <param name="col">The desired column.</param>
            <returns>The column matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.GetRow(System.Int32)">
            <summary>
            Get the specified row as a row matrix.
            </summary>
            <param name="row">The desired row.</param>
            <returns>A row matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.IsVector">
            <summary>
            Determine if this matrix is a vector.  A vector matrix only has a single row or column.
            </summary>
            <returns>True if this matrix is a vector.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.IsZero">
            <summary>
            Determine if all of the values in the matrix are zero.
            </summary>
            <returns>True if all of the values in the matrix are zero.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.Ramdomize(System.Double,System.Double)">
            <summary>
            Fill the matrix with random values in the specified range.
            </summary>
            <param name="min">The minimum value for the random numbers.</param>
            <param name="max">The maximum value for the random numbers.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.Sum">
            <summary>
            Sum all of the values in the matrix.
            </summary>
            <returns>The sum of all of the values in the matrix.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.ToPackedArray">
            <summary>
            Convert the matrix to a packed array.
            </summary>
            <returns>A packed array.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.Validate(System.Int32,System.Int32)">
            <summary>
            Validate that the specified row and column are inside of the range of the matrix.
            </summary>
            <param name="row">The row to check.</param>
            <param name="col">The column to check.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.CreatePersistor">
            <summary>
            Create a persistor for this object.
            </summary>
            <returns>A persistor for this object.</returns>
        </member>
        <member name="M:Encog.Matrix.Matrix.Add(Encog.Matrix.Matrix)">
            <summary>
            Add the specified matrix to this matrix.  This will modify the matrix
            to hold the result of the addition.
            </summary>
            <param name="matrix">The matrix to add.</param>
        </member>
        <member name="M:Encog.Matrix.Matrix.Set(System.Double)">
            <summary>
            Set every value in the matrix to the specified value.
            </summary>
            <param name="value">The value to set the matrix to.</param>
        </member>
        <member name="P:Encog.Matrix.Matrix.Description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="P:Encog.Matrix.Matrix.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Matrix.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Allows index access to the elements of the matrix.
            Warning: This can be a somewhat slow way to access the matrix.  
            Do not put this in performance critical loops.  Make sure to use
            the Data property and access the matrix array directly.
            </summary>
            <param name="row">The row to access.</param>
            <param name="col">The column to access.</param>
            <returns>The element at the specified position in the matrix.</returns>
        </member>
        <member name="P:Encog.Matrix.Matrix.Cols">
            <summary>
            Get the number of columns in this matrix
            </summary>
        </member>
        <member name="P:Encog.Matrix.Matrix.Rows">
            <summary>
            Get the number of rows in this matrix
            </summary>
        </member>
        <member name="P:Encog.Matrix.Matrix.Size">
            <summary>
            Get the size fo the matrix.  This is thr rows times the columns.
            </summary>
        </member>
        <member name="P:Encog.Matrix.Matrix.Data">
            <summary>
            Get the matrix array for this matrix.
            </summary>
        </member>
        <member name="T:Encog.Bot.DataUnits.TagDataUnit">
            <summary>
            A data unit that holds a tag.
            </summary>
        </member>
        <member name="F:Encog.Bot.DataUnits.TagDataUnit.tag">
            <summary>
            The tag for this data unit.
            </summary>
        </member>
        <member name="P:Encog.Bot.DataUnits.TagDataUnit.Tag">
            <summary>
            The tag that this data unit is based on.
            </summary>
        </member>
        <member name="T:Encog.Bot.DataUnits.CodeDataUnit">
            <summary>
            A data unit that holds code.
            </summary>
        </member>
        <member name="F:Encog.Bot.DataUnits.CodeDataUnit.code">
            <summary>
            The code for this data unit.
            </summary>
        </member>
        <member name="M:Encog.Bot.DataUnits.CodeDataUnit.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.DataUnits.CodeDataUnit.Code">
            <summary>
            The code for this data unit.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Extract.BasicExtract">
            <summary>
            Implements the basic functionality that most extractors will need to
            implement. Mostly this involves maintaining a collection of the extraction
            listeners that will receive events as the extraction occurs.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Extract.BasicExtract.listeners">
            <summary>
            The classes registered as listeners for the extraction.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.BasicExtract.AddListener(Encog.Bot.Browse.Extract.IExtractListener)">
            <summary>
            Add a listener for the extraction.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.BasicExtract.Distribute(System.Object)">
            <summary>
            Distribute an object to the listeners.
            </summary>
            <param name="obj">The object to be distributed.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.BasicExtract.ExtractList(Encog.Bot.Browse.WebPage)">
            <summary>
            Extract from the web page and return the results as a list.
            </summary>
            <param name="page">The web page to extract from.</param>
            <returns>The results of the extraction as a List.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.BasicExtract.RemoveListener(Encog.Bot.Browse.Extract.IExtractListener)">
            <summary>
            Remove the specified listener.
            </summary>
            <param name="listener">The listener to rmove.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Extract.BasicExtract.Extract(Encog.Bot.Browse.WebPage)">
            <summary>
            Extract data from the web page.
            </summary>
            <param name="page">The page to extract from.</param>
        </member>
        <member name="P:Encog.Bot.Browse.Extract.BasicExtract.Listeners">
            <summary>
            A list of listeners registered with this object.
            </summary>
        </member>
        <member name="T:Encog.Util.MathUtil.ThreadSafeRandom">
            <summary>
            A thread safe random number generator.
            </summary>
        </member>
        <member name="F:Encog.Util.MathUtil.ThreadSafeRandom.random">
            <summary>
            A non-thread-safe random number generator that uses a time-based seed.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.ThreadSafeRandom.NextDouble">
            <summary>
            Generate a random number between 0 and 1.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Encog.Util.MathUtil.Convert">
            <summary>
            This class is used to convert strings into numeric values.  If the
            string holds a non-numeric value, a zero is returned.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.Convert.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.MathUtil.Convert.String2double(System.String)">
            <summary>
            Convert a string to a double.  Just make the number a zero
            if the string is invalid.
            </summary>
            <param name="str">The string.</param>
            <returns>The string converted to numeric.</returns>
        </member>
        <member name="M:Encog.Util.MathUtil.Convert.String2int(System.String)">
            <summary>
            Convert a string to an int.  Just make the number a zero
            if the string is invalid.
            </summary>
            <param name="str">The string.</param>
            <returns>The string converted to numeric.</returns>
        </member>
        <member name="T:Encog.Persist.Persistors.OneToOneSynapsePersistor">
            <summary>
            The Encog persistor used to persist the OneToOneSynapse class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.OneToOneSynapsePersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.OneToOneSynapsePersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Persistors.BasicNeuralDataSetPersistor">
            <summary>
            The Encog persistor used to persist the BasicNeuralDataSet class.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.TAG_ITEM">
            <summary>
            The item tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.TAG_INPUT">
            <summary>
            The input tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.TAG_IDEAL">
            <summary>
            THe ideal tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.currentDataSet">
            <summary>
            The current data set being loaded.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.HandleItem(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Handle reading an item tag.
            </summary>
            <param name="xmlIn">The XML reader.</param>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.BasicNeuralDataSetPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="xmlOut"></param>
        </member>
        <member name="T:Encog.Persist.Persistors.ActivationLinearPersistor">
            <summary>
            The Encog persistor used to persist the ActivationLinear class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationLinearPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlIn">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.ActivationLinearPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlOut">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.DirectoryEntry">
            <summary>
            The idea of the Encog persisted collection is that the entire file might be
            quite long and should not be read into memory in its entirity. Directory
            entry classes allow you to list the contents of a file without loading the
            entire file.
            </summary>
        </member>
        <member name="F:Encog.Persist.DirectoryEntry.type">
            <summary>
            The type of object that this is.
            </summary>
        </member>
        <member name="F:Encog.Persist.DirectoryEntry.name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="F:Encog.Persist.DirectoryEntry.description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.#ctor(Encog.Persist.IEncogPersistedObject)">
            <summary>
            Construct a directory entry for the specified object.
            </summary>
            <param name="obj">The Encog object.</param>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a directory entry from strings.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The name of this object.</param>
            <param name="description">The description for this object.</param>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.CompareTo(System.Object)">
            <summary>
            Compare the two objects.
            </summary>
            <param name="other">The other object.</param>
            <returns>0 if equal.</returns>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.Equals(System.Object)">
            <summary>
            Returns true if the two objects are equal.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.GetHashCode">
            <summary>
            Create a simple hash code for this object.
            </summary>
            <returns>A simple hash code for this object.</returns>
        </member>
        <member name="M:Encog.Persist.DirectoryEntry.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="P:Encog.Persist.DirectoryEntry.Description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="P:Encog.Persist.DirectoryEntry.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Persist.DirectoryEntry.Type">
            <summary>
            The type of this object.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.InputFieldCSV">
            <summary>
            An input field based on a CSV file.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldCSV.file">
            <summary>
            The file to read.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldCSV.offset">
            <summary>
            The CSV column represented by this field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldCSV.#ctor">
            <summary>
            Construct an InputFieldCSV with the default constructor.  This is mainly
            used for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldCSV.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Construct a input field for a CSV file.
            </summary>
            <param name="usedForNetworkInput">True if this field is used for actual 
            input to the neural network, as opposed to segregation only.</param>
            <param name="file">The tile to read.</param>
            <param name="offset">The CSV file column to read.</param>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldCSV.File">
            <summary>
            The file being read.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldCSV.Offset">
            <summary>
            The column in this CSV file to read.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Simple.TrainAdaline">
            <summary>
            Train an ADALINE neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Simple.TrainAdaline.network">
            <summary>
            The network to train.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Simple.TrainAdaline.synapse">
            <summary>
            The synapse to train.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Simple.TrainAdaline.training">
            <summary>
            The training data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Simple.TrainAdaline.learningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Simple.TrainAdaline.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double)">
            <summary>
            Construct he ADALINE trainer.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training set.</param>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Simple.TrainAdaline.Iteration">
            <summary>
            Perform a training iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Simple.TrainAdaline.Network">
            <summary>
            The network to be trained.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Simple.TrainAdaline.LearningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod">
            <summary>
            Implements the specifics of the resilient propagation training algorithm.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.zeroTolerance">
            <summary>
            The zero tolerance.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.maxStep">
            <summary>
            The maximum step a delta can take.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.initialUpdate">
            <summary>
            The intial values for the deltas.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.propagationUtil">
            <summary>
            The propagation class that this method is used with.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.pderv">
            <summary>
            Utility class to calculate the partial derivative.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a resilient propagation method.
            </summary>
            <param name="zeroTolerance">The zero tolerance.</param>
            <param name="maxStep">The max step.</param>
            <param name="initialUpdate">The initial update.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.Init(Encog.Neural.Networks.Training.Propagation.PropagationUtil)">
            <summary>
            Init with the specified propagation object.
            </summary>
            <param name="propagationUtil">The propagation object that this method will be used with.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.CalculateError(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Calculate the error between these two levels.
            </summary>
            <param name="output">The output to the "to level".</param>
            <param name="fromLevel">The from level.</param>
            <param name="toLevel">The target level.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.Learn">
            <summary>
            Modify the weight matrix and thresholds based on the last call to
            calcError.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.LearnLevel(Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Apply the learning to the specified level.
            </summary>
            <param name="level">The level that is to learn.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.LearnSynapse(Encog.Neural.Networks.Training.Propagation.PropagationSynapse)">
            <summary>
            Learn from the last error calculation.
            </summary>
            <param name="synapse">The synapse to teach.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Resilient.ResilientPropagationMethod.Sign(System.Double)">
            <summary>
            Determine the sign of the value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>-1 if less than zero, 1 if greater, or 0 if zero.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod">
            <summary>
            This class implements the specifics of how the backpropagation algorithm is
            used. Specifically, the partial derivatives are simply applied to the weight
            matrix.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.propagationUtil">
            <summary>
            The backpropagation class that owns this method.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.learningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.momentum">
            <summary>
            The momentum.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.pderv">
            <summary>
            Utility class to calculate the partial derivatives.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.#ctor(System.Double,System.Double)">
            <summary>
            Construct a back propagation method.
            </summary>
            <param name="learningRate">The learning rate to use.</param>
            <param name="momentum"> The momentum to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.CalculateError(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Calculate the error between these two levels.
            </summary>
            <param name="output"> The output to the "to level".</param>
            <param name="fromLevel">The from level.</param>
            <param name="toLevel">The target level.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.Init(Encog.Neural.Networks.Training.Propagation.PropagationUtil)">
            <summary>
            Setup this propagation method using the specified propagation class.
            </summary>
            <param name="propagationUtil">The propagation class creating this method.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.Learn">
            <summary>
            Modify the weight matrix and thresholds based on the last call to
            calcError.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.LearnLevel(Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Apply learning to this level.
            </summary>
            <param name="level">The level that is to learn.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Back.BackpropagationMethod.LearnSynapse(Encog.Neural.Networks.Training.Propagation.PropagationSynapse)">
            <summary>
            Teach this synapse, based on the error that was calculated earlier.
            </summary>
            <param name="synapse">The synapse that is to learn.</param>
        </member>
        <member name="T:Encog.Neural.Networks.NeuralOutputHolder">
            <summary>
            Holds the output from each layer of the neural network. This is very useful
            for the propagation algorithms that need to examine the output of each
            individual layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralOutputHolder.result">
            <summary>
            The results from each of the synapses.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralOutputHolder.output">
            <summary>
            The output from the entire neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.NeuralOutputHolder.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NeuralOutputHolder.#ctor">
            <summary>
            Construct an empty holder.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralOutputHolder.Output">
            <summary>
            The output from the neural network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.NeuralOutputHolder.Result">
            <summary>
            The result from the synapses in a map.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.Loader.LoaderError">
            <summary>
            The base error for when market data is loaded.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.LoaderError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.LoaderError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData">
            <summary>
            Market data loaded from a source.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.when">
            <summary>
            When was this data sample taken.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.ticker">
            <summary>
            What is the ticker symbol for this data sample.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.data">
            <summary>
            The data that was collection for the sample date.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.SetData(Encog.Neural.NeuralData.Market.MarketDataType,System.Double)">
            <summary>
            Set the specified type of data.
            </summary>
            <param name="t">The type of data to set.</param>
            <param name="d">The value to set.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.GetData(Encog.Neural.NeuralData.Market.MarketDataType)">
            <summary>
            Get the specified data type.
            </summary>
            <param name="t">The type of data to get.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.#ctor(System.DateTime,Encog.Neural.NeuralData.Market.TickerSymbol)">
            <summary>
            Construct one sample of market data.
            </summary>
            <param name="when">When was this sample taken.</param>
            <param name="ticker">What is the ticker symbol for this data.</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.When">
            <summary>
            When is this data from.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.Ticker">
            <summary>
            The ticker symbol that this data was from.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Market.Loader.LoadedMarketData.Data">
            <summary>
            The data that was downloaded.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData">
            <summary>
            A NeuralData implementation designed to work with bipolar data.
            Bipolar data contains two values.  True is stored as 1, and false
            is stored as -1.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.data">
            <summary>
            The data held by this object.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.#ctor(System.Boolean[])">
            <summary>
            Construct this object with the specified data. 
            </summary>
            <param name="d">The data to create this object with.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.#ctor(System.Int32)">
            <summary>
            Construct a data object with the specified size.
            </summary>
            <param name="size">The size of this data object.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.GetBoolean(System.Int32)">
            <summary>
            Get the specified data item as a boolean.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.SetBoolean(System.Int32,System.Boolean)">
            <summary>
            Set the value as a boolean.
            </summary>
            <param name="index">The index.</param>
            <param name="b">The boolean value.</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.Item(System.Int32)">
            <summary>
            Allowes indexed access to the data.
            </summary>
            <param name="x">The index.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.Data">
            <summary>
            Get the data as an array.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Bipolar.BiPolarNeuralData.Count">
            <summary>
            The size of the array.
            </summary>
        </member>
        <member name="T:Encog.Neural.Activation.ActivationCompetitive">
            <summary>
            An activation function that only allows a specified number, usually one,  
            of the out-bound connection to win.  These connections will share in the 
            sum of the output, whereas the other neurons will recieve zero.
            
             This activation function can be useful for "winner take all" layers.
            </summary>
        </member>
        <member name="F:Encog.Neural.Activation.ActivationCompetitive.maxWinners">
            <summary>
            How many winning neurons are allowed.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationCompetitive.#ctor(System.Int32)">
            <summary>
            Create a competitive activation function with the specified maximum
            number of winners.
            </summary>
            <param name="winners">The maximum number of winners that this function supports.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationCompetitive.#ctor">
            <summary>
            Create a competitive activation function with one winner allowed.
            </summary>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationCompetitive.ActivationCompetitivePersistor">
            <summary>
            Create a persistor for this object.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationCompetitive.ActivationFunction(System.Double[])">
            <summary>
            Calculate the activation function.
            </summary>
            <param name="d">The input.</param>
        </member>
        <member name="M:Encog.Neural.Activation.ActivationCompetitive.DerivativeFunction(System.Double[])">
            <summary>
            Implements the activation function.  The array is modified according
            to the activation function being used.  See the class description
            for more specific information on this type of activation function.
            </summary>
            <param name="d">The input array to the activation function.</param>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationCompetitive.HasDerivative">
            <summary>
            False, indication that no derivative is available for htis
            function.
            </summary>
        </member>
        <member name="P:Encog.Neural.Activation.ActivationCompetitive.MaxWinners">
            <summary>
            The maximum number of winners this function supports.
            </summary>
        </member>
        <member name="T:Encog.Util.ObjectCloner">
            <summary>
            A simple Object cloner that uses serialization. Actually works really well
            for the somewhat complex nature of BasicNetwork. Performs a deep copy without
            all the headache of programming a custom clone.
            
            From a Java example at:
            
            http://www.javaworld.com/javaworld/javatips/jw-javatip76.html?page=2
            
            </summary>
        </member>
        <member name="M:Encog.Util.ObjectCloner.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Util.ObjectCloner.DeepCopy(System.Object)">
            <summary>
            Perform a deep copy.
            </summary>
            <param name="oldObj">The old object.</param>
            <returns>The new object.</returns>
        </member>
        <member name="T:Encog.Persist.PersistWriter">
            <summary>
            Utility class for writing Encog persisted class files.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistWriter.xmlOut">
            <summary>
            The XML writer.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistWriter.fileOutput">
            <summary>
            The output stream.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistWriter.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.#ctor(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Create a writer for the specified location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Encog.Persist.PersistWriter.Begin">
            <summary>
            Begin an Encog document.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.BeginObjects">
            <summary>
            Begin the objects collection.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.Close">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.End">
            <summary>
            End the document.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.EndObjects">
            <summary>
            End the objects collection.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.MergeObjects(Encog.Persist.Location.IPersistenceLocation,System.String)">
            <summary>
            Merge the objects from this collection into the new one.
            Skip the specified object.
            </summary>
            <param name="location">The location to merge to.</param>
            <param name="skip">The object to skip.</param>
        </member>
        <member name="M:Encog.Persist.PersistWriter.ModifyObject(Encog.Persist.Location.IPersistenceLocation,System.String,System.String,System.String)">
            <summary>
            Modify the specified object, such as changing its name or
            description.
            </summary>
            <param name="location">The location of the object being modified.</param>
            <param name="name">The old name of the object being modified.</param>
            <param name="newName">The new name of the object being modified.</param>
            <param name="newDesc">The new description of the object being modified.</param>
        </member>
        <member name="M:Encog.Persist.PersistWriter.WriteHeader">
            <summary>
            Write the header for the Encog file.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistWriter.WriteObject(Encog.Persist.IEncogPersistedObject)">
            <summary>
            Write an object.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="T:Encog.Persist.PersistReader">
            <summary>
            Utility class for reading Encog persited object files.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistReader.ATTRIBUTE_NAME">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistReader.TAG_OBJECTS">
            <summary>
            The objects tag.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistReader.xmlIn">
            <summary>
            The XML reader.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistReader.fileInput">
            <summary>
            The input stream.
            </summary>
        </member>
        <member name="F:Encog.Persist.PersistReader.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistReader.#ctor(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Construct a persist reader.
            </summary>
            <param name="location">The location to use.</param>
        </member>
        <member name="M:Encog.Persist.PersistReader.Advance(System.String)">
            <summary>
            Advance to the specified object.
            </summary>
            <param name="name">The name of the object looking for.</param>
            <returns>The beginning element of the object found.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.AdvanceToTag(System.String)">
            <summary>
            Advance to the specified tag.
            </summary>
            <param name="tag">The tag to advance to.</param>
            <returns>True if the tag was found.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.AdvanceObjects(System.String)">
            <summary>
            Once you are in the objects collection, advance to a specific object.
            </summary>
            <param name="name"></param>
            <returns>The beginning tag of that object if its found, null otherwise.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.AdvanceObjectsCollection">
            <summary>
            Advance to the objects collection.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistReader.BuildDirectory">
            <summary>
            Build a directory entry list for the file.
            </summary>
            <returns>A list of objects in the file.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.Close">
            <summary>
            Close the file.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistReader.CopyAttributes(Encog.Parse.Tags.Write.WriteXML,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Copy all of the attributes to the writer.
            </summary>
            <param name="xmlOut">The XML writer.</param>
            <param name="replace">A map of attributes to replace.  This allows
            new values to be specified for select attributes.</param>
        </member>
        <member name="M:Encog.Persist.PersistReader.CopyXML(Encog.Parse.Tags.Write.WriteXML,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Copy an XML object, no need to know what it contains, just
            copy it.  This way we will not damage unknown objects during
            a merge.
            </summary>
            <param name="xmlOut">The XML writer.</param>
            <param name="replace"></param>
        </member>
        <member name="M:Encog.Persist.PersistReader.ReadNextTag(System.String)">
            <summary>
            Read until the next tag of the specified name.
            </summary>
            <param name="name">The name searched for.</param>
            <returns>True if the tag was found.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.ReadNextText(System.String)">
            <summary>
            Read all text until the specified ending tag is found.
            </summary>
            <param name="name">The tag.</param>
            <returns>The text found.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.ReadObject(System.String)">
            <summary>
            Read the specific object, search through the objects until its found.
            </summary>
            <param name="name">The name of the object you are looking for.</param>
            <returns>The object found, null if not found.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.ReadValue(System.String)">
            <summary>
            Read the value in a period delimited string. For example
            property.name.value.
            </summary>
            <param name="name">The property to read.</param>
            <returns>The value found at the specified property.</returns>
        </member>
        <member name="M:Encog.Persist.PersistReader.SaveModified(Encog.Parse.Tags.Write.WriteXML,System.String,System.String,System.String)">
            <summary>
            Modify the properties of this object.
            </summary>
            <param name="xmlOut">The XML writer.</param>
            <param name="targetName">The name of the object to change.</param>
            <param name="newName">The new name of this object.</param>
            <param name="newDesc">The new description of this object.</param>
        </member>
        <member name="M:Encog.Persist.PersistReader.SaveTo(Encog.Parse.Tags.Write.WriteXML,System.String)">
            <summary>
            Save all objects to the specified steam, skip the one specified by the
            skip parameter. Do not attempt to understand the structure, just copy.
            </summary>
            <param name="xmlOut">The XML writer to save the objects to.</param>
            <param name="skip">The object to skip.</param>
        </member>
        <member name="M:Encog.Persist.PersistReader.SkipObject">
            <summary>
            Skip the current object.
            </summary>
        </member>
        <member name="M:Encog.Persist.PersistReader.ReadHeader">
            <summary>
            Read an Encog header.
            </summary>
            <returns>The Encog header.</returns>
        </member>
        <member name="P:Encog.Persist.PersistReader.XMLInput">
            <summary>
            The ReadXML object used to access XML.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.RangeSegregator">
            <summary>
            Range segregators are used to segregate data and include or exclude if it is
            within a certain range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.RangeSegregator.sourceField">
            <summary>
            The source field that this is based on.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.RangeSegregator.include">
            <summary>
            If none of the ranges match, should this data be included.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.RangeSegregator.ranges">
            <summary>
            The ranges.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.RangeSegregator.normalization">
            <summary>
            The normalization object.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.#ctor(Encog.Normalize.Input.IInputField,System.Boolean)">
            <summary>
            Construct a range segregator.
            </summary>
            <param name="sourceField">The source field.</param>
            <param name="include">Default action, if the data is not in any of the ranges,
            should it be included.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.AddRange(System.Double,System.Double,System.Boolean)">
            <summary>
            Add a range.
            </summary>
            <param name="low">The low end of the range.</param>
            <param name="high">The high end of the range.</param>
            <param name="include">Should this range be included.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.AddRange(Encog.Normalize.Segregate.SegregationRange)">
            <summary>
            Add a range.
            </summary>
            <param name="range">The range to add.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.Init(Encog.Normalize.DataNormalization)">
            <summary>
            Init the object.
            </summary>
            <param name="normalization">The normalization object that owns this range.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.ShouldInclude">
            <summary>
            True if the current row should be included according to this
            segregator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Normalize.Segregate.RangeSegregator.PassInit">
            <summary>
            Init for pass... nothing to do fo this class.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.RangeSegregator.Owner">
            <summary>
            The normalization object used by this object.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.RangeSegregator.SourceField">
            <summary>
            The source field that the ranges are compared against.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.Index.IndexRangeSegregator">
            <summary>
            An index segregator is used to segregate the data according to its index.
            Nothing about the data is actually compared. This makes the index range
            segregator very useful for breaking the data into training and validation
            sets. For example, you could very easily determine that 70% of the data is
            for training, and 30% for validation.
            
            This segregator takes a starting and ending index. Everything that is between
            these two indexes will be used.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexRangeSegregator.startingIndex">
            <summary>
            The starting index.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.Index.IndexRangeSegregator.endingIndex">
            <summary>
            The ending index.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexRangeSegregator.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexRangeSegregator.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an index range segregator.
            </summary>
            <param name="startingIndex">The starting index to allow.</param>
            <param name="endingIndex">The ending index to allow.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.Index.IndexRangeSegregator.ShouldInclude">
            <summary>
            Determines if the current row should be included.
            </summary>
            <returns>True if the current row should be included.</returns>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexRangeSegregator.EndingIndex">
            <summary>
            The ending index.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.Index.IndexRangeSegregator.StartingIndex">
            <summary>
            The starting index.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Input.InputFieldNeuralDataSet">
            <summary>
            An input field based on an Encog NeuralDataSet.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldNeuralDataSet.data">
            <summary>
            The data set.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Input.InputFieldNeuralDataSet.offset">
            <summary>
            The input or ideal index.  This treats the input and ideal as one
            long array, concatenated together.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Input.InputFieldNeuralDataSet.#ctor(System.Boolean,Encog.Neural.NeuralData.INeuralDataSet,System.Int32)">
            <summary>
            Construct a input field based on a NeuralDataSet.
            </summary>
            <param name="usedForNetworkInput">Is this field used for neural input.</param>
            <param name="data">The data set to use.</param>
            <param name="offset">The input or ideal index to use. This treats the input 
            and ideal as one long array, concatenated together.</param>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldNeuralDataSet.NeuralDataSet">
            <summary>
            The neural data set to read.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Input.InputFieldNeuralDataSet.Offset">
            <summary>
            The field to be accessed. This treats the input and 
            ideal as one long array, concatenated together.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.PropagationSynapse">
            <summary>
            The back propagation training algorithms requires training data to be stored
            for each of the synapses. The propagation class creates a PropagationSynapse
            object for each of the synapses in the neural network that it is training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.AccMatrixGradients">
            <summary>
            Accumulate the error deltas for each weight matrix and bias value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.LastMatrixGradients">
            <summary>
            Hold the previous matrix deltas so that "momentum" and other methods can
            be implemented. This handles both weights and thresholds.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.Synapse">
            <summary>
            The actual layer that this training layer corresponds to.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.Deltas">
            <summary>
            The deltas that will be applied to the weight matrix in some propagation
            techniques.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.#ctor(Encog.Neural.Networks.Synapse.ISynapse)">
            <summary>
            Construct a PropagationSynapse object that corresponds to a specific
            synapse.
            </summary>
            <param name="synapse">The back propagation training object.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationSynapse.ToString">
            <summary>
            This object as a string.
            </summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.CPN.TrainOutstar">
            <summary>
            Used for Instar training of a CPN neural network. A CPN network is a hybrid
            supervised/unsupervised network. The Outstar training handles the supervised
            portion of the training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainOutstar.learningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainOutstar.network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainOutstar.training">
            <summary>
            The training data.  Supervised training, so both input and ideal must
            be provided.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainOutstar.mustInit">
            <summary>
            If the weights have not been initialized, then they must be initialized
            before training begins. This will be done on the first iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.CPN.TrainOutstar.parts">
            <summary>
            The parts of this CPN network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainOutstar.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double)">
            <summary>
            Construct the outstar trainer.
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training data, must provide ideal outputs.</param>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainOutstar.InitWeight">
            <summary>
            Approximate the weights based on the input values.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.CPN.TrainOutstar.Iteration">
            <summary>
            Perform one training iteration.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.TrainOutstar.LearningRate">
            <summary>
            The learning rate.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.CPN.TrainOutstar.Network">
            <summary>
            The network being trained.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Prune.HiddenLayerParams">
            <summary>
            Specifies the minimum and maximum neuron counts for a layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.HiddenLayerParams.min">
            <summary>
            The minimum number of neurons on this layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.HiddenLayerParams.max">
            <summary>
            The maximum number of neurons on this layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Prune.HiddenLayerParams.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a hidden layer param object with the specified min and max
            values.
            </summary>
            <param name="min">The minimum number of neurons.</param>
            <param name="max">The maximum number of neurons.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Prune.HiddenLayerParams.Max">
            <summary>
            The maximum number of neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Prune.HiddenLayerParams.Min">
            <summary>
            The minimum number of neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.SOMPattern">
            <summary>
            A self organizing map is a neural network pattern with an input
            and output layer.  There is no hidden layer.  The winning neuron,
            which is that neuron with the higest output is the winner, this
            winning neuron is often used to classify the input into a group.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.SOMPattern.inputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.SOMPattern.outputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.SOMPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.SOMPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer. SOM networks do not have hidden layers, so this will
            throw an error.
            </summary>
            <param name="count">The number of hidden neurons.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.SOMPattern.Generate">
            <summary>
            Generate the RSOM network.
            </summary>
            <returns>The neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.SOMPattern.Clear">
            <summary>
            Does nothing, no optinal hidden layers to clear, only the ONE 
            predefined hidden layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.SOMPattern.ActivationFunction">
            <summary>
            Set the activation function.  A SOM uses a linear activation
            function, so this method throws an error.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.SOMPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.SOMPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.ART1Pattern">
            <summary>
            Pattern to create an ART-1 neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ART1Pattern.TAG_F1">
            <summary>
            The F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ART1Pattern.TAG_F2">
            <summary>
            The F2 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ART1Pattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ART1Pattern.#ctor">
            <summary>
            Construct the pattern and set the default values.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ART1Pattern.AddHiddenLayer(System.Int32)">
            <summary>
            This will fail, hidden layers are not supported for this type of
            network.
            </summary>
            <param name="count">Not used.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ART1Pattern.Clear">
            <summary>
            Clear any properties set for this network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ART1Pattern.Generate">
            <summary>
            Generate the neural network.
            </summary>
            <returns>The generated neural network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.OutputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.A1">
            <summary>
            A parameter for F1 layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.B1">
            <summary>
            B parameter for F1 layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.C1">
            <summary>
            C parameter for F1 layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.D1">
            <summary>
            D parameter for F1 layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.L">
            <summary>
            L parameter for net.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.Vigilance">
            <summary>
            The vigilance parameter.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ART1Pattern.ActivationFunction">
            <summary>
            This method will throw an error, you can't set the activation function
            for an ART1. type network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.BoltzmannLogic">
            <summary>
            Provides the neural logic for an Boltzmann type network.  See BoltzmannPattern
            for more information on this type of network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.PROPERTY_RUN_CYCLES">
            <summary>
            Neural network property, the number of cycles to run.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.PROPERTY_ANNEAL_CYCLES">
            <summary>
            Neural network property, the number of annealing cycles to run.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.PROPERTY_TEMPERATURE">
            <summary>
            /Neural network property, the temperature.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.temperature">
            <summary>
            The current temperature of the neural network.  The higher the 
            temperature, the more random the network will behave.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.on">
            <summary>
            Count used to internally determine if a neuron is "on".
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.off">
            <summary>
            Count used to internally determine if a neuron is "off".
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.annealCycles">
            <summary>
            The number of cycles to anneal for.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.runCycles">
            <summary>
            The number of cycles to run the network through before annealing.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BoltzmannLogic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.Run(System.Int32)">
            <summary>
            Run the network for the specified neuron.
            </summary>
            <param name="i">The neuron to run for.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.Run">
            <summary>
            Run the network for all neurons present.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Setup the network logic, read parameters from the network.
            NOT USED, call the run method.
            </summary>
            <param name="input">Not used</param>
            <param name="useHolder">Not used</param>
            <returns>Not used</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.EstablishEquilibrium">
            <summary>
            Run the network until thermal equalibrium is established.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.DecreaseTemperature(System.Double)">
            <summary>
            Decrease the temperature by the specified amount.
            </summary>
            <param name="d">The amount to decrease b</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BoltzmannLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.BoltzmannLogic.Temperature">
            <summary>
            /The temperature the network is currently operating at.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Temporal.TemporalError">
            <summary>
            An error occured related to the temporal data set.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Temporal.TemporalError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Bot.Browse.WebPage">
            <summary>
            Holds a web page that was loaded by the Browse class. Web pages are made
            up of DataUnits and contents, which are ranges of data units.  The data
            units are basically tags and blocks of text.  The contents collection uses
            DocumentRange objects to assign meatning to the lower level DataObjects.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.WebPage.data">
            <summary>
            The data units that make up this page.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.WebPage.contents">
            <summary>
            The contents of this page, builds upon the list of DataUnits.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.WebPage.title">
            <summary>
            The title of this HTML page.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.AddContent(Encog.Bot.Browse.Range.DocumentRange)">
            <summary>
            Add to the content collection.
            </summary>
            <param name="span">The range to add to the collection.</param>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.AddDataUnit(Encog.Bot.DataUnits.DataUnit)">
            <summary>
            Add a data unit to the collection.
            </summary>
            <param name="unit">The data unit to load.</param>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.Find(System.Type,System.Int32)">
            <summary>
            Find the specified DocumentRange subclass in the contents list.
            </summary>
            <param name="c">The class type to search for.</param>
            <param name="index">The index to search from.</param>
            <returns>The document range that was found.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.FindLink(System.String)">
            <summary>
            Find the link that contains the specified string.
            </summary>
            <param name="str">The string to search for.</param>
            <returns>The link found.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.getDataSize">
            <summary>
            Get the number of data items in this collection.
            </summary>
            <returns>The size of the data unit.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.GetDataUnit(System.Int32)">
            <summary>
            Get the DataUnit unit at the specified index.
            </summary>
            <param name="i">The index to use.</param>
            <returns>The DataUnit found at the specified index.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.WebPage.ToString">
            <summary>
            The object as a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.Browse.WebPage.Contents">
            <summary>
            The contents in a list collection.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.WebPage.Data">
            <summary>
            The data units in a list collection.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.WebPage.Title">
            <summary>
            The title of this document.
            </summary>
        </member>
        <member name="T:Encog.Util.Randomize.RangeRandomizer">
            <summary>
            A randomizer that will create random weight and threshold values that are
            between a specified range.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.RangeRandomizer.Randomize(System.Double,System.Double)">
            <summary>
            Generate a random number in the specified range.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random number.</returns>
        </member>
        <member name="F:Encog.Util.Randomize.RangeRandomizer.min">
            <summary>
            The minimum value for the random range.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.RangeRandomizer.max">
            <summary>
            The maximum value for the random range.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.RangeRandomizer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.RangeRandomizer.#ctor(System.Double,System.Double)">
            <summary>
            Construct a range randomizer.
            </summary>
            <param name="min">The minimum random value.</param>
            <param name="max">The maximum random value.</param>
        </member>
        <member name="M:Encog.Util.Randomize.RangeRandomizer.Randomize(System.Double)">
            <summary>
            Generate a random number based on the range specified in the constructor.
            </summary>
            <param name="d">The range randomizer ignores this value.</param>
            <returns>The random number.</returns>
        </member>
        <member name="T:Encog.Parse.ParseError">
            <summary>
            Indicates an error has occurred in one of the parsers.
            </summary>
        </member>
        <member name="M:Encog.Parse.ParseError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Parse.ParseError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Normalize.DataNormalization">
            <summary>
            This class is used to normalize both input and ideal data for neural
            networks. This class can accept input from a variety of sources and output to
            a variety of targets. Normalization is a process by which input data is
            normalized so that it falls in specific ranges. Neural networks typically
            require input to be in the range of 0 to 1, or -1 to 1, depending on how the
            network is structured.
            
            The normalize class is typically given for different types of objects to tell
            it how to process data.
            
            Input Fields:
            
            Input fields specify the raw data that will be read by the Normalize class.
            Input fields are added to the Normalize class by calling addInputField
            method. Input fields must implement the InputField interface. There are a
            number of different input fields provided. Input data can be read from
            several different sources. For example, you can read the "neural network
            input" data from one CSV file and the "ideal neural network output" from
            another.
            
            
            Output Fields:
            
            The output fields are used to specify the final output from the Normalize
            class. The output fields specify both the "neural network input" and "ideal
            output". The output fields are flagged as either input our ideal. The output
            fields are not necessarily one-to-one with the input fields. For example,
            several input fields may combine to produce a single output field. Further
            some input fields may be used only to segregate data, whereas other input
            fields may be ignored all together. The type of output field that you specify
            determines the type of processing that will be done on that field. An
            OutputField is added by calling the addOutputField method.
            
            
            Segregators:
            
            Segregators are used generally for two related purposes. First, segregators
            can be used to exclude rows of data based on certain input values. Perhaps
            the data includes several classes of data, and you only want to train on one
            class. Secondly, segregators can be used to segregate data into training and
            evaluation sets. You may choose to use 80% of your data for training and 20%
            for evaluation. A segregator is added by calling the addSegregator method.
            
            
            Target Storage:
            
            The data created by the Normalization class must be stored somewhere. The
            storage targets allow this to be specified. The output can be sent to a CSV
            file, a NeuralDataSet, or any other target supported by a
            NormalizationStorage derived class. The target is specified by calling the
            setTarget method.
            
            The normalization process can take some time.  The progress can be reported
            to a StatusReportable object.
            
            The normalization is a two pass process.  The first pass counts the number
            of records and computes important statistics that will be used to 
            normalize the output.  The second pass actually performs the normalization
            and writes to the target.  Both passes are performed when the process
            method is called.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.inputFields">
            <summary>
            The input fields.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.outputFields">
            <summary>
            The output fields.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.readCSV">
            <summary>
            Keep a collection of all of the ReadCSV classes to support all of the
            distinct CSV files that are to be read.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.csvMap">
            <summary>
            Hold a map between the InputFieldCSV objects and the corresponding
            ReadCSV object. There will likely be many fields read from a single file.
            This allows only one ReadCSV object to need to be created per actual CSV
            file.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.readDataSet">
            <summary>
            For each InputFieldNeuralDataSet input field an Iterator must be kept to
            actually access the data. Only one Iterator should be kept per data set
            actually used.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.dataSetFieldMap">
            Map each of the input fields to an internally-build NeuralDataFieldHolder object.
            The NeuralDataFieldHolder object holds an Iterator, InputField and last 
            NeuralDataPair object loaded.
        </member>
        <member name="F:Encog.Normalize.DataNormalization.dataSetIteratorMap">
            <summary>
            Map each of the NeuralDataSet Iterators to an internally-build NeuralDataFieldHolder 
            object. The NeuralDataFieldHolder object holds an Iterator, InputField and last 
            NeuralDataPair object loaded.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.groups">
            <summary>
            Output fields can be grouped together, if the value of one output field might 
            affect all of the others.  This collection holds a list of all of the output 
            field groups.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.segregators">
            <summary>
            A list of the segregators.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.storage">
            <summary>
            Where the final output from the normalization is sent.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.report">
            <summary>
            The object to report the progress of the normalization to.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.recordCount">
            <summary>
            The number of records that were found in the first pass.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.currentIndex">
            <summary>
            The current record's index.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.csvFormat">
            <summary>
            The format to use for all CSV files.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.lastReport">
            <summary>
            How long has it been since the last report.  This filters so that
            every single record does not produce a message.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="F:Encog.Normalize.DataNormalization.description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.AddInputField(Encog.Normalize.Input.IInputField)">
            <summary>
            Add an input field.
            </summary>
            <param name="f">The input field to add.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.AddOutputField(Encog.Normalize.Output.IOutputField)">
            <summary>
             Add an output field.  This output field will be added as a 
            "neural network input field", not an "ideal output field".
            </summary>
            <param name="outputField">The output field to add.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.AddOutputField(Encog.Normalize.Output.IOutputField,System.Boolean)">
            <summary>
            Add a field and allow it to be specified as an "ideal output field".
            An "ideal" field is the expected output that the neural network is
            training towards.
            </summary>
            <param name="outputField">The output field.</param>
            <param name="ideal">True if this is an ideal field.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.AddSegregator(Encog.Normalize.Segregate.ISegregator)">
            <summary>
             Add a segregator.
            </summary>
            <param name="segregator">The segregator to add.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.ApplyMinMax">
            <summary>
            Called internally to allow each of the input fields to update their
            min/max values in the first pass.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.BuildForNetworkInput(System.Double[])">
            <summary>
            Build "input data for a neural network" based on the input values
            provided.  This allows  input for a neural network to be normalized.
            This is typically used when data is to be presented to a trained
            neural network.
            </summary>
            <param name="data">The input values to be normalized.</param>
            <returns>The data to be sent to the neural network.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.CreatePersistor">
            <summary>
            A persistor to persist this DataNormalization object. 
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.DetermineInputFieldValue(Encog.Normalize.Input.IInputField,System.Int32)">
            <summary>
            Called internally to obtain the current value for an input field.
            </summary>
            <param name="field">The input field to determine.</param>
            <param name="index">The current index.</param>
            <returns>The value for this input field.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.DetermineInputFieldValues(System.Int32)">
            <summary>
            Called internally to determine all of the input field values.
            </summary>
            <param name="index">The current index.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.FindInputField(System.Type,System.Int32)">
            <summary>
            Find an input field by its class.
            </summary>
            <param name="clazz">The input field class type you are looking for.</param>
            <param name="count">The instance of the input field needed, 0 for the first.</param>
            <returns>The input field if found, otherwise null.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.FindOutputField(System.Type,System.Int32)">
            <summary>
            Find an output field by its class.
            </summary>
            <param name="clazz">The output field class type you are looking for.</param>
            <param name="count">The instance of the output field needed, 0 for the first.</param>
            <returns>The output field if found, otherwise null.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.FirstPass">
            <summary>
            First pass, count everything, establish min/max.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.GetNetworkInputLayerSize">
            <summary>
            Calculate the number of output fields that are not used as ideal
            values, these will be the input to the neural network.
            This is the input layer size for the neural network.
            </summary>
            <returns>The input layer size.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.GetNetworkOutputLayerSize">
            <summary>
            The number of output fields that are used as ideal
            values, these will be the ideal output from the neural network.
            This is the output layer size for the neural network.
            </summary>
            <returns>The output layer size.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.GetOutputFieldCount">
            <summary>
            The total size of all output fields.  This takes into
            account output fields that generate more than one value.
            </summary>
            <returns>The output field count.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.InitForOutput">
            <summary>
            Setup the row for output.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.Next">
            <summary>
            Called internally to advance to the next row.
            </summary>
            <returns>True if there are more rows to reed.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.OpenCSV">
            <summary>
            Called internally to open the CSV file.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.OpenDataSet">
            <summary>
            Open any datasets that were used by the input layer.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.Process">
            <summary>
            Call this method to begin the normalization process.  Any status 
            updates will be sent to the class specified in the constructor.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.ReportResult(System.String,System.Int32,System.Int32)">
            <summary>
            Report on the current progress.
            </summary>
            <param name="message">The message to report.</param>
            <param name="total">The total number of records to process, 0 for unknown.</param>
            <param name="current"> The current record.</param>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.SecondPass">
            <summary>
            The second pass actually writes the data to the output files.
            </summary>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.ShouldInclude">
            <summary>
            Should this row be included? Check the segregatprs.
            </summary>
            <returns>True if the row should be included.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.Clone">
            <summary>
            Not implemented.
            </summary>
            <returns>Not implemented.</returns>
        </member>
        <member name="M:Encog.Normalize.DataNormalization.InitForPass">
            <summary>
            Setup the row for output.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.CSVFormatUsed">
            <summary>
            The CSV format being used.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Description">
            <summary>
            The description of this object.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Groups">
            <summary>
            The object groups.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.InputFields">
            <summary>
            The input fields.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.OutputFields">
            <summary>
            The output fields.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.RecordCount">
            <summary>
            The record count.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Report">
            <summary>
            The class that progress will be reported to.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Segregators">
            <summary>
            The segregators in use.
            </summary>
        </member>
        <member name="P:Encog.Normalize.DataNormalization.Storage">
            <summary>
            The place that the normalization output will be stored.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy">
            <summary>
            This strategy will indicate once training is no longer improving the neural
            network by a specified amount, over a specified number of cycles. This allows
            the program to automatically determine when to stop training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.DEFAULT_MIN_IMPROVEMENT">
            <summary>
            The default minimum improvement before training stops.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.DEFAULT_TOLERATE_CYCLES">
            <summary>
            The default number of cycles to tolerate.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.train">
            <summary>
            The training algorithm that is using this strategy.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.shouldStop">
            <summary>
            Flag to indicate if training should stop.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.ready">
            <summary>
            Has one iteration passed, and we are now ready to start evaluation.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.lastError">
            <summary>
            The error rate from the previous iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.minImprovement">
            <summary>
            The number of cycles to tolerate the minimum improvement.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.toleratedCycles">
            <summary>
            The number of cycles to tolerate the minimum improvement.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.badCycles">
            <summary>
            The number of bad training cycles.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.#ctor">
            <summary>
            Construct the strategy with default options.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.#ctor(System.Double,System.Int32)">
            <summary>
            Construct the strategy with the specified parameters.
            </summary>
            <param name="minImprovement">The minimum accepted improvement.</param>
            <param name="toleratedCycles">The number of cycles to tolerate before stopping.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.Init(Encog.Neural.Networks.Training.ITrain)">
            <summary>
            Initialize this strategy.
            </summary>
            <param name="train">The training algorithm.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.PostIteration">
            <summary>
            Called just after a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.PreIteration">
            <summary>
            Called just before a training iteration.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Strategy.StopTrainingStrategy.ShouldStop">
            <summary>
            True if training should stop.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap">
            <summary>
            The gradient map is used to track all of the workers and collect their
            gradient descents into the master neural network for training. This allows
            the threads to work somewhat independently and then aggregate their results
            at the end of each iteration.
            
            A map is built up ahead of time to allow quick access when the training is
            actually running.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.levelMap">
            <summary>
            A mapping between master levels and a list of each corresponding worker
            level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.synapseMap">
            <summary>
            A mapping between master levels and a list of each corresponding worker
            level.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.levels">
            <summary>
            A list of all of the master levels.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.synapses">
            <summary>
            A list of all of the master synapses.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.#ctor(Encog.Neural.Networks.Training.Propagation.PropagationUtil,Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation)">
            <summary>
            Construct a mapping between the master network training levels and all of
            the workers. This builds up the internal map that will be used to quickly
            collect results at the end of each training iteration.
            </summary>
            <param name="master">The training util for the master network that all results are
            aggregated to.</param>
            <param name="mprop">The MPROP object that contains all of the workers.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.Collect">
            <summary>
            Collect the gradient descents from all levels and synapses and place them
            in the master training utility.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.CollectLevel(Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Collect the gradient descents for the specific master level. This will
            sum the gradient descents for all worker threads and place them in the
            master level.
            </summary>
            <param name="masterLevel">The level to collect from.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.CollectSynapse(Encog.Neural.Networks.Training.Propagation.PropagationSynapse)">
            <summary>
            Collect the gradient descents from all of the worker synapses and place
            them in the master synapses.
            </summary>
            <param name="masterSynapse">The master synapse to recieve the results from the workers.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.LinkLevels(Encog.Neural.Networks.Training.Propagation.PropagationUtil,Encog.Neural.Networks.Training.Propagation.Multi.MultiPropagation)">
            <summary>
            Actually begin building the linked map between master network training
            levels and all of the workers.
            </summary>
            <param name="master">The training util for the master network that all results are
            aggregated to.</param>
            <param name="mprop">The MPROP object that contains all of the workers.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.LinkSynapses(Encog.Neural.Networks.Training.Propagation.PropagationLevel,System.Collections.Generic.IList{Encog.Neural.Networks.Training.Propagation.PropagationLevel})">
            <summary>
            Link the specified worker synapses to the specified master synapses.
            </summary>
            <param name="masterLevel">The master level that contains the synapses to link.</param>
            <param name="workerLevels">The worker levels that correspond to the master level.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.LevelMap">
            <summary>
            A map between master levels and lists of corresponding worker
            levels.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.Levels">
            <summary>
            All of the master levels.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.SynapseMap">
            <summary>
            A map between worker synapses and lists of corresponding worker
            synapses.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Multi.GradientMap.Synapses">
            <summary>
            All of the master synapses.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Prune.NetworkPattern">
            <summary>
            Specify which network pattern to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.NetworkPattern.MultiLayerFeedforward">
            <summary>
            Multilayer feedforward.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.NetworkPattern.Elman">
            <summary>
            Elman.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Prune.NetworkPattern.Jordan">
            <summary>
            Jordan.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.JordanPattern">
            <summary>
            This class is used to generate an Jordan style recurrent neural network. This
            network type consists of three regular layers, an input output and hidden
            layer. There is also a context layer which accepts output from the output
            layer and outputs back to the hidden layer. This makes it a recurrent neural
            network.
            
            The Jordan neural network is useful for temporal input data. The specified
            activation function will be used on all layers.  The Jordan neural network
            is similar to the Elman neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.JordanPattern.inputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.JordanPattern.outputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.JordanPattern.hiddenNeurons">
            <summary>
            The number of hidden neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.JordanPattern.activation">
            <summary>
            The activation function.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.JordanPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.JordanPattern.#ctor">
            <summary>
            Construct an object to create a Jordan type neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.JordanPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer, there should be only one.
            </summary>
            <param name="count">The number of neurons in this hidden layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.JordanPattern.Generate">
            <summary>
            Generate a Jordan neural network.
            </summary>
            <returns>A Jordan neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.JordanPattern.Clear">
            <summary>
            Clear out any hidden neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.JordanPattern.ActivationFunction">
            <summary>
            Set the activation function to use on each of the layers.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.JordanPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.JordanPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.FeedForwardPattern">
            <summary>
            Used to create feedforward neural networks.  A feedforward 
            network has an input and output layers separated by zero
            or more hidden layers.  The feedforward neural network is
            one of the most common neural network patterns.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.FeedForwardPattern.inputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.FeedForwardPattern.outputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.FeedForwardPattern.activation">
            <summary>
            The activation function.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.FeedForwardPattern.hidden">
            <summary>
            The number of hidden neurons.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.FeedForwardPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer, with the specified number of neurons.
            </summary>
            <param name="count">The number of neurons to add.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.FeedForwardPattern.Generate">
            <summary>
            Generate the Elman neural network.
            </summary>
            <returns>The Elman neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.FeedForwardPattern.Clear">
            <summary>
            Clear out any hidden neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.FeedForwardPattern.ActivationFunction">
            <summary>
            Set the activation function to use on each of the layers.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.FeedForwardPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.FeedForwardPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.ADALINEPattern">
            <summary>
            Construct an adaline neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.ADALINEPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ADALINEPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Not used, the ADALINE has no hidden layers, this will throw an error.
            </summary>
            <param name="count">The neuron count.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ADALINEPattern.Clear">
            <summary>
            Clear out any parameters.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.ADALINEPattern.Generate">
            <summary>
            Generate the network.
            </summary>
            <returns>The generated network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ADALINEPattern.InputNeurons">
            <summary>
            The number of neurons in the input layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ADALINEPattern.OutputNeurons">
            <summary>
            The number of neurons in the output layer.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.ADALINEPattern.ActivationFunction">
            <summary>
            The activation function, not used for this sort of network.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Market.MarketDataType">
            <summary>
            The types of market data that can be used.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.OPEN">
            <summary>
            The market open for the day.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.CLOSE">
            <summary>
            The market close for the day.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.VOLUME">
            <summary>
            The volume for the day.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.ADJUSTED_CLOSE">
            <summary>
            The adjusted close.  Adjusted for splits and dividends.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.HIGH">
            <summary>
            The high for the day.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Market.MarketDataType.LOW">
            <summary>
            The low for the day.
            </summary>
        </member>
        <member name="T:Encog.Util.Randomize.Distort">
            <summary>
            A randomizer that distorts what is already present in the neural network.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.Distort.factor">
            <summary>
            The factor to use to distort the numbers.
            </summary>
        </member>
        <member name="F:Encog.Util.Randomize.Distort.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Randomize.Distort.#ctor(System.Double)">
            <summary>
            Construct a distort randomizer for the specified factor.
            </summary>
            <param name="factor">The randomizer factor.</param>
        </member>
        <member name="M:Encog.Util.Randomize.Distort.Randomize(System.Double)">
            <summary>
            Distort the random number by the factor that was specified 
            in the constructor.
            </summary>
            <param name="d">The number to distort.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Encog.Util.DownSample.SimpleIntensityDownsample">
            <summary>
            Downsample based on how bright a color is.
            </summary>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.#ctor(System.Drawing.Bitmap)">
            <summary>
            Construc the intensity downsampler.
            </summary>
            <param name="image">The image to downsample.</param>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.ProcessImage(System.Drawing.Bitmap)">
            <summary>
            Setup the image for downsampling.
            </summary>
            <param name="image">The image to downsample.</param>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.DownSample(System.Int32,System.Int32)">
            <summary>
            Called to downsample the image and store it in the down sample component.
            </summary>
            <param name="height">The height of the image.</param>
            <param name="width">The width of the image</param>
            <returns></returns>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.DownSampleRegion(System.Int32,System.Int32)">
            <summary>
            Called to downsample a region of the image.
            </summary>
            <param name="x">The x coordinate of the resulting downsample.</param>
            <param name="y">The y coordinate of the resulting downsample.</param>
            <returns>Returns true if there were ANY pixels in the specified quadrant.</returns>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.FindBounds">
            <summary>
            This method is called to automatically crop the image so that whitespace
            is removed.
            </summary>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.HLineClear(System.Int32)">
            <summary>
            This method is called internally to see if there are any pixels in the
            given scan line. This method is used to perform autocropping.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Encog.Util.DownSample.SimpleIntensityDownsample.VLineClear(System.Int32)">
            <summary>
            This method is called internally to see if there are any pixels in the
            given scan line. This method is used to perform autocropping.
            </summary>
            <param name="x">The vertical line to scan.</param>
            <returns>True if there are any pixels in the specified vertical line.</returns>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.DownsampleImage">
            <summary>
            The image to downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.RatioX">
            <summary>
            The x-ratio for the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.RatioY">
            <summary>
            The y-ratio for the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.ImageHeight">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.ImageWidth">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.DownSampleLeft">
            <summary>
            The left border of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.DownSampleRight">
            <summary>
            The right border of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.DownSampleTop">
            <summary>
            The top border of the downsample.
            </summary>
        </member>
        <member name="P:Encog.Util.DownSample.SimpleIntensityDownsample.DownSampleBottom">
            <summary>
            The bottom border of the downsample.
            </summary>
        </member>
        <member name="T:Encog.Util.Concurrency.EncogConcurrency">
            <summary>
            This class abstracts thread pools, and potentially grids and other types of
            concurrency. It is used by other classes inside of Encog to allow tasks to be
            executed efficiently on multicore machines.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.EncogConcurrency.instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.EncogConcurrency.activeTasks">
            <summary>
            The number of active tasks.
            </summary>
        </member>
        <member name="F:Encog.Util.Concurrency.EncogConcurrency.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.EncogConcurrency.#ctor">
            <summary>
            Construct a concurrency object.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.EncogConcurrency.ProcessTask(Encog.Util.Concurrency.IEncogTask)">
            <summary>
            Process the specified task.  It will be processed either now,
            or queued to process on the thread pool.
            </summary>
            <param name="task">The task to process.</param>
        </member>
        <member name="M:Encog.Util.Concurrency.EncogConcurrency.SetMaxThreadsToCoreCount">
            <summary>
            Set the max threads to the number of processors.
            </summary>
        </member>
        <member name="M:Encog.Util.Concurrency.EncogConcurrency.Shutdown(System.Int64)">
            <summary>
            Wait for all threads in the pool to complete.
            </summary>
            <param name="timeOutSeconds">How long to wait for all threads to complete.</param>
        </member>
        <member name="P:Encog.Util.Concurrency.EncogConcurrency.Instance">
            <summary>
            The instance to the singleton.
            </summary>
        </member>
        <member name="P:Encog.Util.Concurrency.EncogConcurrency.MaxThreads">
            <summary>
            How many threads should be used?
            </summary>
        </member>
        <member name="T:Encog.Persist.Persistors.TextDataPersistor">
            <summary>
            The Encog persistor used to persist the TextData class.
            </summary>
        </member>
        <member name="M:Encog.Persist.Persistors.TextDataPersistor.Load(Encog.Parse.Tags.Read.ReadXML)">
            <summary>
            Load the specified Encog object from an XML reader.
            </summary>
            <param name="xmlin">The XML reader to use.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.Persistors.TextDataPersistor.Save(Encog.Persist.IEncogPersistedObject,Encog.Parse.Tags.Write.WriteXML)">
            <summary>
            Save the specified Encog object to an XML writer.
            </summary>
            <param name="obj">The object to save.</param>
            <param name="xmlout">The XML writer to save to.</param>
        </member>
        <member name="T:Encog.Persist.Attributes.EGReference">
            <summary>
            This annotation is used with Encog generic persistence. It allows a field to
            be flagged as something that should be persisted as a reference.
            </summary>
        </member>
        <member name="T:Encog.Persist.Attributes.EGAttribute">
            <summary>
            This annotation is used with Encog generic persistence. It allows a field to
            be flagged as something that should be persisted as an XML attribute.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.TagConst">
            <summary>
            Constants to use while parsing the tags.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.TagConst.COMMENT_BEGIN">
            <summary>
            The beginning of a comment.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.TagConst.COMMENT_END">
            <summary>
            The end of a comment.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.TagConst.CDATA_BEGIN">
            <summary>
            The beginning of a CDATA section.
            </summary>
        </member>
        <member name="F:Encog.Parse.Tags.TagConst.CDATA_END">
            <summary>
            The end of a CDATA section.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.TagConst.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="T:Encog.Normalize.NormalizationError">
            <summary>
            Used for normalization errors.
            </summary>
        </member>
        <member name="M:Encog.Normalize.NormalizationError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Normalize.NormalizationError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.Networks.Synapse.WeightlessSynapse">
            <summary>
            A fully connected synapse that simply sums all input to each neuron, no
            weights are applied.
            
            This synapse type is not teachable.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Synapse.WeightlessSynapse.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightlessSynapse.#ctor">
            <summary>
            Simple default constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightlessSynapse.#ctor(Encog.Neural.Networks.Layers.ILayer,Encog.Neural.Networks.Layers.ILayer)">
            <summary>
            Construct a weighted synapse between the two layers.
            </summary>
            <param name="fromLayer">The starting layer.</param>
            <param name="toLayer">The ending layer.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightlessSynapse.Clone">
            <summary>
            A clone of this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightlessSynapse.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the weightless output from this synapse. Each neuron
            in the from layer has a weightless connection to each of the
            neurons in the next layer. 
            </summary>
            <param name="input">The input from the synapse.</param>
            <returns>The output from this synapse.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Synapse.WeightlessSynapse.CreatePersistor">
            <summary>
            Return a persistor for this object.
            </summary>
            <returns>A new persistor.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightlessSynapse.WeightMatrix">
            <summary>
            null, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightlessSynapse.MatrixSize">
            <summary>
            0, this synapse type has no matrix.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightlessSynapse.SynapseType">
            <summary>
            The type of synapse that this is.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Synapse.WeightlessSynapse.IsTeachable">
            <summary>
            False, because this type of synapse is not teachable.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.PatternError">
            <summary>
            Indicates an error has occurred in the pattern classes.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.PatternError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.PatternError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Neural.Networks.Logic.BAMLogic">
            <summary>
            Provides the neural logic for an BAM type network.  See BAMPattern
            for more information on this type of network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.network">
            <summary>
            The neural network.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.f1Layer">
            <summary>
            The F1 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.f2Layer">
            <summary>
            The F2 layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.synapseF1ToF2">
            <summary>
            The connection between the input and output layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.synapseF2ToF1">
            <summary>
            The connection between the output and the input layer.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Logic.BAMLogic.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.AddPattern(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Add a pattern to the neural network. 
            </summary>
            <param name="inputPattern">The input pattern.</param>
            <param name="outputPattern">The output pattern(for this input).</param>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.Clear">
            <summary>
            Clear any connection weights.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.GetWeight(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData,System.Int32,System.Int32)">
            <summary>
            Get the specified weight.
            </summary>
            <param name="synapse">The synapse to get the weight from.</param>
            <param name="input">The input, to obtain the size from.</param>
            <param name="x">The x matrix value. (could be row or column, depending on input)</param>
            <param name="y">The y matrix value. (could be row or column, depending on input)</param>
            <returns>The value from the matrix.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.PropagateLayer(Encog.Neural.Networks.Synapse.ISynapse,Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Propagate the layer.
            </summary>
            <param name="synapse">The synapse for this layer.</param>
            <param name="input">The input pattern.</param>
            <param name="output">The output pattern.</param>
            <returns>True if the network has become stable.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.Compute(Encog.Neural.Networks.NeuralDataMapping)">
            <summary>
            Compute the network for the specified input.
            </summary>
            <param name="input">The input to the network.</param>
            <returns>The output from the network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.Compute(Encog.Neural.Data.INeuralData,Encog.Neural.Networks.NeuralOutputHolder)">
            <summary>
            Setup the network logic, read parameters from the network.
            NOT USED, call compute(NeuralInputData).
            </summary>
            <param name="input">The input to the layer.</param>
            <param name="useHolder">The holder to use.</param>
            <returns>The output from this layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Logic.BAMLogic.Init(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Setup the network logic, read parameters from the network.
            </summary>
            <param name="network">The network that this logic class belongs to.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.BAMLogic.F1Neurons">
            <summary>
            The F1 neuron count.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.BAMLogic.F2Neurons">
            <summary>
            The F2 neuron count.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Logic.BAMLogic.Network">
            <summary>
            The network.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.XML.PropertyData">
            <summary>
            An Encog data object that can be used to hold property data. This is a
            collection of name-value pairs that can be saved in an Encog persisted file.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.PropertyData.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.PropertyData.description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.XML.PropertyData.data">
            <summary>
            The property data.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clonned version of this object.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.CreatePersistor">
            <summary>
            A persistor for the property data.
            </summary>
            <returns>The persistor.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.IsDefined(System.String)">
            <summary>
            Determine of the specified property is defined.
            </summary>
            <param name="key">The property to check.</param>
            <returns>True if this property is defined.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.Remove(System.String)">
            <summary>
            Remove the specified property.
            </summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.GetInteger(System.String)">
            <summary>
            Get a property as an integer.
            </summary>
            <param name="field">The name of the field.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.GetDouble(System.String)">
            <summary>
            Get a property as a double.
            </summary>
            <param name="field">The name of the field.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Encog.Neural.Data.XML.PropertyData.GetDate(System.String)">
            <summary>
            Get a property as a date.
            </summary>
            <param name="field">The name of the field.</param>
            <returns>The date value.</returns>
        </member>
        <member name="P:Encog.Neural.Data.XML.PropertyData.Item(System.String)">
            <summary>
            Access one of the property items.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The item accessed.</returns>
        </member>
        <member name="P:Encog.Neural.Data.XML.PropertyData.Count">
            <summary>
            The number of properties defined.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.PropertyData.Name">
            <summary>
            The name of this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.PropertyData.Description">
            <summary>
            The description for this object.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.XML.PropertyData.Data">
            <summary>
            The data held by this object.
            </summary>
        </member>
        <member name="T:Encog.Util.CSV.ReadCSV">
            <summary>
            Read and parse CSV format files.
            </summary>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.dateFormat">
            <summary>
            The format that dates are expected to be in.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.DisplayDate(System.DateTime)">
            <summary>
            Format a date/time object to the same format that we parse in.
            </summary>
            <param name="date">The date to format.</param>
            <returns>A formatted date and time.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.ParseDate(System.String)">
            <summary>
            Parse a date using the specified format.
            </summary>
            <param name="when">A string that contains a date in the specified format.</param>
            <returns>A DateTime that was parsed.</returns>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.reader">
            <summary>
            The file to read.
            </summary>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.columns">
            <summary>
            The names of the columns.
            </summary>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:Encog.Util.CSV.ReadCSV.delim">
            <summary>
            The delimiter.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.#ctor(System.IO.Stream,System.Boolean,System.Char)">
            <summary>
            Construct a CSV reader from an input stream.
            </summary>
            <param name="istream">The InputStream to read from.</param>
            <param name="headers">Are headers present?</param>
            <param name="delim">What is the delimiter.</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.#ctor(System.String,System.Boolean,System.Char)">
            <summary>
            Construct a CSV reader from a filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="headers">The headers.</param>
            <param name="delim">The delimiter.</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.#ctor(System.String,System.Boolean,Encog.Util.CSV.CSVFormat)">
            <summary>
            Construct a CSV reader from a filename.
            Allows a delimiter character to be specified.
            Numbers will be parsed using the current
            locale.
            </summary>
            <param name="filename">The filename.</param>
            <param name="headers">The headers.</param>
            <param name="format">The delimiter.</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.#ctor(System.IO.Stream,System.Boolean,Encog.Util.CSV.CSVFormat)">
            <summary>
            Construct a CSV reader from an input stream.
            The format parameter specifies the separator 
            character to use, as well as the number
            format.
            </summary>
            <param name="stream">The Stream to read from.</param>
            <param name="headers">Are headers present?</param>
            <param name="format">What is the CSV format.</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Begin(System.Boolean,Encog.Util.CSV.CSVFormat)">
            <summary>
            Read the headers.
            </summary>
            <param name="format">The format of this CSV file.</param>
            <param name="headers">Are headers present.</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Close">
            <summary>
            Close the file.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Get(System.Int32)">
            <summary>
            Get the specified column as a string.
            </summary>
            <param name="i">The column index, starting at zero.</param>
            <returns>The column as a string.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Get(System.String)">
            <summary>
            Get the column by its string name, as a string. This will only work if
            column headers were defined that have string names.
            </summary>
            <param name="column">The column name.</param>
            <returns>The column data as a string.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.GetColumnCount">
            <summary>
            Get the column count.
            </summary>
            <returns>The column count.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.GetDate(System.String)">
            <summary>
            Read the specified column as a date.
            </summary>
            <param name="column">The specified column.</param>
            <returns>The specified column as a DateTime.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.GetDouble(System.String)">
            <summary>
            Get the specified column as a double.
            </summary>
            <param name="column">The column to read.</param>
            <returns>The specified column as a double.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.GetDouble(System.Int32)">
            <summary>
            Get the specified column as a double.
            </summary>
            <param name="column">The column to read.</param>
            <returns>The specified column as a double.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.GetInt(System.String)">
            <summary>
            Get an integer that has the specified name.
            </summary>
            <param name="col">The column name to read.</param>
            <returns>The specified column as an int.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.InitData(System.String)">
            <summary>
            Count the columns and create a an array to hold them.
            </summary>
            <param name="line">One line from the file</param>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Next">
            <summary>
            Read the next line.
            </summary>
            <returns>True if there are more lines to read.</returns>
        </member>
        <member name="M:Encog.Util.CSV.ReadCSV.Parse(System.String)">
            <summary>
            Parse the line into a list of values.
            </summary>
            <param name="line">The line to parse.</param>
            <returns>The elements on this line.</returns>
        </member>
        <member name="T:Encog.Util.CSV.CSVError">
            <summary>
            Used to report errors for CSV formatting.
            </summary>
        </member>
        <member name="M:Encog.Util.CSV.CSVError.#ctor(System.String)">
            <summary>
            Construct a message exception.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:Encog.Util.CSV.CSVError.#ctor(System.Exception)">
            <summary>
            Pass on an exception.
            </summary>
            <param name="e">The other exception.</param>
        </member>
        <member name="T:Encog.Solve.Genetic.MateWorker`1">
            <summary>
            This class is used in conjunction with a thread pool. This allows
            the genetic algorithm to offload all of those calculations to a thread pool.
            </summary>
            <typeparam name="GENE_TYPE">The data type of the gene.</typeparam>
        </member>
        <member name="F:Encog.Solve.Genetic.MateWorker`1.mother">
            <summary>
            The mother.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.MateWorker`1.father">
            <summary>
            The father.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.MateWorker`1.child1">
            <summary>
            The first child.
            </summary>
        </member>
        <member name="F:Encog.Solve.Genetic.MateWorker`1.child2">
            <summary>
            The second child.
            </summary>
        </member>
        <member name="M:Encog.Solve.Genetic.MateWorker`1.#ctor(Encog.Solve.Genetic.Chromosome{`0},Encog.Solve.Genetic.Chromosome{`0},Encog.Solve.Genetic.Chromosome{`0},Encog.Solve.Genetic.Chromosome{`0})">
            <summary>
            Construct a worker for the thread pool.
            </summary>
            <param name="mother">The mother.</param>
            <param name="father">The father.</param>
            <param name="child1">The first offspring.</param>
            <param name="child2">The second offspring.</param>
        </member>
        <member name="M:Encog.Solve.Genetic.MateWorker`1.Run">
            <summary>
            Mate the two chromosomes.
            </summary>
        </member>
        <member name="T:Encog.Persist.EncogPersistedCollection">
            <summary>
            An EncogPersistedCollection holds a collection of EncogPersistedObjects. This
            allows the various neural networks and some data sets to be persisted. They
            are persisted to an XML form.
            
            The EncogPersistedCollection does not load the object into memory at once.
            This allows it to manage large files.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.GENERAL_ERROR">
            <summary>
            Generic error message for bad XML.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_TEXT">
            <summary>
            The type is TextData.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_PROPERTY">
            <summary>
            The type is PropertyData.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_BASIC_NET">
            <summary>
            The type is BasicNetwork.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_BASIC_LAYER">
            <summary>
            The type is BasicLayer.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_CONTEXT_LAYER">
            <summary>
            The type is ContextLayer.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_RADIAL_BASIS_LAYER">
            <summary>
            The type is RadialBasisFunctionLayer.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_TRAINING">
            <summary>
            The type is TrainingData.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_WEIGHTED_SYNAPSE">
            <summary>
             The type is WeightedSynapse.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_WEIGHTLESS_SYNAPSE">
            <summary>
            The type is WeightlessSynapse.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_DIRECT_SYNAPSE">
            <summary>
            The type is DirectSynapse.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_ONE2ONE_SYNAPSE">
            <summary>
            The type is OneToOneSynapse.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.TYPE_PARSE_TEMPLATE">
            <summary>
            The type is ParseTemplate.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.ATTRIBUTE_NAME">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.ATTRIBUTE_DESCRIPTION">
            <summary>
            The description attribute.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.LOGGER">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.ThrowError(System.String)">
            <summary>
            Throw and log an error.
            </summary>
            <param name="tag">The tag this error is for.</param>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.filePrimary">
            <summary>
            The primary file being persisted to.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.fileTemp">
            <summary>
            The temp file, to be used for merges.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.platform">
            <summary>
            The platform this collection was created on.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.fileVersion">
            <summary>
            The version of the persisted file.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.directory">
            <summary>
            Directory entries for all of the objects in the current file.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogPersistedCollection.encogVersion">
            <summary>
            The version of Encog.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Create a persistance collection for the specified file.
            </summary>
            <param name="file">The file to load/save.</param>
            <param name="mode">The file mode</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.#ctor(Encog.Persist.Location.IPersistenceLocation,System.IO.FileMode)">
            <summary>
            Create an object based on the specified location.
            </summary>
            <param name="location">The location to load/save from.</param>
            <param name="mode">The file mode.</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Add(System.String,Encog.Persist.IEncogPersistedObject)">
            <summary>
            Add an EncogPersistedObject to the collection.
            </summary>
            <param name="name">The name of the object to load.</param>
            <param name="obj">The object to add.</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.BuildDirectory">
            <summary>
            Build a directory of objects.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Create">
            <summary>
            Create the file.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Delete(Encog.Persist.DirectoryEntry)">
            <summary>
            Delete the specified object, use a directory entry.
            </summary>
            <param name="d">The object to delete.</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Delete(Encog.Persist.IEncogPersistedObject)">
            <summary>
            Delete the specified object.
            </summary>
            <param name="obj">The object to delete.</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Delete(System.String)">
            <summary>
            Delete the specified object.
            </summary>
            <param name="name">The object name.</param>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Find(Encog.Persist.DirectoryEntry)">
            <summary>
            Find the specified object, using a DirectoryEntry.
            </summary>
            <param name="d">The directory entry to find.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.Find(System.String)">
            <summary>
            Called to search all Encog objects in this collection for one with a name
            that passes what was passed in.
            </summary>
            <param name="name">The name we are searching for.</param>
            <returns>The Encog object with the correct name.</returns>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.MergeTemp">
            <summary>
            Merge the temp file with the main one, call this to make any
            changes permanent.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogPersistedCollection.UpdateProperties(System.String,System.String,System.String)">
            <summary>
            Update any header properties for an Encog object, for example,
            a rename.
            </summary>
            <param name="name">The name of the object to change. </param>
            <param name="newName">The new name of this object.</param>
            <param name="newDesc">The description for this object.</param>
        </member>
        <member name="P:Encog.Persist.EncogPersistedCollection.Directory">
            <summary>
            The directory entries for the objects in this file.
            </summary>
        </member>
        <member name="P:Encog.Persist.EncogPersistedCollection.EncogVersion">
            <summary>
            The version of Encog this file was created with.
            </summary>
        </member>
        <member name="P:Encog.Persist.EncogPersistedCollection.FileVersion">
            <summary>
            The file version.
            </summary>
        </member>
        <member name="P:Encog.Persist.EncogPersistedCollection.Platform">
            <summary>
            The platform this file was created on.
            </summary>
        </member>
        <member name="T:Encog.Persist.EncogMemoryCollection">
            <summary>
            A memory based collection of Encog objects.  Does not use the more complex temp
            file structure like EncogPersistedCollection, but also can't handle gigantic files.
            This class can load and save from/to Encog EG files.
            
            This class can be very useful in the Silverlight version of Encog, which does not
            support the EncogPersistedCollection class.
            </summary>
        </member>
        <member name="F:Encog.Persist.EncogMemoryCollection.Contents">
            <summary>
            The contents of this collection.
            </summary>
        </member>
        <member name="M:Encog.Persist.EncogMemoryCollection.Load(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Load the contents of a location.
            </summary>
            <param name="location">The location to load from.</param>
        </member>
        <member name="M:Encog.Persist.EncogMemoryCollection.Save(Encog.Persist.Location.IPersistenceLocation)">
            <summary>
            Save the contents of this collection to a location.
            </summary>
            <param name="location">The location to save to.</param>
        </member>
        <member name="P:Encog.Persist.EncogMemoryCollection.FileVersion">
            <summary>
            Populated during a load, the file version.
            </summary>
        </member>
        <member name="P:Encog.Persist.EncogMemoryCollection.EncogVersion">
            <summary>
            Populated during a load, the Encog version that created this file.
            </summary>
        </member>
        <member name="P:Encog.Persist.EncogMemoryCollection.Platform">
            <summary>
            Populated during a load, the platform that this was loaded to.
            </summary>
        </member>
        <member name="T:Encog.Persist.Attributes.EGUnsupported">
            <summary>
            This annotation is used with Encog generic persistence. It specifies that
            Encog persistence is not supported for this object type.
            </summary>
        </member>
        <member name="T:Encog.Parse.Tags.Read.ReadHTML">
            <summary>
            This class is designed to parse HTML documents.  It will parse the
            individual tags and text between the tags.
            </summary>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadHTML.#ctor(System.IO.Stream)">
            <summary>
            Construct a HTML reader.
            </summary>
            <param name="istream">The input stream to read from.</param>
        </member>
        <member name="M:Encog.Parse.Tags.Read.ReadHTML.parseAttributeName">
            <summary>
            Parse the attribute name.
            </summary>
            <returns>The attribute name.</returns>
        </member>
        <member name="T:Encog.Normalize.Target.NormalizationStorageArray1D">
            <summary>
            Output the normalized data to a 1D array.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageArray1D.array">
            <summary>
            The array to store to.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Target.NormalizationStorageArray1D.currentIndex">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray1D.#ctor(System.Double[])">
            <summary>
            Construct an object to store to a 2D array.
            </summary>
            <param name="array">The array to store to.</param>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray1D.Close">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray1D.Open">
            <summary>
            Not needed for this storage type.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Target.NormalizationStorageArray1D.Write(System.Double[],System.Int32)">
            <summary>
            Write an array.
            </summary>
            <param name="data">The data to write.</param>
            <param name="inputCount">How much of the data is input.</param>
        </member>
        <member name="T:Encog.Normalize.Segregate.SegregationRange">
            <summary>
            Specifies a range that might be included or excluded.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.SegregationRange.low">
            <summary>
            The low end of this range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.SegregationRange.high">
            <summary>
            The high end of this range.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.SegregationRange.include">
            <summary>
            Should this range be included.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.SegregationRange.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.SegregationRange.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Construct a segregation range.
            </summary>
            <param name="low">The low end of the range.</param>
            <param name="high">The high end of the range.</param>
            <param name="include">Specifies if the range should be included.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.SegregationRange.InRange(System.Double)">
            <summary>
            Is this value within the range. 
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is within the range.</returns>
        </member>
        <member name="P:Encog.Normalize.Segregate.SegregationRange.High">
            <summary>
            The high end of the range.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.SegregationRange.Low">
            <summary>
            The low end of the range.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.SegregationRange.IsIncluded">
            <summary>
            True if this range should be included.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Output.Multiplicative.MultiplicativeGroup">
            <summary>
            Used to group multiplicative fields together.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Output.Multiplicative.MultiplicativeGroup.length">
            <summary>
            The "length" of this field.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Output.Multiplicative.MultiplicativeGroup.RowInit">
            <summary>
            Called to init this group for a new field.  This recalculates the
            "length".
            </summary>
        </member>
        <member name="P:Encog.Normalize.Output.Multiplicative.MultiplicativeGroup.Length">
            <summary>
            The length of this field.  This is the sum of the squares of
            all of the groupped fields.  The square root of this sum is the 
            length. 
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.PropagationUtil">
            <summary>
            Implements basic functionality that is needed by each of the propagation
            methods. The specifics of each of the propagation methods is implemented
            inside of the PropagationMethod interface implementors.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.network">
            <summary>
            The network that is being trained.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.fire">
            <summary>
            The output from the last iteration.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.method">
            <summary>
            What sort of propagation method is being used.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.levels">
            <summary>
            All of the levels used in training. The layers are grouped into levels.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.outputHolder">
            <summary>
            The output holder to use during training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.PropagationUtil.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.Networks.Training.Propagation.IPropagationMethod)">
            <summary>
            Construct a propagation utility.
            </summary>
            <param name="network">The network to train.</param>
            <param name="method">The method to use.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.BackwardPass(Encog.Neural.Data.INeuralData)">
            <summary>
            Calculate the error for the recognition just done.
            </summary>
            <param name="ideal">What the output neurons should have yielded.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.CalculateInitialDeltas(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Calculate the error for the given ideal values.
            </summary>
            <param name="actual">The actual output from this level.</param>
            <param name="ideal">Ideal output values.</param>
            <returns>Return the initial propagation level.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.Construct">
            <summary>
            Begin constructing the level from the layers.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.Construct(Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Construct one propagation level.
            </summary>
            <param name="current">The current level being constructed.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.PropagationUtil.ForwardPass(Encog.Neural.Data.INeuralData)">
            <summary>
            Perform the forward pass and determine each layer's output.
            </summary>
            <param name="input">The input to the neural network.</param>
            <returns>The output from the neural network.</returns>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.PropagationUtil.Levels">
            <summary>
            The propagation levels.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.PropagationUtil.Network">
            <summary>
            Get the current best neural network.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.PropagationUtil.OutputHolder">
            <summary>
            The output holder being used.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.PropagationUtil.Method">
            <summary>
            The propagation method in use.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation">
            <summary>
            One problem that the backpropagation technique has is that the magnitude of
            the partial derivative may be calculated too large or too small. The
            Manhattan update algorithm attempts to solve this by using the partial
            derivative to only indicate the sign of the update to the weight matrix. The
            actual amount added or subtracted from the weight matrix is obtained from a
            simple constant. This constant must be adjusted based on the type of neural
            network being trained. In general, start with a higher constant and decrease
            it as needed.
            
            The Manhattan update algorithm can be thought of as a simplified version of
            the resilient algorithm. The resilient algorithm uses more complex techniques
            to determine the update value.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.DEFAULT_ZERO_TOLERANCE">
            <summary>
            The default tolerance to determine of a number is close to zero.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.zeroTolerance">
            <summary>
            The zero tolearnce to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.learningRate">
            <summary>
            The learning gate to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double)">
            <summary>
            Construct a class to train with Manhattan propagation.  Use default zero 
            tolerance.
            </summary>
            <param name="network">The network that is to be trained.</param>
            <param name="training">The training data to use.</param>
            <param name="learnRate">A fixed learning to the weight matrix for each 
            training iteration.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.#ctor(Encog.Neural.Networks.BasicNetwork,Encog.Neural.NeuralData.INeuralDataSet,System.Double,System.Double)">
            <summary>
            Construct a Manhattan propagation training object.  
            </summary>
            <param name="network">The network to train.</param>
            <param name="training">The training data to use.</param>
            <param name="learnRate">The learning rate.s</param>
            <param name="zeroTolerance">The zero tolerance.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.LearningRate">
            <summary>
            The learning rate that was specified in the
            constructor.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Training.Propagation.Manhattan.ManhattanPropagation.ZeroTolerance">
            <summary>
            The zero tolerance that was specified in the
            constructor.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.Training.Propagation.CalculatePartialDerivative">
            <summary>
            Class that is used to calculate the partial derivatives for the error for
            individual layers of a neural network. This calculation must be performed by
            each of the propagation techniques.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.CalculatePartialDerivative.CalculateError(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel)">
            <summary>
            Calculate the partial derivative of the error for a layer.
            </summary>
            <param name="output">A holder that contains the output from all of the layers.</param>
            <param name="fromLevel">The source level.</param>
            <param name="toLevel">The target level.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Training.Propagation.CalculatePartialDerivative.HandleMatrixDelta(Encog.Neural.Networks.NeuralOutputHolder,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Training.Propagation.PropagationLevel,Encog.Neural.Networks.Layers.ILayer,System.Int32,Encog.Neural.Networks.Training.Propagation.PropagationSynapse,System.Int32,System.Int32)">
            <summary>
            Calculate the error for an individual weight matrix element.
            </summary>
            <param name="outputHolder">The output from each of the layers of 
            the neural network.</param>
            <param name="fromLevel">The from level.</param>
            <param name="toLevel">The to level.</param>
            <param name="toLayer">The to layer.</param>
            <param name="toNeuronLocal">The neuron, within the layer.</param>
            <param name="fromSynapse">The from synapse.</param>
            <param name="fromNeuron">The from neuron.</param>
            <param name="toNeuronGlobal">The global location inside of the level.</param>
            <returns>The error for this individual connection.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Pattern.RSOMPattern">
            <summary>
            A recurrent self organizing map is a self organizing map that has
            a recurrent context connection on the hidden layer.  This type
            of neural network is adept at classifying temporal data.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RSOMPattern.inputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RSOMPattern.outputNeurons">
            <summary>
            The number of output neurons.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Pattern.RSOMPattern.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RSOMPattern.AddHiddenLayer(System.Int32)">
            <summary>
            Add a hidden layer.  SOM networks do not have hidden layers, so
            this will throw an error.
            </summary>
            <param name="count">The number of hidden neurons.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RSOMPattern.Generate">
            <summary>
            Generate the RSOM network.
            </summary>
            <returns>The neural network.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Pattern.RSOMPattern.Clear">
            <summary>
            Clear out any hidden neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RSOMPattern.ActivationFunction">
            <summary>
            Set the activation function.  A SOM uses a linear activation
            function, so this method throws an error.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RSOMPattern.OutputNeurons">
            <summary>
            Set the number of output neurons.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Pattern.RSOMPattern.InputNeurons">
            <summary>
            The number of input neurons.
            </summary>
        </member>
        <member name="T:Encog.Neural.Networks.NetworkCODEC">
            <summary>
            This class will extract the "long term memory" of a neural network, that is
            the weights and threshold values into an array. This array can be used to
            view the neural network as a linear array of doubles. These values can then
            be modified and copied back into the neural network. This is very useful for
            simulated annealing, as well as genetic algorithms.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NetworkCODEC.ArrayToNetwork(System.Double[],Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Use an array to populate the memory of the neural network.
            </summary>
            <param name="array">An array of doubles.</param>
            <param name="network">The network to encode.</param>
        </member>
        <member name="M:Encog.Neural.Networks.NetworkCODEC.NetworkToArray(Encog.Neural.Networks.BasicNetwork)">
            <summary>
            Convert to an array. This is used with some training algorithms that
            require that the "memory" of the neuron(the weight and threshold values)
            be expressed as a linear array.
            </summary>
            <param name="network">The network to encode.</param>
            <returns>The memory of the neuron.</returns>
        </member>
        <member name="F:Encog.Neural.Networks.NetworkCODEC.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NetworkCODEC.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.NetworkCODEC.Equals(Encog.Neural.Networks.BasicNetwork,Encog.Neural.Networks.BasicNetwork,System.Int32)">
            <summary>
            Check to see if the two networks have the same thresholds and weights.
            </summary>
            <param name="network1">The first network.</param>
            <param name="network2">The second network.</param>
            <param name="precision">The precision.</param>
            <returns>True if the networks are the same within the specified precision.</returns>
        </member>
        <member name="T:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer">
            <summary>
            This layer type makes use of several radial basis function to scale the
            output from this layer. Each RBF can have a different center, peak, and
            width. Proper selection of these values will greatly impact the success of
            the layer. Currently, Encog provides no automated way of determining these
            values. There is one RBF per neuron.
            
            Radial basis function layers have neither thresholds nor a regular activation
            function. Calling any methods that deal with the activation function or
            thresholds will result in an error.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.serialVersionUID">
            <summary>
            The serial id.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.logger">
            <summary>
            The logging object.
            </summary>
        </member>
        <member name="F:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.radialBasisFunction">
            <summary>
            The radial basis functions to use, there should be one for each neuron.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.#ctor">
            <summary>
            Default constructor, mainly so the workbench can easily create a default
            layer.
            </summary>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.#ctor(System.Int32)">
            <summary>
            Construct a radial basis function layer.
            </summary>
            <param name="neuronCount">The neuron count.</param>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.Compute(Encog.Neural.Data.INeuralData)">
            <summary>
            Compute the values before sending output to the next layer.
            This function allows the activation functions to be called.
            </summary>
            <param name="pattern">The incoming Project.</param>
            <returns>The output from this layer.</returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.CreatePersistor">
            <summary>
            Create a persistor for this layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.RandomizeGaussianCentersAndWidths(System.Double,System.Double)">
            <summary>
            Set the gausian components to random values.
            </summary>
            <param name="min">The minimum value for the centers, widths and peaks.</param>
            <param name="max">The maximum value for the centers, widths and peaks.</param>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.ActivationFunction">
            <summary>
            The activation function for this layer, in this case
            it produces an error because RBF layers do not have an
            activation function.
            </summary>
        </member>
        <member name="P:Encog.Neural.Networks.Layers.RadialBasisFunctionLayer.RadialBasisFunction">
            <summary>
            An array of radial basis functions.
            </summary>
        </member>
        <member name="T:Encog.Neural.NeuralData.Image.ImageNeuralDataSet">
            <summary>
            Store a collection of images for training with a neural network. This class
            collects and then downsamples images for use with a neural network. This is a
            memory based class, so large datasets can run out of memory.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.MUST_USE_IMAGE">
            <summary>
            Error message to inform the caller that only ImageNeuralData objects can
            be used with this collection.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.downsampler">
            <summary>
            The downsampler to use.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.height">
            <summary>
            The height to downsample to.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.width">
            <summary>
            The width to downsample to.
            </summary>
        </member>
        <member name="F:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.findBounds">
            <summary>
            Should the bounds be found and cropped.
            </summary>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.#ctor(System.Type,System.Boolean)">
            <summary>
            Construct this class with the specified downsampler.
            </summary>
            <param name="downsampler">The downsampler to use.</param>
            <param name="findBounds">Should the bounds be found and clipped?</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Add(Encog.Neural.Data.INeuralData)">
            <summary>
            Add the specified data, must be an ImageNeuralData class.
            </summary>
            <param name="data">The data The object to add.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Add(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Add the specified input and ideal object to the collection. 
            </summary>
            <param name="inputData">The image to train with.</param>
            <param name="idealData">The expected otuput form this image.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Add(Encog.Neural.NeuralData.INeuralDataPair)">
            <summary>
            Add input and expected output.  This is used for supervised training.
            </summary>
            <param name="inputData">The input data to train on.</param>
        </member>
        <member name="M:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Downsample(System.Int32,System.Int32)">
            <summary>
            Downsample all images and generate training data.
            </summary>
            <param name="height">The height to downsample to.</param>
            <param name="width">The width to downsample to.</param>
        </member>
        <member name="P:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Width">
            <summary>
            The width of this image.
            </summary>
        </member>
        <member name="P:Encog.Neural.NeuralData.Image.ImageNeuralDataSet.Height">
            <summary>
            The height of this image.
            </summary>
        </member>
        <member name="T:Encog.Neural.Data.Basic.BasicNeuralDataPair">
            <summary>
            Basic implementation of a data pair.  Holds both input and ideal data.
            If this is unsupervised training then ideal should be null.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Basic.BasicNeuralDataPair.ideal">
            <summary>
            The the expected output from the neural network, or null
            for unsupervised training.
            </summary>
        </member>
        <member name="F:Encog.Neural.Data.Basic.BasicNeuralDataPair.input">
            <summary>
            The training input to the neural network.
            </summary>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataPair.#ctor(Encog.Neural.Data.INeuralData,Encog.Neural.Data.INeuralData)">
            <summary>
            Construct a BasicNeuralDataPair class with the specified input
            and ideal values.
            </summary>
            <param name="input">The input to the neural network.</param>
            <param name="ideal">The expected results from the neural network.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataPair.#ctor(Encog.Neural.Data.INeuralData)">
            <summary>
            Construct a data pair that only includes input. (unsupervised)
            </summary>
            <param name="input">The input data.</param>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataPair.ToString">
            <summary>
            Convert object to a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="M:Encog.Neural.Data.Basic.BasicNeuralDataPair.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataPair.Input">
            <summary>
            The input data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataPair.Ideal">
            <summary>
            The ideal data.
            </summary>
        </member>
        <member name="P:Encog.Neural.Data.Basic.BasicNeuralDataPair.IsSupervised">
            <summary>
            Deterimine if this pair is supervised or unsupervised.
            </summary>
            <returns>True if this is a supervised pair.</returns>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Form">
            <summary>
            A document range that represents a form, and all embedded tags.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Form.action">
            <summary>
            The address that the form will be sent to.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Form.method">
            <summary>
            The means by which the form will be sent.
            </summary>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Form.#ctor(Encog.Bot.Browse.WebPage)">
            <summary>
            Construct a form on the specified web page.
            </summary>
            <param name="source">The web page that contains this form.</param>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Form.FindType(System.String,System.Int32)">
            <summary>
            Find the form input by type.
            </summary>
            <param name="type">The type of input we want.</param>
            <param name="index">The index to begin searching at.</param>
            <returns>The Input object that was found.</returns>
        </member>
        <member name="M:Encog.Bot.Browse.Range.Form.ToString">
            <summary>
            The object as a string.
            </summary>
            <returns>The object as a string.</returns>
        </member>
        <member name="P:Encog.Bot.Browse.Range.Form.Action">
            <summary>
            The URL to send the form to.
            </summary>
        </member>
        <member name="P:Encog.Bot.Browse.Range.Form.Method">
            <summary>
            The method, GET or POST.
            </summary>
        </member>
        <member name="T:Encog.Bot.Browse.Range.Form.FormMethod">
            <summary>
            The method for this form.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Form.FormMethod.POST">
            <summary>
            This form is to be POSTed.
            </summary>
        </member>
        <member name="F:Encog.Bot.Browse.Range.Form.FormMethod.GET">
            <summary>
            This form is to sent using a GET.
            </summary>
        </member>
        <member name="T:Encog.Normalize.Segregate.IntegerBalanceSegregator">
            <summary>
            Balance based on an input value. This allows you to make sure that one input
            class does not saturate the training data. To do this, you specify the input
            value to check and the number of occurrences of each integer value of this
            field to allow.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.IntegerBalanceSegregator.normalization">
            <summary>
            The normalization object to use.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.IntegerBalanceSegregator.target">
            <summary>
            The input field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.IntegerBalanceSegregator.count">
            <summary>
            The count per each of the int values for the input field.
            </summary>
        </member>
        <member name="F:Encog.Normalize.Segregate.IntegerBalanceSegregator.runningCounts">
            <summary>
            The running totals.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.#ctor(Encog.Normalize.Input.IInputField,System.Int32)">
            <summary>
            Construct a balanced segregator.
            </summary>
            <param name="target">The input field to base this on, should 
            be an integer value.</param>
            <param name="count">The number of rows to accept from each 
            unique value for the input.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.#ctor">
            <summary>
            Default constructor for reflection.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.DumpCounts">
            <summary>
            Get information on how many rows fall into each group.
            </summary>
            <returns>A string that contains the counts for each group.</returns>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.Init(Encog.Normalize.DataNormalization)">
            <summary>
            Init the segregator with the owning normalization object.
            </summary>
            <param name="normalization">The data normalization object to use.</param>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.PassInit">
            <summary>
            Init for a new pass.
            </summary>
        </member>
        <member name="M:Encog.Normalize.Segregate.IntegerBalanceSegregator.ShouldInclude">
            <summary>
            Determine of the current row should be included.
            </summary>
            <returns>True if the current row should be included.</returns>
        </member>
        <member name="P:Encog.Normalize.Segregate.IntegerBalanceSegregator.Owner">
            <summary>
            The owner of this segregator.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.IntegerBalanceSegregator.Count">
            <summary>
            The number of groups found.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.IntegerBalanceSegregator.RunningCounts">
            <summary>
            A map of the running count for each group.
            </summary>
        </member>
        <member name="P:Encog.Normalize.Segregate.IntegerBalanceSegregator.Target">
            <summary>
            The target input field.
            </summary>
        </member>
        <member name="T:Encog.encog_core_cs">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Encog.encog_core_cs.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Encog.encog_core_cs.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Encog.encog_core_cs.classes">
             <summary>
               Looks up a localized string similar to Encog.Bot.BotError
            Encog.Bot.BotUtil
            Encog.Bot.Browse.Address
            Encog.Bot.Browse.BrowseError
            Encog.Bot.Browse.Browser
            Encog.Bot.Browse.Extract.BasicExtract
            Encog.Bot.Browse.Extract.IExtract
            Encog.Bot.Browse.Extract.IExtractListener
            Encog.Bot.Browse.Extract.ListExtractListener
            Encog.Bot.Browse.LoadWebPage
            Encog.Bot.Browse.Range.Div
            Encog.Bot.Browse.Range.DocumentRange
            Encog.Bot.Browse.Range.Form
            Encog.Bot.Browse.Range.FormElement
            Encog.Bot.Browse.Range.Input
            Encog.Bot.Browse.Range.Link
            Encog.Bo [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
