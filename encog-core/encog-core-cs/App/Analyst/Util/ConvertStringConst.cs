/*
 * Encog(tm) Core v3.0 - Java Version
 * http://www.heatonresearch.com/encog/
 * http://code.google.com/p/encog-java/
 
 * Copyright 2008-2011 Heaton Research, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *   
 * For more information on Heaton Research copyrights, licenses 
 * and trademarks visit:
 * http://www.heatonresearch.com/copyright
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 5/5/11 3:32 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using System;
using Encog.Util.CSV;

namespace Encog.App.Analyst.Util
{
    /// <summary>
    /// Convert several Analyst String to the correct object.
    /// </summary>
    ///
    public sealed class ConvertStringConst
    {
        /// <summary>
        /// Private constructor.
        /// </summary>
        ///
        private ConvertStringConst()
        {
        }

        /// <summary>
        /// Convert a file format to a string.
        /// </summary>
        ///
        /// <param name="af">The file format.</param>
        /// <returns>A string.</returns>
        public static String AnalystFileFormat2String(AnalystFileFormat af)
        {
            if (af == AnalystFileFormat.DECPNT_COMMA)
            {
                return "decpnt|comma";
            }
            else if (af == AnalystFileFormat.DECPNT_SPACE)
            {
                return "decpnt|space";
            }
            else if (af == AnalystFileFormat.DECPNT_SEMI)
            {
                return "decpnt|semi";
            }
            else if (af == AnalystFileFormat.DECCOMMA_SPACE)
            {
                return "deccomma|space";
            }
            else if (af == AnalystFileFormat.DECCOMMA_SEMI)
            {
                return "deccomma|semi";
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Convert an analyst format to a csv format.
        /// </summary>
        ///
        /// <param name="af">The analyst format.</param>
        /// <returns>The CSV format.</returns>
        public static CSVFormat ConvertToCSVFormat(AnalystFileFormat af)
        {
            if (af == AnalystFileFormat.DECPNT_COMMA)
            {
                return new CSVFormat('.', ',');
            }
            else if (af == AnalystFileFormat.DECPNT_SPACE)
            {
                return new CSVFormat('.', ' ');
            }
            else if (af == AnalystFileFormat.DECPNT_SEMI)
            {
                return new CSVFormat('.', ';');
            }
            else if (af == AnalystFileFormat.DECCOMMA_SPACE)
            {
                return new CSVFormat(',', ' ');
            }
            else if (af == AnalystFileFormat.DECCOMMA_SEMI)
            {
                return new CSVFormat(',', ';');
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Convert a string to an analyst file format.
        /// </summary>
        ///
        /// <param name="str">The string.</param>
        /// <returns>The analyst file format.</returns>
        public static AnalystFileFormat String2AnalystFileFormat(String str)
        {
            if (str.Equals("decpnt|comma", StringComparison.InvariantCultureIgnoreCase))
            {
                return AnalystFileFormat.DECPNT_COMMA;
            }
            else if (str.Equals("decpnt|space", StringComparison.InvariantCultureIgnoreCase))
            {
                return AnalystFileFormat.DECPNT_SPACE;
            }
            else if (str.Equals("decpnt|semi", StringComparison.InvariantCultureIgnoreCase))
            {
                return AnalystFileFormat.DECPNT_SEMI;
            }
            else if (str.Equals("decpnt|space", StringComparison.InvariantCultureIgnoreCase))
            {
                return AnalystFileFormat.DECCOMMA_SPACE;
            }
            else if (str.Equals("decpnt|semi", StringComparison.InvariantCultureIgnoreCase))
            {
                return AnalystFileFormat.DECCOMMA_SEMI;
            }
            else
            {
                return default(AnalystFileFormat) /* was: null */;
            }
        }
    }
}