kernel void SingleNetworkCalculate(
    global read_only int inputSize,
    global read_only int outputSize,
    global read_only int layerCount,
    global read_only int neuronCount,
    global read_only int *layerIndex,
    global read_only int *layerCounts,
    global read_only int *weightIndex,
    global read_only float* input,
    global read_only float* weights,
    global write_only float *layerOutput
    )
{
    int sourceIndex = neuronCount - inputSize;

    for(int i=0;i<inputSize;i++)
        layerOutput[sourceIndex+i] = input[i];

    for (int currentLayer = layerCount - 1; currentLayer > 0; currentLayer--)
    {
      int inputIndex = layerIndex[currentLayer];
      int outputIndex = layerIndex[currentLayer - 1];
      int inputSize = layerCounts[currentLayer];
      int outputSize = layerCounts[currentLayer - 1];
      int index = weightIndex[currentLayer - 1];

      for (int i = 0; i < outputSize; i++)
      {
        layerOutput[i + outputIndex] = weights[index++];
      }

      for (int x = 0; x < outputSize; x++)
      {
        float sum = 0;
        for (int y = 0; y < inputSize; y++)
        {
          float value = layerOutput[inputIndex + y];
          value = -1 + (2 / (1 + exp(-2 * value)));
          sum += weights[index++] * value;
        }
        
        layerOutput[outputIndex + x] += sum;

        layerOutput[outputIndex + x] = layerOutput[outputIndex + x];
        
      }
    }
}